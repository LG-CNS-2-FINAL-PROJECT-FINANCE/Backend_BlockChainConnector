package com.ddiring.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.13.0.
 */
@SuppressWarnings("rawtypes")
public class FractionalInvestmentToken extends Contract {
    public static final String BINARY = "610200604052348015610010575f5ffd5b50604051615ba3380380615ba383398101604081905261002f91610755565b84338a80604051806040016040528060018152602001603160f81b8152508d8d816003908161005e91906108dc565b50600461006b82826108dc565b5061007b9150839050600561036b565b6101205261008a81600661036b565b61014052815160208084019190912060e052815190820120610100524660a05261011660e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600160a01b03811661014e57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6101578161039d565b506001600160a01b0316610160525f86116101cd5760405162461bcd60e51b815260206004820152603060248201527f4d696e696d756d20696e766573746d656e7420616d6f756e74206d757374206260448201526f0652067726561746572207468616e20360841b6064820152608401610145565b858710156102435760405162461bcd60e51b815260206004820152603560248201527f546f74616c20676f616c206d757374206265206174206c65617374206d696e6960448201527f6d756d20696e766573746d656e7420616d6f756e7400000000000000000000006064820152608401610145565b61024d86886109aa565b156102cc5760405162461bcd60e51b815260206004820152604360248201527f546f74616c20676f616c206d75737420626520706572666563746c792064697660448201527f697369626c65206279206d696e696d756d20696e766573746d656e7420616d6f6064820152621d5b9d60ea1b608482015260a401610145565b6101808a90526101a08790526101c08690526102e886886109d1565b6101e052600980546001600160401b038616600160a01b026001600160e01b03199091166001600160a01b03881617179055600a839055600b61032b83826108dc565b50600c61033882826108dc565b5061035c306103496012600a610ac7565b6101e0516103579190610adc565b6103ee565b50505050505050505050610b5e565b5f6020835110156103865761037f83610426565b9050610397565b8161039184826108dc565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382166104175760405163ec442f0560e01b81525f6004820152602401610145565b6104225f8383610463565b5050565b5f5f829050601f81511115610450578260405163305a27a960e01b81526004016101459190610af3565b805161045b82610b28565b179392505050565b6001600160a01b03831615610551576001600160a01b0383165f908152601360205260409020544210156104e55760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b6064820152608401610145565b6104f8600854600160a01b900460ff1690565b156105515760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b6064820152608401610145565b61055c838383610561565b505050565b6001600160a01b03831661058b578060025f8282546105809190610b4b565b909155506105fb9050565b6001600160a01b0383165f90815260208190526040902054818110156105dd5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610145565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661061757600280548290039055610635565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161067a91815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126106aa575f5ffd5b81516001600160401b038111156106c3576106c3610687565b604051601f8201601f19908116603f011681016001600160401b03811182821017156106f1576106f1610687565b604052818152838201602001851015610708575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b80516001600160a01b038116811461073a575f5ffd5b919050565b80516001600160401b038116811461073a575f5ffd5b5f5f5f5f5f5f5f5f5f5f6101408b8d03121561076f575f5ffd5b8a5160208c0151909a506001600160401b0381111561078c575f5ffd5b6107988d828e0161069b565b60408d0151909a5090506001600160401b038111156107b5575f5ffd5b6107c18d828e0161069b565b60608d015160808e0151919a50985096506107e0905060a08c01610724565b94506107ee60c08c0161073f565b60e08c01516101008d015191955093506001600160401b03811115610811575f5ffd5b61081d8d828e0161069b565b6101208d015190935090506001600160401b0381111561083b575f5ffd5b6108478d828e0161069b565b9150509295989b9194979a5092959850565b600181811c9082168061086d57607f821691505b60208210810361088b57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561055c57805f5260205f20601f840160051c810160208510156108b65750805b601f840160051c820191505b818110156108d5575f81556001016108c2565b5050505050565b81516001600160401b038111156108f5576108f5610687565b610909816109038454610859565b84610891565b6020601f82116001811461093b575f83156109245750848201515b5f19600385901b1c1916600184901b1784556108d5565b5f84815260208120601f198516915b8281101561096a578785015182556020948501946001909201910161094a565b508482101561098757868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52601260045260245ffd5b5f826109b8576109b8610996565b500690565b634e487b7160e01b5f52601160045260245ffd5b5f826109df576109df610996565b500490565b6001815b6001841115610a1f57808504811115610a0357610a036109bd565b6001841615610a1157908102905b60019390931c9280026109e8565b935093915050565b5f82610a3557506001610397565b81610a4157505f610397565b8160018114610a575760028114610a6157610a7d565b6001915050610397565b60ff841115610a7257610a726109bd565b50506001821b610397565b5060208310610133831016604e8410600b8410161715610aa0575081810a610397565b610aac5f1984846109e4565b805f1904821115610abf57610abf6109bd565b029392505050565b5f610ad560ff841683610a27565b9392505050565b8082028115828204841417610397576103976109bd565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b8051602080830151919081101561088b575f1960209190910360031b1b16919050565b80820180821115610397576103976109bd565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051614f05610c9e5f395f61023201525f61035301525f61053401525f818161032c0152818161140301528181611445015281816119c401528181611a06015281816129ad015281816129dc01528181612a3901528181612a6801528181612b6901528181612b9801528181612c3a01528181612c7c01528181612ce601528181612d1501528181612d9d01528181612dcc01528181612e5401528181612e8301528181612ed301528181612f020152818161301f01528181613061015281816130b9015281816130e801528181613147015261317601525f818161078f01526126d101525f6123ae01525f61238101525f6121b501525f61218d01525f6120e801525f61211201525f61213c0152614f055ff3fe608060405234801561000f575f5ffd5b5060043610610229575f3560e01c8063715018a61161012a578063a9059cbb116100b4578063d505accf11610079578063d505accf14610662578063dcd9cb6f14610675578063dd62ed3e14610688578063e08f5638146106c0578063f2fde38b146106c8575f5ffd5b8063a9059cbb1461051c578063b1504a881461052f578063b38374b714610556578063cb021d5114610579578063d0973af81461064f575f5ffd5b806384b0196e116100fa57806384b0196e146104ae5780638da5cb5b146104c957806395d89b41146104ee5780639d212a18146104f6578063a4108ecb14610509575f5ffd5b8063715018a6146104785780637ecebe00146104805780637f17cef7146104935780638456cb59146104a6575f5ffd5b80633666cec5116101b65780635ba6947f1161017b5780635ba6947f146103755780635c8ecf53146103e35780635c975abb146104405780635d0371461461045257806370a0823114610465575f5ffd5b80633666cec5146102f95780633e5793071461030c5780633f4ba83a1461031f5780633fafa127146103275780634d298a071461034e575f5ffd5b806318160ddd116101fc57806318160ddd146102b457806323b872dd146102bc5780632d873e15146102cf578063313ce567146102e25780633644e515146102f1575f5ffd5b80630337b3aa1461022d57806306fdde0314610267578063095ea7b31461027c5780630ca761751461029f575b5f5ffd5b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61026f6106db565b60405161025e9190613ec4565b61028f61028a366004613ef1565b61076b565b604051901515815260200161025e565b6102b26102ad366004613ff6565b610784565b005b600254610254565b61028f6102ca366004614061565b610807565b61026f6102dd36600461409b565b61082a565b6040516012815260200161025e565b6102546108db565b6102b26103073660046140cb565b6108e9565b6102b261031a366004613ef1565b610b81565b6102b2610bfe565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6103bc61038336600461414a565b8051602081830181018051600f825292820191909301209152805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b039094168452602084019290925215159082015260600161025e565b6104216103f136600461414a565b8051602081830181018051601082529282019190930120915280546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520161025e565b600854600160a01b900460ff1661028f565b6102b261046036600461417b565b610c10565b610254610473366004614192565b610c25565b6102b2610c3f565b61025461048e366004614192565b610c50565b61026f6104a136600461417b565b610c6d565b6102b2610c85565b6104b6610c95565b60405161025e97969594939291906141ab565b6008546001600160a01b03165b6040516001600160a01b03909116815260200161025e565b61026f610cd7565b6102b2610504366004614241565b610ce6565b6102b2610517366004614324565b61148d565b61028f61052a366004613ef1565b611a43565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b61056961056436600461414a565b611a50565b60405161025e9493929190614446565b61060261058736600461414a565b80516020818301810180516011825292820193820193909320919092526040805160608101825282546001600160a01b039081168252600184015482860152600284015460ff908116151583850152835180850190945260038501549091168352600484015494830194909452600590920154919290911683565b6040805184516001600160a01b03908116825260208087015181840152958301511515928201929092528351909116606082015292909101516080830152151560a082015260c00161025e565b6102b261065d366004613ef1565b611b18565b6102b261067036600461447f565b611b87565b6009546104d6906001600160a01b031681565b6102546106963660046144ac565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6102b2611cbd565b6102b26106d6366004614192565b611d34565b6060600380546106ea906144dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610716906144dd565b80156107615780601f1061073857610100808354040283529160200191610761565b820191905f5260205f20905b81548152906001019060200180831161074457829003601f168201915b5050505050905090565b5f33610778818585611d6e565b60019150505b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107cd5760405163c6829f8360e01b815260040160405180910390fd5b6107d8838383611d80565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6905f90a2505050565b5f33610814858285612009565b61081f85858561207f565b506001949350505050565b600e602052815f5260405f208181548110610843575f80fd5b905f5260205f20015f9150915050805461085c906144dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610888906144dd565b80156108d35780601f106108aa576101008083540402835291602001916108d3565b820191905f5260205f20905b8154815290600101906020018083116108b657829003601f168201915b505050505081565b5f6108e46120dc565b905090565b6108f1612205565b6108f9612232565b600f87604051610909919061452c565b9081526040519081900360200190206002015460ff161561098d5760405162461bcd60e51b815260206004820152603360248201527f5472616465204465706f736974207265717565737420616c726561647920707260448201527237b1b2b9b9b2b21037b9103832b73234b7339760691b60648201526084015b60405180910390fd5b6001600160a01b0386166109df5760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b9b2b99031b0b73737ba103132903d32b9379760391b6044820152606401610984565b5f8511610a415760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e7320746f207472616e73666572206d75737420626520677265617460448201526932b9103a3430b710181760b11b6064820152608401610984565b5f610a4e6012600a61462e565b610a58908761463c565b905080610a6488610c25565b1015610ac25760405162461bcd60e51b815260206004820152602760248201527f53656c6c6572277320746f6b656e2062616c616e636520697320696e7375666660448201526634b1b4b2b73a1760c91b6064820152608401610984565b610ad187308388888888611b87565b610adc87308361207f565b86600f89604051610aed919061452c565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091558690600f90610b2d908b9061452c565b9081526020016040518091039020600101819055506001600f89604051610b54919061452c565b908152604051908190036020019020600201805491151560ff199092169190911790555050505050505050565b610b89612205565b428111610be35760405162461bcd60e51b815260206004820152602260248201527f556e6c6f636b2074696d65206d75737420626520696e20746865206675747572604482015261329760f11b6064820152608401610984565b6001600160a01b039091165f90815260136020526040902055565b610c06612205565b610c0e61225d565b565b610c18612205565b610c2230826122b2565b50565b6001600160a01b03165f9081526020819052604090205490565b610c47612205565b610c0e5f6122e6565b6001600160a01b0381165f9081526007602052604081205461077e565b60126020525f90815260409020805461085c906144dd565b610c8d612205565b610c0e612337565b5f6060805f5f5f6060610ca661237a565b610cae6123a7565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6060600480546106ea906144dd565b610cee612205565b610cf6612232565b601187604051610d06919061452c565b9081526040519081900360200190206005015460ff1615610d7d5760405162461bcd60e51b815260206004820152602b60248201527f5472616465207265717565737420616c72656164792070726f6365737365642060448201526a37b9103832b73234b7339760a91b6064820152608401610984565b600f86604051610d8d919061452c565b9081526040519081900360200190206002015460ff16610e0a5760405162461bcd60e51b815260206004820152603260248201527f5472616465204465706f7369742072657175657374206973206e6f742070726f60448201527131b2b9b9b2b21037b9103832b73234b7339760711b6064820152608401610984565b6001600160a01b03821615801590610e2a57506001600160a01b03851615155b610e725760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b9b2b99031b0b73737ba103132903d32b9379760391b6044820152606401610984565b5f84118015610e8057505f81115b610e9c5760405162461bcd60e51b815260040161098490614653565b838114610efe5760405162461bcd60e51b815260206004820152602a60248201527f42757920616e642053656c6c20616d6f756e7473206d757374206d61746368206044820152693337b9103a3930b2329760b11b6064820152608401610984565b600f86604051610f0e919061452c565b908152604051908190036020019020546001600160a01b03868116911614610f8a5760405162461bcd60e51b815260206004820152602960248201527f53656c6c657220646f6573206e6f74206d61746368207472616e73616374696f6044820152686e20686973746f727960b81b6064820152608401610984565b600f86604051610f9a919061452c565b90815260200160405180910390206001015484146110115760405162461bcd60e51b815260206004820152602e60248201527f53656c6c20616d6f756e7420646f6573206e6f74206d61746368207472616e7360448201526d616374696f6e20686973746f727960901b6064820152608401610984565b5f600c805461101f906144dd565b9050116110655760405162461bcd60e51b815260206004820152601460248201527329b7bab931b29031b7b232903737ba1039b2ba1760611b6044820152606401610984565b6110716012600a61462e565b61107b908561463c565b61108430610c25565b10156110fa576040805162461bcd60e51b81526020600482015260248101919091527f436f6e747261637420686f6c64696e6720616d6f756e7420697320696e73756660448201527f66696369656e74207468616e20547261646520546f6b656e20416d6f756e742e6064820152608401610984565b8160108460405161110b919061452c565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b031990931692909217909155819060109061114b90869061452c565b908152602001604051809103902060010181905550600f86604051611170919061452c565b908152602001604051809103902060118860405161118e919061452c565b908152604051908190036020018120825481546001600160a01b0319166001600160a01b03909116178155600180840154908201556002928301549201805460ff909316151560ff19909316929092179091556010906111ef90859061452c565b908152602001604051809103902060118860405161120d919061452c565b90815260405190819003602001812082546003820180546001600160a01b0319166001600160a01b039092169190911790556001909201546004909201919091555f9060119061125e908a9061452c565b9081526040805160209281900383018120600501805460ff19169415159490941790935560e0830181525f80845291830182905282015260608082018190526080820181905260a0820181905260c082015261134b600c80546112c0906144dd565b80601f01602080910402602001604051908101604052809291908181526020018280546112ec906144dd565b80156113375780601f1061130e57610100808354040283529160200191611337565b820191905f5260205f20905b81548152906001019060200180831161131a57829003601f168201915b5050505050826123d490919063ffffffff16565b6040805160018082528183019092525f91816020015b606081526020019060019003908161136157905050905088815f8151811061138b5761138b614697565b60209081029190910101526113a082826123e0565b5f6113cf6113ad84612409565b600960149054906101000a90046001600160401b0316620493e0600a546126cd565b5f8181526012602052604090209091506113e98b826146ef565b50808a6040516113f9919061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007f589bd8c058cd521b9d0ee152b14a61da92077f0114e35b76ac9d9176b0ad7e547f00000000000000000000000000000000000000000000000000000000000000008e8d8b8e6040516114799594939291906147a9565b60405180910390a450505050505050505050565b611495612205565b61149d612232565b5f81516001600160401b038111156114b7576114b7613f19565b6040519080825280602002602001820160405280156114ea57816020015b60608152602001906001900390816114d55790505b5090505f82516001600160401b0381111561150757611507613f19565b60405190808252806020026020018201604052801561153a57816020015b60608152602001906001900390816115255790505b5090505f5b835181101561176057600d84828151811061155c5761155c614697565b60200260200101515f0151604051611574919061452c565b9081526040519081900360200190206003015460ff16156115ed5760405162461bcd60e51b815260206004820152602d60248201527f496e697469616c207265717565737420616c72656164792070726f636573736560448201526c321037b9103832b73234b7339760991b6064820152608401610984565b5f6001600160a01b031684828151811061160957611609614697565b6020026020010151602001516001600160a01b03160361166b5760405162461bcd60e51b815260206004820152601d60248201527f427579657220616464726573732063616e6e6f74206265207a65726f2e0000006044820152606401610984565b5f84828151811061167e5761167e614697565b602002602001015160400151116116a75760405162461bcd60e51b815260040161098490614653565b6116b36012600a61462e565b8482815181106116c5576116c5614697565b6020026020010151604001516116db919061463c565b6116e430610c25565b10156117585760405162461bcd60e51b815260206004820152603760248201527f4e6f7420656e6f75676820746f6b656e7320696e20636f6e747261637420666f60448201527f72207468697320696e697469616c20726571756573742e0000000000000000006064820152608401610984565b60010161153f565b505f5b83518110156119375783818151811061177e5761177e614697565b602002602001015160200151600d85838151811061179e5761179e614697565b60200260200101515f01516040516117b6919061452c565b90815260200160405180910390206001015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055508381815181106117fc576117fc614697565b602002602001015160400151600d85838151811061181c5761181c614697565b60200260200101515f0151604051611834919061452c565b9081526020016040518091039020600201819055505f84828151811061185c5761185c614697565b60200260200101515f015161188d86848151811061187c5761187c614697565b60200260200101516020015161279a565b6118b38785815181106118a2576118a2614697565b6020026020010151604001516127b0565b6040516020016118c5939291906147e5565b6040516020818303038152906040529050808483815181106118e9576118e9614697565b602002602001018190525084828151811061190657611906614697565b60200260200101515f015183838151811061192357611923614697565b602090810291909101015250600101611763565b506119766040805160e08101909152805f81526020015f81526020015f8152602001606081526020016060815260200160608152602001606081525090565b611986600b80546112c0906144dd565b61199081846123e0565b5f61199d6113ad83612409565b5f818152600e6020908152604090912085519293506119c0929091860190613dad565b50807f00000000000000000000000000000000000000000000000000000000000000007f88dd8d46f665018a2a09127133b628777e643d4988d6a99ddae27c46a4770b107f000000000000000000000000000000000000000000000000000000000000000088604051611a34929190614824565b60405180910390a35050505050565b5f3361077881858561207f565b8051602081830181018051600d82529282019190930120915280548190611a76906144dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa2906144dd565b8015611aed5780601f10611ac457610100808354040283529160200191611aed565b820191905f5260205f20905b815481529060010190602001808311611ad057829003601f168201915b505050506001830154600284015460039094015492936001600160a01b039091169290915060ff1684565b611b20612205565b80611b2a30610c25565b1015611b785760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e747261637420746f6b656e732e0000006044820152606401610984565b611b8330838361207f565b5050565b83421115611bab5760405163313c898160e11b815260048101859052602401610984565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888611bf68c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f611c508261283f565b90505f611c5f8287878761286b565b9050896001600160a01b0316816001600160a01b031614611ca6576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610984565b611cb18a8a8a611d6e565b50505050505050505050565b611cc5612205565b600954604051631cd0704360e21b8152600160a01b82046001600160401b031660048201523060248201526001600160a01b0390911690637341c10c906044015f604051808303815f87803b158015611d1c575f5ffd5b505af1158015611d2e573d5f5f3e3d5ffd5b50505050565b611d3c612205565b6001600160a01b038116611d6557604051631e4fbdf760e01b81525f6004820152602401610984565b610c22816122e6565b611d7b8383836001612897565b505050565b5f838152600e6020908152604080832080548251818502810185019093528083529192909190849084015b82821015611e53578382905f5260205f20018054611dc8906144dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611df4906144dd565b8015611e3f5780601f10611e1657610100808354040283529160200191611e3f565b820191905f5260205f20905b815481529060010190602001808311611e2257829003601f168201915b505050505081526020019060010190611dab565b5050505090505f60125f8681526020019081526020015f208054611e76906144dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611ea2906144dd565b8015611eed5780601f10611ec457610100808354040283529160200191611eed565b820191905f5260205f20905b815481529060010190602001808311611ed057829003601f168201915b505050505090505f81511115611f26575f84806020019051810190611f1291906148c3565b9050611f2086838387612969565b50612002565b815115611fba57835160609015611f4e5784806020019051810190611f4b91906148da565b90505b5f5b8351811015611fb3575f81835111611f68575f611f83565b828281518110611f7a57611f7a614697565b60200260200101515b9050611faa88868481518110611f9b57611f9b614697565b60200260200101518389612e10565b50600101611f50565b5050612002565b60405162461bcd60e51b815260206004820152601c60248201527f556e6b6e6f776e20436861696e6c696e6b2072657175657374204944000000006044820152606401610984565b5050505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f19811015611d2e578181101561207157604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610984565b611d2e84848484035f612897565b6001600160a01b0383166120a857604051634b637e8f60e11b81525f6004820152602401610984565b6001600160a01b0382166120d15760405163ec442f0560e01b81525f6004820152602401610984565b611d7b8383836131b8565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561213457507f000000000000000000000000000000000000000000000000000000000000000046145b1561215e57507f000000000000000000000000000000000000000000000000000000000000000090565b6108e4604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b6008546001600160a01b03163314610c0e5760405163118cdaa760e01b8152336004820152602401610984565b600854600160a01b900460ff1615610c0e5760405163d93c066560e01b815260040160405180910390fd5b6122656132ab565b6008805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166122db57604051634b637e8f60e11b81525f6004820152602401610984565b611b83825f836131b8565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b61233f612232565b6008805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122953390565b60606108e47f000000000000000000000000000000000000000000000000000000000000000060056132d5565b60606108e47f000000000000000000000000000000000000000000000000000000000000000060066132d5565b611b83825f5f8461337e565b80515f036124015760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60605f6124176101006133fb565b90506124506040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b8152508261341b90919063ffffffff16565b825161246e90600281111561246757612467614960565b8290613434565b6040805180820190915260088152676c616e677561676560c01b602082015261249890829061341b565b60408301516124af90801561246757612467614960565b604080518082019091526006815265736f7572636560d01b60208201526124d790829061341b565b60608301516124e790829061341b565b60a08301515115612572576040805180820190915260048152636172677360e01b602082015261251890829061341b565b6125218161346d565b5f5b8360a0015151811015612568576125608460a00151828151811061254957612549614697565b60200260200101518361341b90919063ffffffff16565b600101612523565b5061257281613491565b60808301515115612635575f8360200151600281111561259457612594614960565b036125b25760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b60208201526125e390829061341b565b6125fc8360200151600281111561246757612467614960565b6040805180820190915260078152667365637265747360c81b602082015261262590829061341b565b60808301516126359082906134af565b60c083015151156126c55760408051808201909152600981526862797465734172677360b81b602082015261266b90829061341b565b6126748161346d565b5f5b8360c00151518110156126bb576126b38460c00151828151811061269c5761269c614697565b6020026020010151836134af90919063ffffffff16565b600101612676565b506126c581613491565b515192915050565b5f5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401612724959493929190614974565b6020604051808303815f875af1158015612740573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061276491906148c3565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8905f90a295945050505050565b606061077e6001600160a01b03831660146134bc565b60605f6127bc83613635565b60010190505f816001600160401b038111156127da576127da613f19565b6040519080825280601f01601f191660200182016040528015612804576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461280e57509392505050565b5f61077e61284b6120dc565b8360405161190160f01b8152600281019290925260228201526042902090565b5f5f5f5f61287b8888888861370c565b92509250925061288b82826137d4565b50909695505050505050565b6001600160a01b0384166128c05760405163e602df0560e01b81525f6004820152602401610984565b6001600160a01b0383166128e957604051634a1406b160e11b81525f6004820152602401610984565b6001600160a01b038085165f9081526001602090815260408083209387168352929052208290558015611d2e57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161295b91815260200190565b60405180910390a350505050565b601183604051612979919061452c565b9081526040519081900360200190206005015460ff1615612a195783836040516129a3919061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614eb05f395f51905f527f0000000000000000000000000000000000000000000000000000000000000000875f604051612a0c939291906149bc565b60405180910390a4611d2e565b805115612a99578383604051612a2f919061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614eb05f395f51905f527f0000000000000000000000000000000000000000000000000000000000000000876001604051612a0c93929190614a21565b5f601184604051612aaa919061452c565b908152604051908190036020018120546001600160a01b031691505f90601190612ad590879061452c565b908152604051908190036020018120600301546001600160a01b031691505f90601190612b0390889061452c565b9081526040519081900360200190206001015490505f612b21601290565b612b2c90600a61462e565b612b36908361463c565b905085600103612cbd5780612b4a30610c25565b1015612be2578787604051612b5f919061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614eb05f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008b6002604051612bc993929190614a92565b60405180910390a4612bd9610c85565b50505050611d2e565b612bed30848361207f565b6001601188604051612bff919061452c565b908152604051908190036020018120600501805492151560ff19909316929092179091558890612c3090899061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007fe4daf0cc7a61dd6ad790d55a15d78530cae3c88af6fd51fa88885a1c75911bea7f00000000000000000000000000000000000000000000000000000000000000008b898989604051612cb0959493929190614b10565b60405180910390a4612e06565b80612cc730610c25565b1015612d46578787604051612cdc919061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614eb05f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008b6002604051612bc993929190614b88565b612d5130858361207f565b5f601188604051612d62919061452c565b908152604051908190036020018120600201805492151560ff19909316929092179091558890612d9390899061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614eb05f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008b6003604051612dfd93929190614c27565b60405180910390a45b5050505050505050565b600d83604051612e20919061452c565b9081526040519081900360200190206003015460ff1615612eb3578383604051612e4a919061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614e905f395f51905f527f0000000000000000000000000000000000000000000000000000000000000000875f604051612a0c939291906149bc565b805115612f33578383604051612ec9919061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614e905f395f51905f527f0000000000000000000000000000000000000000000000000000000000000000876001604051612a0c93929190614a21565b5f600d84604051612f44919061452c565b908152604051908190036020018120600101546001600160a01b031691505f90600d90612f7290879061452c565b90815260200160405180910390206002015490508360010361312e57612f9a6012600a61462e565b612fa4908261463c565b612fad30610c25565b106130a057612fd23083612fc36012600a61462e565b612fcd908561463c565b61207f565b6001600d86604051612fe4919061452c565b908152604051908190036020018120600301805492151560ff1990931692909217909155869061301590879061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007f67a14b8953fe4619174debb9fe0581a67af9a1f4703b50e5e70fc32774dc3e147f00000000000000000000000000000000000000000000000000000000000000008987876040516130939493929190614cbd565b60405180910390a46131b0565b85856040516130af919061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614e905f395f51905f527f000000000000000000000000000000000000000000000000000000000000000089600260405161311993929190614d2d565b60405180910390a4613129610c85565b6131b0565b858560405161313d919061452c565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614e905f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008960036040516131a793929190614db8565b60405180910390a45b505050505050565b6001600160a01b038316156132a0576001600160a01b0383165f9081526013602052604090205442101561323a5760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b6064820152608401610984565b600854600160a01b900460ff16156132a05760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b6064820152608401610984565b611d7b83838361388c565b600854600160a01b900460ff16610c0e57604051638dfc202b60e01b815260040160405180910390fd5b606060ff83146132ef576132e8836139b2565b905061077e565b8180546132fb906144dd565b80601f0160208091040260200160405190810160405280929190818152602001828054613327906144dd565b80156133725780601f1061334957610100808354040283529160200191613372565b820191905f5260205f20905b81548152906001019060200180831161335557829003601f168201915b5050505050905061077e565b80515f0361339f576040516322ce3edd60e01b815260040160405180910390fd5b838360028111156133b2576133b2614960565b908160028111156133c5576133c5614960565b905250604084018280156133db576133db614960565b908180156133eb576133eb614960565b9052506060909301929092525050565b613403613e01565b805161340f90836139ef565b505f6020820152919050565b6134288260038351613a63565b8151611d7b9082613b7c565b81516134419060c2613ba3565b50611b83828260405160200161345991815260200190565b6040516020818303038152906040526134af565b613478816004613c0a565b60018160200181815161348b9190614e2a565b90525050565b61349c816007613c0a565b60018160200181815161348b9190614e3d565b6134288260028351613a63565b6060825f6134cb84600261463c565b6134d6906002614e2a565b6001600160401b038111156134ed576134ed613f19565b6040519080825280601f01601f191660200182016040528015613517576020820181803683370190505b509050600360fc1b815f8151811061353157613531614697565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811061355f5761355f614697565b60200101906001600160f81b03191690815f1a9053505f61358185600261463c565b61358c906001614e2a565b90505b6001811115613603576f181899199a1a9b1b9c1cb0b131b232b360811b83600f16601081106135c0576135c0614697565b1a60f81b8282815181106135d6576135d6614697565b60200101906001600160f81b03191690815f1a90535060049290921c916135fc81614e50565b905061358f565b50811561362d5760405163e22e27eb60e01b81526004810186905260248101859052604401610984565b949350505050565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106136735772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061369f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106136bd57662386f26fc10000830492506010015b6305f5e10083106136d5576305f5e100830492506008015b61271083106136e957612710830492506004015b606483106136fb576064830492506002015b600a831061077e5760010192915050565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561374557505f915060039050826137ca565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015613796573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b0381166137c157505f9250600191508290506137ca565b92505f91508190505b9450945094915050565b5f8260038111156137e7576137e7614960565b036137f0575050565b600182600381111561380457613804614960565b036138225760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561383657613836614960565b036138575760405163fce698f760e01b815260048101829052602401610984565b600382600381111561386b5761386b614960565b03611b83576040516335e2f38360e21b815260048101829052602401610984565b6001600160a01b0383166138b6578060025f8282546138ab9190614e2a565b909155506139269050565b6001600160a01b0383165f90815260208190526040902054818110156139085760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610984565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661394257600280548290039055613960565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516139a591815260200190565b60405180910390a3505050565b60605f6139be83613c21565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b60408051808201909152606081525f6020820152613a0e602083614e65565b15613a3657613a1e602083614e65565b613a29906020614e3d565b613a339083614e2a565b91505b60208084018390526040518085525f8152908184010181811015613a58575f5ffd5b604052509192915050565b6017816001600160401b031611613a89578251611d2e9060e0600585901b168317613ba3565b60ff816001600160401b031611613ac9578251613ab1906018611fe0600586901b1617613ba3565b508251611d2e906001600160401b0383166001613c48565b61ffff816001600160401b031611613b0a578251613af2906019611fe0600586901b1617613ba3565b508251611d2e906001600160401b0383166002613c48565b63ffffffff816001600160401b031611613b4d578251613b3590601a611fe0600586901b1617613ba3565b508251611d2e906001600160401b0383166004613c48565b8251613b6490601b611fe0600586901b1617613ba3565b508251611d2e906001600160401b0383166008613c48565b60408051808201909152606081525f6020820152613b9c83838451613cca565b9392505050565b60408051808201909152606081525f60208201528251515f613bc6826001614e2a565b905084602001518210613be757613be785613be283600261463c565b613d96565b8451602083820101858153508051821115613c00578181525b5093949350505050565b8151611d7b90601f611fe0600585901b1617613ba3565b5f60ff8216601f81111561077e57604051632cd44ac360e21b815260040160405180910390fd5b60408051808201909152606081525f60208201528351515f613c6a8285614e2a565b90508560200151811115613c8757613c8786613be283600261463c565b5f6001613c9686610100614e84565b613ca09190614e3d565b90508651828101878319825116178152508051831115613cbe578281525b50959695505050505050565b60408051808201909152606081525f60208201528251821115613ceb575f5ffd5b8351515f613cf98483614e2a565b90508560200151811115613d1657613d1686613be283600261463c565b85518051838201602001915f9180851115613d2f578482525b505050602086015b60208610613d6f5780518252613d4e602083614e2a565b9150613d5b602082614e2a565b9050613d68602087614e3d565b9550613d37565b5181515f1960208890036101000a0190811690199190911617905250849150509392505050565b8151613da283836139ef565b50611d2e8382613b7c565b828054828255905f5260205f20908101928215613df1579160200282015b82811115613df15782518290613de190826146ef565b5091602001919060010190613dcb565b50613dfd929150613e34565b5090565b6040518060400160405280613e286040518060400160405280606081526020015f81525090565b81526020015f81525090565b80821115613dfd575f613e478282613e50565b50600101613e34565b508054613e5c906144dd565b5f825580601f10613e6b575050565b601f0160209004905f5260205f2090810190610c2291905b80821115613dfd575f8155600101613e83565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f613b9c6020830184613e96565b80356001600160a01b0381168114613eec575f5ffd5b919050565b5f5f60408385031215613f02575f5ffd5b613f0b83613ed6565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b0381118282101715613f4f57613f4f613f19565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613f7d57613f7d613f19565b604052919050565b5f82601f830112613f94575f5ffd5b8135602083015f5f6001600160401b03841115613fb357613fb3613f19565b50601f8301601f1916602001613fc881613f55565b915050828152858383011115613fdc575f5ffd5b828260208301375f92810160200192909252509392505050565b5f5f5f60608486031215614008575f5ffd5b8335925060208401356001600160401b03811115614024575f5ffd5b61403086828701613f85565b92505060408401356001600160401b0381111561404b575f5ffd5b61405786828701613f85565b9150509250925092565b5f5f5f60608486031215614073575f5ffd5b61407c84613ed6565b925061408a60208501613ed6565b929592945050506040919091013590565b5f5f604083850312156140ac575f5ffd5b50508035926020909101359150565b803560ff81168114613eec575f5ffd5b5f5f5f5f5f5f5f60e0888a0312156140e1575f5ffd5b87356001600160401b038111156140f6575f5ffd5b6141028a828b01613f85565b97505061411160208901613ed6565b9550604088013594506060880135935061412d608089016140bb565b9699959850939692959460a0840135945060c09093013592915050565b5f6020828403121561415a575f5ffd5b81356001600160401b0381111561416f575f5ffd5b61362d84828501613f85565b5f6020828403121561418b575f5ffd5b5035919050565b5f602082840312156141a2575f5ffd5b613b9c82613ed6565b60ff60f81b8816815260e060208201525f6141c960e0830189613e96565b82810360408401526141db8189613e96565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015614230578351835260209384019390920191600101614212565b50909b9a5050505050505050505050565b5f5f5f5f5f5f5f60e0888a031215614257575f5ffd5b87356001600160401b0381111561426c575f5ffd5b6142788a828b01613f85565b97505060208801356001600160401b03811115614293575f5ffd5b61429f8a828b01613f85565b9650506142ae60408901613ed6565b94506060880135935060808801356001600160401b038111156142cf575f5ffd5b6142db8a828b01613f85565b9350506142ea60a08901613ed6565b96999598509396929591949193505060c09091013590565b5f6001600160401b0382111561431a5761431a613f19565b5060051b60200190565b5f60208284031215614334575f5ffd5b81356001600160401b03811115614349575f5ffd5b8201601f81018413614359575f5ffd5b803561436c61436782614302565b613f55565b8082825260208201915060208360051b85010192508683111561438d575f5ffd5b602084015b8381101561443b5780356001600160401b038111156143af575f5ffd5b85016080818a03601f190112156143c4575f5ffd5b6143cc613f2d565b60208201356001600160401b038111156143e4575f5ffd5b6143f38b602083860101613f85565b82525061440260408301613ed6565b602082015260608201356040820152608090910135908115158214614425575f5ffd5b6060810191909152835260209283019201614392565b509695505050505050565b608081525f6144586080830187613e96565b6001600160a01b039590951660208301525060408101929092521515606090910152919050565b5f5f5f5f5f5f5f60e0888a031215614495575f5ffd5b61449e88613ed6565b965061411160208901613ed6565b5f5f604083850312156144bd575f5ffd5b6144c683613ed6565b91506144d460208401613ed6565b90509250929050565b600181811c908216806144f157607f821691505b60208210810361450f57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f81518060208401855e5f93019283525090919050565b5f613b9c8284614515565b634e487b7160e01b5f52601160045260245ffd5b6001815b60018411156145865780850481111561456a5761456a614537565b600184161561457857908102905b60019390931c92800261454f565b935093915050565b5f8261459c5750600161077e565b816145a857505f61077e565b81600181146145be57600281146145c8576145e4565b600191505061077e565b60ff8411156145d9576145d9614537565b50506001821b61077e565b5060208310610133831016604e8410600b8410161715614607575081810a61077e565b6146135f19848461454b565b805f190482111561462657614626614537565b029392505050565b5f613b9c60ff84168361458e565b808202811582820484141761077e5761077e614537565b60208082526024908201527f546f6b656e20616d6f756e74206d7573742062652067726561746572207468616040820152633710181760e11b606082015260800190565b634e487b7160e01b5f52603260045260245ffd5b601f821115611d7b57805f5260205f20601f840160051c810160208510156146d05750805b601f840160051c820191505b81811015612002575f81556001016146dc565b81516001600160401b0381111561470857614708613f19565b61471c8161471684546144dd565b846146ab565b6020601f82116001811461474e575f83156147375750848201515b5f19600385901b1c1916600184901b178455612002565b5f84815260208120601f198516915b8281101561477d578785015182556020948501946001909201910161475d565b508482101561479a57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b85815260a060208201525f6147c160a0830187613e96565b6001600160a01b039586166040840152939094166060820152608001529392505050565b5f6147f08286614515565b600b60fa1b81526148046001820186614515565b9050600b60fa1b815261481a6001820185614515565b9695505050505050565b5f604082018483526040602084015280845180835260608501915060608160051b8601019250602086015f5b828110156148b657605f1987860301845281518051608087526148766080880182613e96565b6020838101516001600160a01b031689820152604080850151908a0152606093840151151593909801929092525094938401939190910190600101614850565b5092979650505050505050565b5f602082840312156148d3575f5ffd5b5051919050565b5f602082840312156148ea575f5ffd5b81516001600160401b038111156148ff575f5ffd5b8201601f8101841361490f575f5ffd5b805161491d61436782614302565b8082825260208201915060208360051b85010192508683111561493e575f5ffd5b6020840193505b8284101561481a578351825260209384019390910190614945565b634e487b7160e01b5f52602160045260245ffd5b6001600160401b038616815260a060208201525f61499560a0830187613e96565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b838152608060208201525f6149d46080830185613e96565b63ffffffff841660408401528281036060840152601a81527f5265717565737420616c72656164792070726f6365737365642e000000000000602082015260408101915050949350505050565b838152608060208201525f614a396080830185613e96565b63ffffffff841660408401528281036060840152602381527f436861696e6c696e6b2046756e6374696f6e732072657175657374206661696c60208201526232b21760e91b604082015260608101915050949350505050565b838152608060208201525f614aaa6080830185613e96565b63ffffffff841660408401528281036060840152603081527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060208201526f363c903337b9103a3930b739b332b91760811b604082015260608101915050949350505050565b85815260c060208201525f614b2860c0830187613e96565b6001600160a01b0395861660408481019190915294909516606083015250608081019190915280830360a090910152601b82527f4f66662d636861696e207075726368617365207665726966696564000000000060208301520192915050565b838152608060208201525f614ba06080830185613e96565b63ffffffff841660408401528281036060840152604b81527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060208201527f6c7920666f7220726566756e642e20436865636b2070726576696f757320747260408201526a30b739b0b1ba34b7b7399760a91b606082015260808101915050949350505050565b838152608060208201525f614c3f6080830185613e96565b63ffffffff841660408401528281036060840152604281527f4f66662d636861696e20707572636861736520766572696669636174696f6e2060208201527f6661696c65642e20546f6b656e732072657475726e656420746f2073656c6c65604082015261391760f11b606082015260808101915050949350505050565b84815260a060208201525f614cd560a0830186613e96565b6001600160a01b0394909416604083810191909152606083019390935250808303608090910152601882527f496e697469616c207061796d656e74207665726966696564000000000000000060208301520192915050565b838152608060208201525f614d456080830185613e96565b63ffffffff841660408401528281036060840152603881527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060208201527f6c7920666f7220696e697469616c207472616e736665722e0000000000000000604082015260608101915050949350505050565b838152608060208201525f614dd06080830185613e96565b63ffffffff841660408401528281036060840152602481527f496e697469616c207061796d656e7420766572696669636174696f6e206661696020820152633632b21760e11b604082015260608101915050949350505050565b8082018082111561077e5761077e614537565b8181038181111561077e5761077e614537565b5f81614e5e57614e5e614537565b505f190190565b5f82614e7f57634e487b7160e01b5f52601260045260245ffd5b500690565b5f613b9c838361458e56fe5759fa17f0d605fd6a905f331dc2ae12c328873085c3441c157e1796c1cd36d12dfcb2476bc2e81a958dd81dfa7a79706863a91222e955e4bb156eebac161fa5a2646970667358221220332ddda368828c4ffe9212f6afaf866f6b7b8068e512bcebe0903de590a483c664736f6c634300081d0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNCONTRACTTOKENS = "burnContractTokens";

    public static final String FUNC_BUYRECORD = "buyRecord";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DEPOSITWITHPERMIT = "depositWithPermit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FUNCTIONSSUBSCRIPTIONS = "functionsSubscriptions";

    public static final String FUNC_HANDLEORACLEFULFILLMENT = "handleOracleFulfillment";

    public static final String FUNC_INVESTMENTKEY = "investmentKey";

    public static final String FUNC_INVESTMENTRECORD = "investmentRecord";

    public static final String FUNC_MININVESTMENTAMOUNT = "minInvestmentAmount";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NONCES = "nonces";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PERMIT = "permit";

    public static final String FUNC_PROJECTID = "projectId";

    public static final String FUNC_REGISTERASCONSUMER = "registerAsConsumer";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REQUESTINVESTMENT = "requestInvestment";

    public static final String FUNC_REQUESTTRADE = "requestTrade";

    public static final String FUNC_SELLRECORD = "sellRecord";

    public static final String FUNC_SETLOCKUP = "setLockup";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALINVESTMENTAMOUNT = "totalInvestmentAmount";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TOTALTOKENAMOUNT = "totalTokenAmount";

    public static final String FUNC_TRADEKEY = "tradeKey";

    public static final String FUNC_TRADERECORD = "tradeRecord";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERTOKENSFROMCONTRACT = "transferTokensFromContract";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INVESTMENTFAILED_EVENT = new Event("InvestmentFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INVESTMENTREQUESTED_EVENT = new Event("InvestmentRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<investment>>() {}));
    ;

    public static final Event INVESTMENTSUCCESSFUL_EVENT = new Event("InvestmentSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTFULFILLED_EVENT = new Event("RequestFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event REQUESTSENT_EVENT = new Event("RequestSent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event TRADEFAILED_EVENT = new Event("TradeFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRADEREQUESTED_EVENT = new Event("TradeRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRADESUCCESSFUL_EVENT = new Event("TradeSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InvestmentFailedEventResponse> getInvestmentFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, transactionReceipt);
        ArrayList<InvestmentFailedEventResponse> responses = new ArrayList<InvestmentFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentFailedEventResponse getInvestmentFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, log);
        InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentFailedEventFromLog(log));
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTFAILED_EVENT));
        return investmentFailedEventFlowable(filter);
    }

    public static List<InvestmentRequestedEventResponse> getInvestmentRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, transactionReceipt);
        ArrayList<InvestmentRequestedEventResponse> responses = new ArrayList<InvestmentRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentList = (List<investment>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentRequestedEventResponse getInvestmentRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, log);
        InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentList = (List<investment>) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentRequestedEventFromLog(log));
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTREQUESTED_EVENT));
        return investmentRequestedEventFlowable(filter);
    }

    public static List<InvestmentSuccessfulEventResponse> getInvestmentSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<InvestmentSuccessfulEventResponse> responses = new ArrayList<InvestmentSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentSuccessfulEventResponse getInvestmentSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, log);
        InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentSuccessfulEventFromLog(log));
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTSUCCESSFUL_EVENT));
        return investmentSuccessfulEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<RequestFulfilledEventResponse> getRequestFulfilledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, transactionReceipt);
        ArrayList<RequestFulfilledEventResponse> responses = new ArrayList<RequestFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestFulfilledEventResponse getRequestFulfilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, log);
        RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestFulfilledEventFromLog(log));
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTFULFILLED_EVENT));
        return requestFulfilledEventFlowable(filter);
    }

    public static List<RequestSentEventResponse> getRequestSentEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, transactionReceipt);
        ArrayList<RequestSentEventResponse> responses = new ArrayList<RequestSentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestSentEventResponse typedResponse = new RequestSentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestSentEventResponse getRequestSentEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, log);
        RequestSentEventResponse typedResponse = new RequestSentEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestSentEventFromLog(log));
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSENT_EVENT));
        return requestSentEventFlowable(filter);
    }

    public static List<TradeFailedEventResponse> getTradeFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, transactionReceipt);
        ArrayList<TradeFailedEventResponse> responses = new ArrayList<TradeFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeFailedEventResponse getTradeFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, log);
        TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeFailedEventFromLog(log));
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEFAILED_EVENT));
        return tradeFailedEventFlowable(filter);
    }

    public static List<TradeRequestedEventResponse> getTradeRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, transactionReceipt);
        ArrayList<TradeRequestedEventResponse> responses = new ArrayList<TradeRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeRequestedEventResponse getTradeRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, log);
        TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeRequestedEventFromLog(log));
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEREQUESTED_EVENT));
        return tradeRequestedEventFlowable(filter);
    }

    public static List<TradeSuccessfulEventResponse> getTradeSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<TradeSuccessfulEventResponse> responses = new ArrayList<TradeSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeSuccessfulEventResponse getTradeSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, log);
        TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeSuccessfulEventFromLog(log));
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADESUCCESSFUL_EVENT));
        return tradeSuccessfulEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnContractTokens(BigInteger _amount) {
        final Function function = new Function(
                FUNC_BURNCONTRACTTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> buyRecord(String param0) {
        final Function function = new Function(FUNC_BUYRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> depositWithPermit(String _sellId, String _seller,
            BigInteger _sellAmount, BigInteger deadline, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_DEPOSITWITHPERMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_sellId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.generated.Uint256(_sellAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain(
            ) {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> functionsSubscriptions() {
        final Function function = new Function(FUNC_FUNCTIONSSUBSCRIPTIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOracleFulfillment(byte[] requestId,
            byte[] response, byte[] err) {
        final Function function = new Function(
                FUNC_HANDLEORACLEFULFILLMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId), 
                new org.web3j.abi.datatypes.DynamicBytes(response), 
                new org.web3j.abi.datatypes.DynamicBytes(err)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> investmentKey(byte[] param0, BigInteger param1) {
        final Function function = new Function(FUNC_INVESTMENTKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<String, String, BigInteger, Boolean>> investmentRecord(
            String param0) {
        final Function function = new Function(FUNC_INVESTMENTRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, BigInteger, Boolean>>(function,
                new Callable<Tuple4<String, String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> minInvestmentAmount() {
        final Function function = new Function(FUNC_MININVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> nonces(String owner) {
        final Function function = new Function(FUNC_NONCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> permit(String owner, String spender,
            BigInteger value, BigInteger deadline, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_PERMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> projectId() {
        final Function function = new Function(FUNC_PROJECTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> registerAsConsumer() {
        final Function function = new Function(
                FUNC_REGISTERASCONSUMER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestInvestment(List<investment> _investments) {
        final Function function = new Function(
                FUNC_REQUESTINVESTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<investment>(investment.class, _investments)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestTrade(String _tradeId, String _sellId,
            String _seller, BigInteger _sellAmount, String _buyId, String _buyer,
            BigInteger _buyAmount) {
        final Function function = new Function(
                FUNC_REQUESTTRADE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_tradeId), 
                new org.web3j.abi.datatypes.Utf8String(_sellId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.generated.Uint256(_sellAmount), 
                new org.web3j.abi.datatypes.Utf8String(_buyId), 
                new org.web3j.abi.datatypes.Address(160, _buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_buyAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, Boolean>> sellRecord(String param0) {
        final Function function = new Function(FUNC_SELLRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, Boolean>>(function,
                new Callable<Tuple3<String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setLockup(String _account,
            BigInteger _unlockTime) {
        final Function function = new Function(
                FUNC_SETLOCKUP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account), 
                new org.web3j.abi.datatypes.generated.Uint256(_unlockTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalInvestmentAmount() {
        final Function function = new Function(FUNC_TOTALINVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalTokenAmount() {
        final Function function = new Function(FUNC_TOTALTOKENAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tradeKey(byte[] param0) {
        final Function function = new Function(FUNC_TRADEKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<sell, buy, Boolean>> tradeRecord(String param0) {
        final Function function = new Function(FUNC_TRADERECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<sell>() {}, new TypeReference<buy>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<sell, buy, Boolean>>(function,
                new Callable<Tuple3<sell, buy, Boolean>>() {
                    @Override
                    public Tuple3<sell, buy, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<sell, buy, Boolean>(
                                (sell) results.get(0), 
                                (buy) results.get(1), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferTokensFromContract(String _to,
            BigInteger _amount) {
        final Function function = new Function(
                FUNC_TRANSFERTOKENSFROMCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _router, BigInteger _subscriptionId,
            byte[] _donId, String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _router, BigInteger _subscriptionId,
            byte[] _donId, String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class investment extends DynamicStruct {
        public String investId;

        public String investmentor;

        public BigInteger tokenAmount;

        public Boolean processState;

        public investment(String investId, String investmentor, BigInteger tokenAmount,
                Boolean processState) {
            super(new org.web3j.abi.datatypes.Utf8String(investId), 
                    new org.web3j.abi.datatypes.Address(160, investmentor), 
                    new org.web3j.abi.datatypes.generated.Uint256(tokenAmount), 
                    new org.web3j.abi.datatypes.Bool(processState));
            this.investId = investId;
            this.investmentor = investmentor;
            this.tokenAmount = tokenAmount;
            this.processState = processState;
        }

        public investment(Utf8String investId, Address investmentor, Uint256 tokenAmount,
                Bool processState) {
            super(investId, investmentor, tokenAmount, processState);
            this.investId = investId.getValue();
            this.investmentor = investmentor.getValue();
            this.tokenAmount = tokenAmount.getValue();
            this.processState = processState.getValue();
        }
    }

    public static class sell extends StaticStruct {
        public String seller;

        public BigInteger sellAmount;

        public Boolean depositState;

        public sell(String seller, BigInteger sellAmount, Boolean depositState) {
            super(new org.web3j.abi.datatypes.Address(160, seller), 
                    new org.web3j.abi.datatypes.generated.Uint256(sellAmount), 
                    new org.web3j.abi.datatypes.Bool(depositState));
            this.seller = seller;
            this.sellAmount = sellAmount;
            this.depositState = depositState;
        }

        public sell(Address seller, Uint256 sellAmount, Bool depositState) {
            super(seller, sellAmount, depositState);
            this.seller = seller.getValue();
            this.sellAmount = sellAmount.getValue();
            this.depositState = depositState.getValue();
        }
    }

    public static class buy extends StaticStruct {
        public String buyer;

        public BigInteger buyAmount;

        public buy(String buyer, BigInteger buyAmount) {
            super(new org.web3j.abi.datatypes.Address(160, buyer), 
                    new org.web3j.abi.datatypes.generated.Uint256(buyAmount));
            this.buyer = buyer;
            this.buyAmount = buyAmount;
        }

        public buy(Address buyer, Uint256 buyAmount) {
            super(buyer, buyAmount);
            this.buyer = buyer.getValue();
            this.buyAmount = buyAmount.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InvestmentFailedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] investmentIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String investmentId;

        public BigInteger status;

        public String reason;
    }

    public static class InvestmentRequestedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public List<investment> investmentList;
    }

    public static class InvestmentSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] investmentIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String investmentId;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RequestFulfilledEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class RequestSentEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class TradeFailedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public BigInteger status;

        public String reason;
    }

    public static class TradeRequestedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;
    }

    public static class TradeSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
