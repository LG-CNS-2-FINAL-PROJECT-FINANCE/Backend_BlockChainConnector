package com.ddiring.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.13.0.
 */
@SuppressWarnings("rawtypes")
public class FractionalInvestmentToken extends Contract {
    public static final String BINARY = "610200604052348015610010575f5ffd5b50604051615f9f380380615f9f83398101604081905261002f91610755565b84338a80604051806040016040528060018152602001603160f81b8152508d8d816003908161005e91906108dc565b50600461006b82826108dc565b5061007b9150839050600561036b565b6101205261008a81600661036b565b61014052815160208084019190912060e052815190820120610100524660a05261011660e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600160a01b03811661014e57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6101578161039d565b506001600160a01b0316610160525f86116101cd5760405162461bcd60e51b815260206004820152603060248201527f4d696e696d756d20696e766573746d656e7420616d6f756e74206d757374206260448201526f0652067726561746572207468616e20360841b6064820152608401610145565b858710156102435760405162461bcd60e51b815260206004820152603560248201527f546f74616c20676f616c206d757374206265206174206c65617374206d696e6960448201527f6d756d20696e766573746d656e7420616d6f756e7400000000000000000000006064820152608401610145565b61024d86886109aa565b156102cc5760405162461bcd60e51b815260206004820152604360248201527f546f74616c20676f616c206d75737420626520706572666563746c792064697660448201527f697369626c65206279206d696e696d756d20696e766573746d656e7420616d6f6064820152621d5b9d60ea1b608482015260a401610145565b6101808a90526101a08790526101c08690526102e886886109d1565b6101e052600980546001600160401b038616600160a01b026001600160e01b03199091166001600160a01b03881617179055600a839055600b61032b83826108dc565b50600c61033882826108dc565b5061035c306103496012600a610ac7565b6101e0516103579190610adc565b6103ee565b50505050505050505050610b5e565b5f6020835110156103865761037f83610426565b9050610397565b8161039184826108dc565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382166104175760405163ec442f0560e01b81525f6004820152602401610145565b6104225f8383610463565b5050565b5f5f829050601f81511115610450578260405163305a27a960e01b81526004016101459190610af3565b805161045b82610b28565b179392505050565b6001600160a01b03831615610551576001600160a01b0383165f908152601360205260409020544210156104e55760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b6064820152608401610145565b6104f8600854600160a01b900460ff1690565b156105515760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b6064820152608401610145565b61055c838383610561565b505050565b6001600160a01b03831661058b578060025f8282546105809190610b4b565b909155506105fb9050565b6001600160a01b0383165f90815260208190526040902054818110156105dd5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610145565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661061757600280548290039055610635565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161067a91815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126106aa575f5ffd5b81516001600160401b038111156106c3576106c3610687565b604051601f8201601f19908116603f011681016001600160401b03811182821017156106f1576106f1610687565b604052818152838201602001851015610708575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b80516001600160a01b038116811461073a575f5ffd5b919050565b80516001600160401b038116811461073a575f5ffd5b5f5f5f5f5f5f5f5f5f5f6101408b8d03121561076f575f5ffd5b8a5160208c0151909a506001600160401b0381111561078c575f5ffd5b6107988d828e0161069b565b60408d0151909a5090506001600160401b038111156107b5575f5ffd5b6107c18d828e0161069b565b60608d015160808e0151919a50985096506107e0905060a08c01610724565b94506107ee60c08c0161073f565b60e08c01516101008d015191955093506001600160401b03811115610811575f5ffd5b61081d8d828e0161069b565b6101208d015190935090506001600160401b0381111561083b575f5ffd5b6108478d828e0161069b565b9150509295989b9194979a5092959850565b600181811c9082168061086d57607f821691505b60208210810361088b57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561055c57805f5260205f20601f840160051c810160208510156108b65750805b601f840160051c820191505b818110156108d5575f81556001016108c2565b5050505050565b81516001600160401b038111156108f5576108f5610687565b610909816109038454610859565b84610891565b6020601f82116001811461093b575f83156109245750848201515b5f19600385901b1c1916600184901b1784556108d5565b5f84815260208120601f198516915b8281101561096a578785015182556020948501946001909201910161094a565b508482101561098757868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52601260045260245ffd5b5f826109b8576109b8610996565b500690565b634e487b7160e01b5f52601160045260245ffd5b5f826109df576109df610996565b500490565b6001815b6001841115610a1f57808504811115610a0357610a036109bd565b6001841615610a1157908102905b60019390931c9280026109e8565b935093915050565b5f82610a3557506001610397565b81610a4157505f610397565b8160018114610a575760028114610a6157610a7d565b6001915050610397565b60ff841115610a7257610a726109bd565b50506001821b610397565b5060208310610133831016604e8410600b8410161715610aa0575081810a610397565b610aac5f1984846109e4565b805f1904821115610abf57610abf6109bd565b029392505050565b5f610ad560ff841683610a27565b9392505050565b8082028115828204841417610397576103976109bd565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b8051602080830151919081101561088b575f1960209190910360031b1b16919050565b80820180821115610397576103976109bd565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051615301610c9e5f395f61023d01525f61035e01525f61053f01525f81816103370152818161142101528181611463015281816119e201528181611a2401528181612da901528181612dd801528181612e3501528181612e6401528181612f6501528181612f940152818161303601528181613078015281816130e20152818161311101528181613199015281816131c8015281816132500152818161327f015281816132cf015281816132fe0152818161341b0152818161345d015281816134b5015281816134e401528181613543015261357201525f81816107ad0152612acd01525f6127aa01525f61277d01525f6125b101525f61258901525f6124e401525f61250e01525f61253801526153015ff3fe608060405234801561000f575f5ffd5b5060043610610234575f3560e01c8063715018a611610135578063b1504a88116100b4578063d505accf11610079578063d505accf14610680578063dcd9cb6f14610693578063dd62ed3e146106a6578063e08f5638146106de578063f2fde38b146106e6575f5ffd5b8063b1504a881461053a578063b38374b714610561578063bf4cf61314610584578063cb021d5114610597578063d0973af81461066d575f5ffd5b80638da5cb5b116100fa5780638da5cb5b146104d457806395d89b41146104f95780639d212a1814610501578063a4108ecb14610514578063a9059cbb14610527575f5ffd5b8063715018a6146104835780637ecebe001461048b5780637f17cef71461049e5780638456cb59146104b157806384b0196e146104b9575f5ffd5b80633666cec5116101c15780635ba6947f116101865780635ba6947f146103805780635c8ecf53146103ee5780635c975abb1461044b5780635d0371461461045d57806370a0823114610470575f5ffd5b80633666cec5146103045780633e579307146103175780633f4ba83a1461032a5780633fafa127146103325780634d298a0714610359575f5ffd5b806318160ddd1161020757806318160ddd146102bf57806323b872dd146102c75780632d873e15146102da578063313ce567146102ed5780633644e515146102fc575f5ffd5b80630337b3aa1461023857806306fdde0314610272578063095ea7b3146102875780630ca76175146102aa575b5f5ffd5b61025f7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61027a6106f9565b60405161026991906142c0565b61029a6102953660046142ed565b610789565b6040519015158152602001610269565b6102bd6102b83660046143f2565b6107a2565b005b60025461025f565b61029a6102d536600461445d565b610825565b61027a6102e8366004614497565b610848565b60405160128152602001610269565b61025f6108f9565b6102bd6103123660046144c7565b610907565b6102bd6103253660046142ed565b610b9f565b6102bd610c1c565b61025f7f000000000000000000000000000000000000000000000000000000000000000081565b61025f7f000000000000000000000000000000000000000000000000000000000000000081565b6103c761038e366004614546565b8051602081830181018051600f825292820191909301209152805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b0390941684526020840192909252151590820152606001610269565b61042c6103fc366004614546565b8051602081830181018051601082529282019190930120915280546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610269565b600854600160a01b900460ff1661029a565b6102bd61046b366004614577565b610c2e565b61025f61047e36600461458e565b610c43565b6102bd610c5d565b61025f61049936600461458e565b610c6e565b61027a6104ac366004614577565b610c8b565b6102bd610ca3565b6104c1610cb3565b60405161026997969594939291906145a7565b6008546001600160a01b03165b6040516001600160a01b039091168152602001610269565b61027a610cf5565b6102bd61050f36600461463d565b610d04565b6102bd610522366004614720565b6114ab565b61029a6105353660046142ed565b611a61565b61025f7f000000000000000000000000000000000000000000000000000000000000000081565b61057461056f366004614546565b611a6e565b6040516102699493929190614842565b6102bd6105923660046144c7565b611b36565b6106206105a5366004614546565b80516020818301810180516011825292820193820193909320919092526040805160608101825282546001600160a01b039081168252600184015482860152600284015460ff908116151583850152835180850190945260038501549091168352600484015494830194909452600590920154919290911683565b6040805184516001600160a01b03908116825260208087015181840152958301511515928201929092528351909116606082015292909101516080830152151560a082015260c001610269565b6102bd61067b3660046142ed565b611f14565b6102bd61068e36600461487b565b611f83565b6009546104e1906001600160a01b031681565b61025f6106b43660046148a8565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6102bd6120b9565b6102bd6106f436600461458e565b612130565b606060038054610708906148d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610734906148d9565b801561077f5780601f106107565761010080835404028352916020019161077f565b820191905f5260205f20905b81548152906001019060200180831161076257829003601f168201915b5050505050905090565b5f3361079681858561216a565b60019150505b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107eb5760405163c6829f8360e01b815260040160405180910390fd5b6107f683838361217c565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6905f90a2505050565b5f33610832858285612405565b61083d85858561247b565b506001949350505050565b600e602052815f5260405f208181548110610861575f80fd5b905f5260205f20015f9150915050805461087a906148d9565b80601f01602080910402602001604051908101604052809291908181526020018280546108a6906148d9565b80156108f15780601f106108c8576101008083540402835291602001916108f1565b820191905f5260205f20905b8154815290600101906020018083116108d457829003601f168201915b505050505081565b5f6109026124d8565b905090565b61090f612601565b61091761262e565b600f876040516109279190614928565b9081526040519081900360200190206002015460ff16156109ab5760405162461bcd60e51b815260206004820152603360248201527f5472616465204465706f736974207265717565737420616c726561647920707260448201527237b1b2b9b9b2b21037b9103832b73234b7339760691b60648201526084015b60405180910390fd5b6001600160a01b0386166109fd5760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b9b2b99031b0b73737ba103132903d32b9379760391b60448201526064016109a2565b5f8511610a5f5760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e7320746f207472616e73666572206d75737420626520677265617460448201526932b9103a3430b710181760b11b60648201526084016109a2565b5f610a6c6012600a614a2a565b610a769087614a38565b905080610a8288610c43565b1015610ae05760405162461bcd60e51b815260206004820152602760248201527f53656c6c6572277320746f6b656e2062616c616e636520697320696e7375666660448201526634b1b4b2b73a1760c91b60648201526084016109a2565b610aef87308388888888611f83565b610afa87308361247b565b86600f89604051610b0b9190614928565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091558690600f90610b4b908b90614928565b9081526020016040518091039020600101819055506001600f89604051610b729190614928565b908152604051908190036020019020600201805491151560ff199092169190911790555050505050505050565b610ba7612601565b428111610c015760405162461bcd60e51b815260206004820152602260248201527f556e6c6f636b2074696d65206d75737420626520696e20746865206675747572604482015261329760f11b60648201526084016109a2565b6001600160a01b039091165f90815260136020526040902055565b610c24612601565b610c2c612659565b565b610c36612601565b610c4030826126ae565b50565b6001600160a01b03165f9081526020819052604090205490565b610c65612601565b610c2c5f6126e2565b6001600160a01b0381165f9081526007602052604081205461079c565b60126020525f90815260409020805461087a906148d9565b610cab612601565b610c2c612733565b5f6060805f5f5f6060610cc4612776565b610ccc6127a3565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b606060048054610708906148d9565b610d0c612601565b610d1461262e565b601187604051610d249190614928565b9081526040519081900360200190206005015460ff1615610d9b5760405162461bcd60e51b815260206004820152602b60248201527f5472616465207265717565737420616c72656164792070726f6365737365642060448201526a37b9103832b73234b7339760a91b60648201526084016109a2565b600f86604051610dab9190614928565b9081526040519081900360200190206002015460ff16610e285760405162461bcd60e51b815260206004820152603260248201527f5472616465204465706f7369742072657175657374206973206e6f742070726f60448201527131b2b9b9b2b21037b9103832b73234b7339760711b60648201526084016109a2565b6001600160a01b03821615801590610e4857506001600160a01b03851615155b610e905760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b9b2b99031b0b73737ba103132903d32b9379760391b60448201526064016109a2565b5f84118015610e9e57505f81115b610eba5760405162461bcd60e51b81526004016109a290614a4f565b838114610f1c5760405162461bcd60e51b815260206004820152602a60248201527f42757920616e642053656c6c20616d6f756e7473206d757374206d61746368206044820152693337b9103a3930b2329760b11b60648201526084016109a2565b600f86604051610f2c9190614928565b908152604051908190036020019020546001600160a01b03868116911614610fa85760405162461bcd60e51b815260206004820152602960248201527f53656c6c657220646f6573206e6f74206d61746368207472616e73616374696f6044820152686e20686973746f727960b81b60648201526084016109a2565b600f86604051610fb89190614928565b908152602001604051809103902060010154841461102f5760405162461bcd60e51b815260206004820152602e60248201527f53656c6c20616d6f756e7420646f6573206e6f74206d61746368207472616e7360448201526d616374696f6e20686973746f727960901b60648201526084016109a2565b5f600c805461103d906148d9565b9050116110835760405162461bcd60e51b815260206004820152601460248201527329b7bab931b29031b7b232903737ba1039b2ba1760611b60448201526064016109a2565b61108f6012600a614a2a565b6110999085614a38565b6110a230610c43565b1015611118576040805162461bcd60e51b81526020600482015260248101919091527f436f6e747261637420686f6c64696e6720616d6f756e7420697320696e73756660448201527f66696369656e74207468616e20547261646520546f6b656e20416d6f756e742e60648201526084016109a2565b816010846040516111299190614928565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091558190601090611169908690614928565b908152602001604051809103902060010181905550600f8660405161118e9190614928565b90815260200160405180910390206011886040516111ac9190614928565b908152604051908190036020018120825481546001600160a01b0319166001600160a01b03909116178155600180840154908201556002928301549201805460ff909316151560ff199093169290921790915560109061120d908590614928565b908152602001604051809103902060118860405161122b9190614928565b90815260405190819003602001812082546003820180546001600160a01b0319166001600160a01b039092169190911790556001909201546004909201919091555f9060119061127c908a90614928565b9081526040805160209281900383018120600501805460ff19169415159490941790935560e0830181525f80845291830182905282015260608082018190526080820181905260a0820181905260c0820152611369600c80546112de906148d9565b80601f016020809104026020016040519081016040528092919081815260200182805461130a906148d9565b80156113555780601f1061132c57610100808354040283529160200191611355565b820191905f5260205f20905b81548152906001019060200180831161133857829003601f168201915b5050505050826127d090919063ffffffff16565b6040805160018082528183019092525f91816020015b606081526020019060019003908161137f57905050905088815f815181106113a9576113a9614a93565b60209081029190910101526113be82826127dc565b5f6113ed6113cb84612805565b600960149054906101000a90046001600160401b0316620493e0600a54612ac9565b5f8181526012602052604090209091506114078b82614aeb565b50808a6040516114179190614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007f589bd8c058cd521b9d0ee152b14a61da92077f0114e35b76ac9d9176b0ad7e547f00000000000000000000000000000000000000000000000000000000000000008e8d8b8e604051611497959493929190614ba5565b60405180910390a450505050505050505050565b6114b3612601565b6114bb61262e565b5f81516001600160401b038111156114d5576114d5614315565b60405190808252806020026020018201604052801561150857816020015b60608152602001906001900390816114f35790505b5090505f82516001600160401b0381111561152557611525614315565b60405190808252806020026020018201604052801561155857816020015b60608152602001906001900390816115435790505b5090505f5b835181101561177e57600d84828151811061157a5761157a614a93565b60200260200101515f01516040516115929190614928565b9081526040519081900360200190206003015460ff161561160b5760405162461bcd60e51b815260206004820152602d60248201527f496e697469616c207265717565737420616c72656164792070726f636573736560448201526c321037b9103832b73234b7339760991b60648201526084016109a2565b5f6001600160a01b031684828151811061162757611627614a93565b6020026020010151602001516001600160a01b0316036116895760405162461bcd60e51b815260206004820152601d60248201527f427579657220616464726573732063616e6e6f74206265207a65726f2e00000060448201526064016109a2565b5f84828151811061169c5761169c614a93565b602002602001015160400151116116c55760405162461bcd60e51b81526004016109a290614a4f565b6116d16012600a614a2a565b8482815181106116e3576116e3614a93565b6020026020010151604001516116f99190614a38565b61170230610c43565b10156117765760405162461bcd60e51b815260206004820152603760248201527f4e6f7420656e6f75676820746f6b656e7320696e20636f6e747261637420666f60448201527f72207468697320696e697469616c20726571756573742e00000000000000000060648201526084016109a2565b60010161155d565b505f5b83518110156119555783818151811061179c5761179c614a93565b602002602001015160200151600d8583815181106117bc576117bc614a93565b60200260200101515f01516040516117d49190614928565b90815260200160405180910390206001015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555083818151811061181a5761181a614a93565b602002602001015160400151600d85838151811061183a5761183a614a93565b60200260200101515f01516040516118529190614928565b9081526020016040518091039020600201819055505f84828151811061187a5761187a614a93565b60200260200101515f01516118ab86848151811061189a5761189a614a93565b602002602001015160200151612b96565b6118d18785815181106118c0576118c0614a93565b602002602001015160400151612bac565b6040516020016118e393929190614be1565b60405160208183030381529060405290508084838151811061190757611907614a93565b602002602001018190525084828151811061192457611924614a93565b60200260200101515f015183838151811061194157611941614a93565b602090810291909101015250600101611781565b506119946040805160e08101909152805f81526020015f81526020015f8152602001606081526020016060815260200160608152602001606081525090565b6119a4600b80546112de906148d9565b6119ae81846127dc565b5f6119bb6113cb83612805565b5f818152600e6020908152604090912085519293506119de9290918601906141a9565b50807f00000000000000000000000000000000000000000000000000000000000000007f88dd8d46f665018a2a09127133b628777e643d4988d6a99ddae27c46a4770b107f000000000000000000000000000000000000000000000000000000000000000088604051611a52929190614c20565b60405180910390a35050505050565b5f3361079681858561247b565b8051602081830181018051600d82529282019190930120915280548190611a94906148d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611ac0906148d9565b8015611b0b5780601f10611ae257610100808354040283529160200191611b0b565b820191905f5260205f20905b815481529060010190602001808311611aee57829003601f168201915b505050506001830154600284015460039094015492936001600160a01b039091169290915060ff1684565b611b3e612601565b611b4661262e565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018590525f90605c0160408051601f1981840301815282825280516020918201205f80855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611be3573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b038116611c3b5760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21039b4b3b730ba3ab9329760711b60448201526064016109a2565b876001600160a01b0316816001600160a01b031614611caf5760405162461bcd60e51b815260206004820152602a60248201527f5369676e6572206973206e6f74207468652070726f76696465642073656c6c65604482015269391030b2323932b9b99760b11b60648201526084016109a2565b600f89604051611cbf9190614928565b9081526040519081900360200190206002015460ff16611d215760405162461bcd60e51b815260206004820152601e60248201527f4e6f20616374697665206465706f73697420666f7220746869732049442e000060448201526064016109a2565b876001600160a01b0316600f8a604051611d3b9190614928565b908152604051908190036020019020546001600160a01b031614611db15760405162461bcd60e51b815260206004820152602760248201527f53656c6c6572206973206e6f74206d61746368656420666f722074686973206460448201526632b837b9b4ba1760c91b60648201526084016109a2565b86600f8a604051611dc29190614928565b90815260200160405180910390206001015414611e365760405162461bcd60e51b815260206004820152602c60248201527f53656c6c20416d6f756e74206973206e6f74206d61746368656420666f72207460448201526b3434b9903232b837b9b4ba1760a11b60648201526084016109a2565b5f611e436012600a614a2a565b611e4d9089614a38565b905080611e5930610c43565b1015611ebf5760405162461bcd60e51b815260206004820152602f60248201527f536d61727420436f6e7472616374277320746f6b656e2062616c616e6365206960448201526e399034b739bab33334b1b4b2b73a1760891b60648201526084016109a2565b611eca308a8361247b565b600f8a604051611eda9190614928565b90815260405190819003602001902080546001600160a01b03191681555f6001820155600201805460ff1916905550505050505050505050565b611f1c612601565b80611f2630610c43565b1015611f745760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e747261637420746f6b656e732e00000060448201526064016109a2565b611f7f30838361247b565b5050565b83421115611fa75760405163313c898160e11b8152600481018590526024016109a2565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888611ff28c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f61204c82612c3b565b90505f61205b82878787612c67565b9050896001600160a01b0316816001600160a01b0316146120a2576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016109a2565b6120ad8a8a8a61216a565b50505050505050505050565b6120c1612601565b600954604051631cd0704360e21b8152600160a01b82046001600160401b031660048201523060248201526001600160a01b0390911690637341c10c906044015f604051808303815f87803b158015612118575f5ffd5b505af115801561212a573d5f5f3e3d5ffd5b50505050565b612138612601565b6001600160a01b03811661216157604051631e4fbdf760e01b81525f60048201526024016109a2565b610c40816126e2565b6121778383836001612c93565b505050565b5f838152600e6020908152604080832080548251818502810185019093528083529192909190849084015b8282101561224f578382905f5260205f200180546121c4906148d9565b80601f01602080910402602001604051908101604052809291908181526020018280546121f0906148d9565b801561223b5780601f106122125761010080835404028352916020019161223b565b820191905f5260205f20905b81548152906001019060200180831161221e57829003601f168201915b5050505050815260200190600101906121a7565b5050505090505f60125f8681526020019081526020015f208054612272906148d9565b80601f016020809104026020016040519081016040528092919081815260200182805461229e906148d9565b80156122e95780601f106122c0576101008083540402835291602001916122e9565b820191905f5260205f20905b8154815290600101906020018083116122cc57829003601f168201915b505050505090505f81511115612322575f8480602001905181019061230e9190614cbf565b905061231c86838387612d65565b506123fe565b8151156123b65783516060901561234a57848060200190518101906123479190614cd6565b90505b5f5b83518110156123af575f81835111612364575f61237f565b82828151811061237657612376614a93565b60200260200101515b90506123a68886848151811061239757612397614a93565b6020026020010151838961320c565b5060010161234c565b50506123fe565b60405162461bcd60e51b815260206004820152601c60248201527f556e6b6e6f776e20436861696e6c696e6b20726571756573742049440000000060448201526064016109a2565b5050505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f1981101561212a578181101561246d57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016109a2565b61212a84848484035f612c93565b6001600160a01b0383166124a457604051634b637e8f60e11b81525f60048201526024016109a2565b6001600160a01b0382166124cd5760405163ec442f0560e01b81525f60048201526024016109a2565b6121778383836135b4565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561253057507f000000000000000000000000000000000000000000000000000000000000000046145b1561255a57507f000000000000000000000000000000000000000000000000000000000000000090565b610902604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b6008546001600160a01b03163314610c2c5760405163118cdaa760e01b81523360048201526024016109a2565b600854600160a01b900460ff1615610c2c5760405163d93c066560e01b815260040160405180910390fd5b6126616136a7565b6008805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166126d757604051634b637e8f60e11b81525f60048201526024016109a2565b611f7f825f836135b4565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b61273b61262e565b6008805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126913390565b60606109027f000000000000000000000000000000000000000000000000000000000000000060056136d1565b60606109027f000000000000000000000000000000000000000000000000000000000000000060066136d1565b611f7f825f5f8461377a565b80515f036127fd5760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60605f6128136101006137f7565b905061284c6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b8152508261381790919063ffffffff16565b825161286a90600281111561286357612863614d5c565b8290613830565b6040805180820190915260088152676c616e677561676560c01b6020820152612894908290613817565b60408301516128ab90801561286357612863614d5c565b604080518082019091526006815265736f7572636560d01b60208201526128d3908290613817565b60608301516128e3908290613817565b60a0830151511561296e576040805180820190915260048152636172677360e01b6020820152612914908290613817565b61291d81613869565b5f5b8360a00151518110156129645761295c8460a00151828151811061294557612945614a93565b60200260200101518361381790919063ffffffff16565b60010161291f565b5061296e8161388d565b60808301515115612a31575f8360200151600281111561299057612990614d5c565b036129ae5760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b60208201526129df908290613817565b6129f88360200151600281111561286357612863614d5c565b6040805180820190915260078152667365637265747360c81b6020820152612a21908290613817565b6080830151612a319082906138ab565b60c08301515115612ac15760408051808201909152600981526862797465734172677360b81b6020820152612a67908290613817565b612a7081613869565b5f5b8360c0015151811015612ab757612aaf8460c001518281518110612a9857612a98614a93565b6020026020010151836138ab90919063ffffffff16565b600101612a72565b50612ac18161388d565b515192915050565b5f5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401612b20959493929190614d70565b6020604051808303815f875af1158015612b3c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b609190614cbf565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8905f90a295945050505050565b606061079c6001600160a01b03831660146138b8565b60605f612bb883613a31565b60010190505f816001600160401b03811115612bd657612bd6614315565b6040519080825280601f01601f191660200182016040528015612c00576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612c0a57509392505050565b5f61079c612c476124d8565b8360405161190160f01b8152600281019290925260228201526042902090565b5f5f5f5f612c7788888888613b08565b925092509250612c878282613bd0565b50909695505050505050565b6001600160a01b038416612cbc5760405163e602df0560e01b81525f60048201526024016109a2565b6001600160a01b038316612ce557604051634a1406b160e11b81525f60048201526024016109a2565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561212a57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051612d5791815260200190565b60405180910390a350505050565b601183604051612d759190614928565b9081526040519081900360200190206005015460ff1615612e15578383604051612d9f9190614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206152ac5f395f51905f527f0000000000000000000000000000000000000000000000000000000000000000875f604051612e0893929190614db8565b60405180910390a461212a565b805115612e95578383604051612e2b9190614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206152ac5f395f51905f527f0000000000000000000000000000000000000000000000000000000000000000876001604051612e0893929190614e1d565b5f601184604051612ea69190614928565b908152604051908190036020018120546001600160a01b031691505f90601190612ed1908790614928565b908152604051908190036020018120600301546001600160a01b031691505f90601190612eff908890614928565b9081526040519081900360200190206001015490505f612f1d601290565b612f2890600a614a2a565b612f329083614a38565b9050856001036130b95780612f4630610c43565b1015612fde578787604051612f5b9190614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206152ac5f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008b6002604051612fc593929190614e8e565b60405180910390a4612fd5610ca3565b5050505061212a565b612fe930848361247b565b6001601188604051612ffb9190614928565b908152604051908190036020018120600501805492151560ff1990931692909217909155889061302c908990614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007fe4daf0cc7a61dd6ad790d55a15d78530cae3c88af6fd51fa88885a1c75911bea7f00000000000000000000000000000000000000000000000000000000000000008b8989896040516130ac959493929190614f0c565b60405180910390a4613202565b806130c330610c43565b10156131425787876040516130d89190614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206152ac5f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008b6002604051612fc593929190614f84565b61314d30858361247b565b5f60118860405161315e9190614928565b908152604051908190036020018120600201805492151560ff1990931692909217909155889061318f908990614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206152ac5f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008b60036040516131f993929190615023565b60405180910390a45b5050505050505050565b600d8360405161321c9190614928565b9081526040519081900360200190206003015460ff16156132af5783836040516132469190614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f51602061528c5f395f51905f527f0000000000000000000000000000000000000000000000000000000000000000875f604051612e0893929190614db8565b80511561332f5783836040516132c59190614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f51602061528c5f395f51905f527f0000000000000000000000000000000000000000000000000000000000000000876001604051612e0893929190614e1d565b5f600d846040516133409190614928565b908152604051908190036020018120600101546001600160a01b031691505f90600d9061336e908790614928565b90815260200160405180910390206002015490508360010361352a576133966012600a614a2a565b6133a09082614a38565b6133a930610c43565b1061349c576133ce30836133bf6012600a614a2a565b6133c99085614a38565b61247b565b6001600d866040516133e09190614928565b908152604051908190036020018120600301805492151560ff19909316929092179091558690613411908790614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007f67a14b8953fe4619174debb9fe0581a67af9a1f4703b50e5e70fc32774dc3e147f000000000000000000000000000000000000000000000000000000000000000089878760405161348f94939291906150b9565b60405180910390a46135ac565b85856040516134ab9190614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f51602061528c5f395f51905f527f000000000000000000000000000000000000000000000000000000000000000089600260405161351593929190615129565b60405180910390a4613525610ca3565b6135ac565b85856040516135399190614928565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f51602061528c5f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008960036040516135a3939291906151b4565b60405180910390a45b505050505050565b6001600160a01b0383161561369c576001600160a01b0383165f908152601360205260409020544210156136365760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b60648201526084016109a2565b600854600160a01b900460ff161561369c5760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b60648201526084016109a2565b612177838383613c88565b600854600160a01b900460ff16610c2c57604051638dfc202b60e01b815260040160405180910390fd5b606060ff83146136eb576136e483613dae565b905061079c565b8180546136f7906148d9565b80601f0160208091040260200160405190810160405280929190818152602001828054613723906148d9565b801561376e5780601f106137455761010080835404028352916020019161376e565b820191905f5260205f20905b81548152906001019060200180831161375157829003601f168201915b5050505050905061079c565b80515f0361379b576040516322ce3edd60e01b815260040160405180910390fd5b838360028111156137ae576137ae614d5c565b908160028111156137c1576137c1614d5c565b905250604084018280156137d7576137d7614d5c565b908180156137e7576137e7614d5c565b9052506060909301929092525050565b6137ff6141fd565b805161380b9083613deb565b505f6020820152919050565b6138248260038351613e5f565b81516121779082613f78565b815161383d9060c2613f9f565b50611f7f828260405160200161385591815260200190565b6040516020818303038152906040526138ab565b613874816004614006565b6001816020018181516138879190615226565b90525050565b613898816007614006565b6001816020018181516138879190615239565b6138248260028351613e5f565b6060825f6138c7846002614a38565b6138d2906002615226565b6001600160401b038111156138e9576138e9614315565b6040519080825280601f01601f191660200182016040528015613913576020820181803683370190505b509050600360fc1b815f8151811061392d5761392d614a93565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811061395b5761395b614a93565b60200101906001600160f81b03191690815f1a9053505f61397d856002614a38565b613988906001615226565b90505b60018111156139ff576f181899199a1a9b1b9c1cb0b131b232b360811b83600f16601081106139bc576139bc614a93565b1a60f81b8282815181106139d2576139d2614a93565b60200101906001600160f81b03191690815f1a90535060049290921c916139f88161524c565b905061398b565b508115613a295760405163e22e27eb60e01b815260048101869052602481018590526044016109a2565b949350505050565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310613a6f5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613a9b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310613ab957662386f26fc10000830492506010015b6305f5e1008310613ad1576305f5e100830492506008015b6127108310613ae557612710830492506004015b60648310613af7576064830492506002015b600a831061079c5760010192915050565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115613b4157505f91506003905082613bc6565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015613b92573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b038116613bbd57505f925060019150829050613bc6565b92505f91508190505b9450945094915050565b5f826003811115613be357613be3614d5c565b03613bec575050565b6001826003811115613c0057613c00614d5c565b03613c1e5760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115613c3257613c32614d5c565b03613c535760405163fce698f760e01b8152600481018290526024016109a2565b6003826003811115613c6757613c67614d5c565b03611f7f576040516335e2f38360e21b8152600481018290526024016109a2565b6001600160a01b038316613cb2578060025f828254613ca79190615226565b90915550613d229050565b6001600160a01b0383165f9081526020819052604090205481811015613d045760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016109a2565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216613d3e57600280548290039055613d5c565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613da191815260200190565b60405180910390a3505050565b60605f613dba8361401d565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b60408051808201909152606081525f6020820152613e0a602083615261565b15613e3257613e1a602083615261565b613e25906020615239565b613e2f9083615226565b91505b60208084018390526040518085525f8152908184010181811015613e54575f5ffd5b604052509192915050565b6017816001600160401b031611613e8557825161212a9060e0600585901b168317613f9f565b60ff816001600160401b031611613ec5578251613ead906018611fe0600586901b1617613f9f565b50825161212a906001600160401b0383166001614044565b61ffff816001600160401b031611613f06578251613eee906019611fe0600586901b1617613f9f565b50825161212a906001600160401b0383166002614044565b63ffffffff816001600160401b031611613f49578251613f3190601a611fe0600586901b1617613f9f565b50825161212a906001600160401b0383166004614044565b8251613f6090601b611fe0600586901b1617613f9f565b50825161212a906001600160401b0383166008614044565b60408051808201909152606081525f6020820152613f98838384516140c6565b9392505050565b60408051808201909152606081525f60208201528251515f613fc2826001615226565b905084602001518210613fe357613fe385613fde836002614a38565b614192565b8451602083820101858153508051821115613ffc578181525b5093949350505050565b815161217790601f611fe0600585901b1617613f9f565b5f60ff8216601f81111561079c57604051632cd44ac360e21b815260040160405180910390fd5b60408051808201909152606081525f60208201528351515f6140668285615226565b905085602001518111156140835761408386613fde836002614a38565b5f600161409286610100615280565b61409c9190615239565b905086518281018783198251161781525080518311156140ba578281525b50959695505050505050565b60408051808201909152606081525f602082015282518211156140e7575f5ffd5b8351515f6140f58483615226565b905085602001518111156141125761411286613fde836002614a38565b85518051838201602001915f918085111561412b578482525b505050602086015b6020861061416b578051825261414a602083615226565b9150614157602082615226565b9050614164602087615239565b9550614133565b5181515f1960208890036101000a0190811690199190911617905250849150509392505050565b815161419e8383613deb565b5061212a8382613f78565b828054828255905f5260205f209081019282156141ed579160200282015b828111156141ed57825182906141dd9082614aeb565b50916020019190600101906141c7565b506141f9929150614230565b5090565b60405180604001604052806142246040518060400160405280606081526020015f81525090565b81526020015f81525090565b808211156141f9575f614243828261424c565b50600101614230565b508054614258906148d9565b5f825580601f10614267575050565b601f0160209004905f5260205f2090810190610c4091905b808211156141f9575f815560010161427f565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f613f986020830184614292565b80356001600160a01b03811681146142e8575f5ffd5b919050565b5f5f604083850312156142fe575f5ffd5b614307836142d2565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b038111828210171561434b5761434b614315565b60405290565b604051601f8201601f191681016001600160401b038111828210171561437957614379614315565b604052919050565b5f82601f830112614390575f5ffd5b8135602083015f5f6001600160401b038411156143af576143af614315565b50601f8301601f19166020016143c481614351565b9150508281528583830111156143d8575f5ffd5b828260208301375f92810160200192909252509392505050565b5f5f5f60608486031215614404575f5ffd5b8335925060208401356001600160401b03811115614420575f5ffd5b61442c86828701614381565b92505060408401356001600160401b03811115614447575f5ffd5b61445386828701614381565b9150509250925092565b5f5f5f6060848603121561446f575f5ffd5b614478846142d2565b9250614486602085016142d2565b929592945050506040919091013590565b5f5f604083850312156144a8575f5ffd5b50508035926020909101359150565b803560ff811681146142e8575f5ffd5b5f5f5f5f5f5f5f60e0888a0312156144dd575f5ffd5b87356001600160401b038111156144f2575f5ffd5b6144fe8a828b01614381565b97505061450d602089016142d2565b95506040880135945060608801359350614529608089016144b7565b9699959850939692959460a0840135945060c09093013592915050565b5f60208284031215614556575f5ffd5b81356001600160401b0381111561456b575f5ffd5b613a2984828501614381565b5f60208284031215614587575f5ffd5b5035919050565b5f6020828403121561459e575f5ffd5b613f98826142d2565b60ff60f81b8816815260e060208201525f6145c560e0830189614292565b82810360408401526145d78189614292565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b8181101561462c57835183526020938401939092019160010161460e565b50909b9a5050505050505050505050565b5f5f5f5f5f5f5f60e0888a031215614653575f5ffd5b87356001600160401b03811115614668575f5ffd5b6146748a828b01614381565b97505060208801356001600160401b0381111561468f575f5ffd5b61469b8a828b01614381565b9650506146aa604089016142d2565b94506060880135935060808801356001600160401b038111156146cb575f5ffd5b6146d78a828b01614381565b9350506146e660a089016142d2565b96999598509396929591949193505060c09091013590565b5f6001600160401b0382111561471657614716614315565b5060051b60200190565b5f60208284031215614730575f5ffd5b81356001600160401b03811115614745575f5ffd5b8201601f81018413614755575f5ffd5b8035614768614763826146fe565b614351565b8082825260208201915060208360051b850101925086831115614789575f5ffd5b602084015b838110156148375780356001600160401b038111156147ab575f5ffd5b85016080818a03601f190112156147c0575f5ffd5b6147c8614329565b60208201356001600160401b038111156147e0575f5ffd5b6147ef8b602083860101614381565b8252506147fe604083016142d2565b602082015260608201356040820152608090910135908115158214614821575f5ffd5b606081019190915283526020928301920161478e565b509695505050505050565b608081525f6148546080830187614292565b6001600160a01b039590951660208301525060408101929092521515606090910152919050565b5f5f5f5f5f5f5f60e0888a031215614891575f5ffd5b61489a886142d2565b965061450d602089016142d2565b5f5f604083850312156148b9575f5ffd5b6148c2836142d2565b91506148d0602084016142d2565b90509250929050565b600181811c908216806148ed57607f821691505b60208210810361490b57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f81518060208401855e5f93019283525090919050565b5f613f988284614911565b634e487b7160e01b5f52601160045260245ffd5b6001815b60018411156149825780850481111561496657614966614933565b600184161561497457908102905b60019390931c92800261494b565b935093915050565b5f826149985750600161079c565b816149a457505f61079c565b81600181146149ba57600281146149c4576149e0565b600191505061079c565b60ff8411156149d5576149d5614933565b50506001821b61079c565b5060208310610133831016604e8410600b8410161715614a03575081810a61079c565b614a0f5f198484614947565b805f1904821115614a2257614a22614933565b029392505050565b5f613f9860ff84168361498a565b808202811582820484141761079c5761079c614933565b60208082526024908201527f546f6b656e20616d6f756e74206d7573742062652067726561746572207468616040820152633710181760e11b606082015260800190565b634e487b7160e01b5f52603260045260245ffd5b601f82111561217757805f5260205f20601f840160051c81016020851015614acc5750805b601f840160051c820191505b818110156123fe575f8155600101614ad8565b81516001600160401b03811115614b0457614b04614315565b614b1881614b1284546148d9565b84614aa7565b6020601f821160018114614b4a575f8315614b335750848201515b5f19600385901b1c1916600184901b1784556123fe565b5f84815260208120601f198516915b82811015614b795787850151825560209485019460019092019101614b59565b5084821015614b9657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b85815260a060208201525f614bbd60a0830187614292565b6001600160a01b039586166040840152939094166060820152608001529392505050565b5f614bec8286614911565b600b60fa1b8152614c006001820186614911565b9050600b60fa1b8152614c166001820185614911565b9695505050505050565b5f604082018483526040602084015280845180835260608501915060608160051b8601019250602086015f5b82811015614cb257605f198786030184528151805160808752614c726080880182614292565b6020838101516001600160a01b031689820152604080850151908a0152606093840151151593909801929092525094938401939190910190600101614c4c565b5092979650505050505050565b5f60208284031215614ccf575f5ffd5b5051919050565b5f60208284031215614ce6575f5ffd5b81516001600160401b03811115614cfb575f5ffd5b8201601f81018413614d0b575f5ffd5b8051614d19614763826146fe565b8082825260208201915060208360051b850101925086831115614d3a575f5ffd5b6020840193505b82841015614c16578351825260209384019390910190614d41565b634e487b7160e01b5f52602160045260245ffd5b6001600160401b038616815260a060208201525f614d9160a0830187614292565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b838152608060208201525f614dd06080830185614292565b63ffffffff841660408401528281036060840152601a81527f5265717565737420616c72656164792070726f6365737365642e000000000000602082015260408101915050949350505050565b838152608060208201525f614e356080830185614292565b63ffffffff841660408401528281036060840152602381527f436861696e6c696e6b2046756e6374696f6e732072657175657374206661696c60208201526232b21760e91b604082015260608101915050949350505050565b838152608060208201525f614ea66080830185614292565b63ffffffff841660408401528281036060840152603081527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060208201526f363c903337b9103a3930b739b332b91760811b604082015260608101915050949350505050565b85815260c060208201525f614f2460c0830187614292565b6001600160a01b0395861660408481019190915294909516606083015250608081019190915280830360a090910152601b82527f4f66662d636861696e207075726368617365207665726966696564000000000060208301520192915050565b838152608060208201525f614f9c6080830185614292565b63ffffffff841660408401528281036060840152604b81527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060208201527f6c7920666f7220726566756e642e20436865636b2070726576696f757320747260408201526a30b739b0b1ba34b7b7399760a91b606082015260808101915050949350505050565b838152608060208201525f61503b6080830185614292565b63ffffffff841660408401528281036060840152604281527f4f66662d636861696e20707572636861736520766572696669636174696f6e2060208201527f6661696c65642e20546f6b656e732072657475726e656420746f2073656c6c65604082015261391760f11b606082015260808101915050949350505050565b84815260a060208201525f6150d160a0830186614292565b6001600160a01b0394909416604083810191909152606083019390935250808303608090910152601882527f496e697469616c207061796d656e74207665726966696564000000000000000060208301520192915050565b838152608060208201525f6151416080830185614292565b63ffffffff841660408401528281036060840152603881527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060208201527f6c7920666f7220696e697469616c207472616e736665722e0000000000000000604082015260608101915050949350505050565b838152608060208201525f6151cc6080830185614292565b63ffffffff841660408401528281036060840152602481527f496e697469616c207061796d656e7420766572696669636174696f6e206661696020820152633632b21760e11b604082015260608101915050949350505050565b8082018082111561079c5761079c614933565b8181038181111561079c5761079c614933565b5f8161525a5761525a614933565b505f190190565b5f8261527b57634e487b7160e01b5f52601260045260245ffd5b500690565b5f613f98838361498a56fe5759fa17f0d605fd6a905f331dc2ae12c328873085c3441c157e1796c1cd36d12dfcb2476bc2e81a958dd81dfa7a79706863a91222e955e4bb156eebac161fa5a2646970667358221220e10dddb262af0d1446600fb27e8f980bfe43b1b6df0d0bb6b88a6da726a78d2364736f6c634300081d0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNCONTRACTTOKENS = "burnContractTokens";

    public static final String FUNC_BUYRECORD = "buyRecord";

    public static final String FUNC_CANCELDEPOSIT = "cancelDeposit";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DEPOSITWITHPERMIT = "depositWithPermit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FUNCTIONSSUBSCRIPTIONS = "functionsSubscriptions";

    public static final String FUNC_HANDLEORACLEFULFILLMENT = "handleOracleFulfillment";

    public static final String FUNC_INVESTMENTKEY = "investmentKey";

    public static final String FUNC_INVESTMENTRECORD = "investmentRecord";

    public static final String FUNC_MININVESTMENTAMOUNT = "minInvestmentAmount";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NONCES = "nonces";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PERMIT = "permit";

    public static final String FUNC_PROJECTID = "projectId";

    public static final String FUNC_REGISTERASCONSUMER = "registerAsConsumer";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REQUESTINVESTMENT = "requestInvestment";

    public static final String FUNC_REQUESTTRADE = "requestTrade";

    public static final String FUNC_SELLRECORD = "sellRecord";

    public static final String FUNC_SETLOCKUP = "setLockup";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALINVESTMENTAMOUNT = "totalInvestmentAmount";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TOTALTOKENAMOUNT = "totalTokenAmount";

    public static final String FUNC_TRADEKEY = "tradeKey";

    public static final String FUNC_TRADERECORD = "tradeRecord";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERTOKENSFROMCONTRACT = "transferTokensFromContract";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INVESTMENTFAILED_EVENT = new Event("InvestmentFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INVESTMENTREQUESTED_EVENT = new Event("InvestmentRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<investment>>() {}));
    ;

    public static final Event INVESTMENTSUCCESSFUL_EVENT = new Event("InvestmentSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTFULFILLED_EVENT = new Event("RequestFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event REQUESTSENT_EVENT = new Event("RequestSent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event TRADEFAILED_EVENT = new Event("TradeFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRADEREQUESTED_EVENT = new Event("TradeRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRADESUCCESSFUL_EVENT = new Event("TradeSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InvestmentFailedEventResponse> getInvestmentFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, transactionReceipt);
        ArrayList<InvestmentFailedEventResponse> responses = new ArrayList<InvestmentFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentFailedEventResponse getInvestmentFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, log);
        InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentFailedEventFromLog(log));
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTFAILED_EVENT));
        return investmentFailedEventFlowable(filter);
    }

    public static List<InvestmentRequestedEventResponse> getInvestmentRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, transactionReceipt);
        ArrayList<InvestmentRequestedEventResponse> responses = new ArrayList<InvestmentRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentList = (List<investment>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentRequestedEventResponse getInvestmentRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, log);
        InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentList = (List<investment>) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentRequestedEventFromLog(log));
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTREQUESTED_EVENT));
        return investmentRequestedEventFlowable(filter);
    }

    public static List<InvestmentSuccessfulEventResponse> getInvestmentSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<InvestmentSuccessfulEventResponse> responses = new ArrayList<InvestmentSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentSuccessfulEventResponse getInvestmentSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, log);
        InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentSuccessfulEventFromLog(log));
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTSUCCESSFUL_EVENT));
        return investmentSuccessfulEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<RequestFulfilledEventResponse> getRequestFulfilledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, transactionReceipt);
        ArrayList<RequestFulfilledEventResponse> responses = new ArrayList<RequestFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestFulfilledEventResponse getRequestFulfilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, log);
        RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestFulfilledEventFromLog(log));
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTFULFILLED_EVENT));
        return requestFulfilledEventFlowable(filter);
    }

    public static List<RequestSentEventResponse> getRequestSentEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, transactionReceipt);
        ArrayList<RequestSentEventResponse> responses = new ArrayList<RequestSentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestSentEventResponse typedResponse = new RequestSentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestSentEventResponse getRequestSentEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, log);
        RequestSentEventResponse typedResponse = new RequestSentEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestSentEventFromLog(log));
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSENT_EVENT));
        return requestSentEventFlowable(filter);
    }

    public static List<TradeFailedEventResponse> getTradeFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, transactionReceipt);
        ArrayList<TradeFailedEventResponse> responses = new ArrayList<TradeFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeFailedEventResponse getTradeFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, log);
        TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeFailedEventFromLog(log));
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEFAILED_EVENT));
        return tradeFailedEventFlowable(filter);
    }

    public static List<TradeRequestedEventResponse> getTradeRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, transactionReceipt);
        ArrayList<TradeRequestedEventResponse> responses = new ArrayList<TradeRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeRequestedEventResponse getTradeRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, log);
        TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeRequestedEventFromLog(log));
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEREQUESTED_EVENT));
        return tradeRequestedEventFlowable(filter);
    }

    public static List<TradeSuccessfulEventResponse> getTradeSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<TradeSuccessfulEventResponse> responses = new ArrayList<TradeSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeSuccessfulEventResponse getTradeSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, log);
        TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeSuccessfulEventFromLog(log));
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADESUCCESSFUL_EVENT));
        return tradeSuccessfulEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnContractTokens(BigInteger _amount) {
        final Function function = new Function(
                FUNC_BURNCONTRACTTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> buyRecord(String param0) {
        final Function function = new Function(FUNC_BUYRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> cancelDeposit(String _sellId, String _seller,
            BigInteger _sellAmount, byte[] _hashedMessage, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_CANCELDEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_sellId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.generated.Uint256(_sellAmount), 
                new org.web3j.abi.datatypes.generated.Bytes32(_hashedMessage), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> depositWithPermit(String _sellId, String _seller,
            BigInteger _sellAmount, BigInteger deadline, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_DEPOSITWITHPERMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_sellId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.generated.Uint256(_sellAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain(
            ) {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> functionsSubscriptions() {
        final Function function = new Function(FUNC_FUNCTIONSSUBSCRIPTIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOracleFulfillment(byte[] requestId,
            byte[] response, byte[] err) {
        final Function function = new Function(
                FUNC_HANDLEORACLEFULFILLMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId), 
                new org.web3j.abi.datatypes.DynamicBytes(response), 
                new org.web3j.abi.datatypes.DynamicBytes(err)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> investmentKey(byte[] param0, BigInteger param1) {
        final Function function = new Function(FUNC_INVESTMENTKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<String, String, BigInteger, Boolean>> investmentRecord(
            String param0) {
        final Function function = new Function(FUNC_INVESTMENTRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, BigInteger, Boolean>>(function,
                new Callable<Tuple4<String, String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> minInvestmentAmount() {
        final Function function = new Function(FUNC_MININVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> nonces(String owner) {
        final Function function = new Function(FUNC_NONCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> permit(String owner, String spender,
            BigInteger value, BigInteger deadline, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_PERMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> projectId() {
        final Function function = new Function(FUNC_PROJECTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> registerAsConsumer() {
        final Function function = new Function(
                FUNC_REGISTERASCONSUMER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestInvestment(List<investment> _investments) {
        final Function function = new Function(
                FUNC_REQUESTINVESTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<investment>(investment.class, _investments)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestTrade(String _tradeId, String _sellId,
            String _seller, BigInteger _sellAmount, String _buyId, String _buyer,
            BigInteger _buyAmount) {
        final Function function = new Function(
                FUNC_REQUESTTRADE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_tradeId), 
                new org.web3j.abi.datatypes.Utf8String(_sellId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.generated.Uint256(_sellAmount), 
                new org.web3j.abi.datatypes.Utf8String(_buyId), 
                new org.web3j.abi.datatypes.Address(160, _buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_buyAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, Boolean>> sellRecord(String param0) {
        final Function function = new Function(FUNC_SELLRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, Boolean>>(function,
                new Callable<Tuple3<String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setLockup(String _account,
            BigInteger _unlockTime) {
        final Function function = new Function(
                FUNC_SETLOCKUP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account), 
                new org.web3j.abi.datatypes.generated.Uint256(_unlockTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalInvestmentAmount() {
        final Function function = new Function(FUNC_TOTALINVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalTokenAmount() {
        final Function function = new Function(FUNC_TOTALTOKENAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tradeKey(byte[] param0) {
        final Function function = new Function(FUNC_TRADEKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<sell, buy, Boolean>> tradeRecord(String param0) {
        final Function function = new Function(FUNC_TRADERECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<sell>() {}, new TypeReference<buy>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<sell, buy, Boolean>>(function,
                new Callable<Tuple3<sell, buy, Boolean>>() {
                    @Override
                    public Tuple3<sell, buy, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<sell, buy, Boolean>(
                                (sell) results.get(0), 
                                (buy) results.get(1), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferTokensFromContract(String _to,
            BigInteger _amount) {
        final Function function = new Function(
                FUNC_TRANSFERTOKENSFROMCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _router, BigInteger _subscriptionId,
            byte[] _donId, String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _router, BigInteger _subscriptionId,
            byte[] _donId, String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class investment extends DynamicStruct {
        public String investId;

        public String investmentor;

        public BigInteger tokenAmount;

        public Boolean processState;

        public investment(String investId, String investmentor, BigInteger tokenAmount,
                Boolean processState) {
            super(new org.web3j.abi.datatypes.Utf8String(investId), 
                    new org.web3j.abi.datatypes.Address(160, investmentor), 
                    new org.web3j.abi.datatypes.generated.Uint256(tokenAmount), 
                    new org.web3j.abi.datatypes.Bool(processState));
            this.investId = investId;
            this.investmentor = investmentor;
            this.tokenAmount = tokenAmount;
            this.processState = processState;
        }

        public investment(Utf8String investId, Address investmentor, Uint256 tokenAmount,
                Bool processState) {
            super(investId, investmentor, tokenAmount, processState);
            this.investId = investId.getValue();
            this.investmentor = investmentor.getValue();
            this.tokenAmount = tokenAmount.getValue();
            this.processState = processState.getValue();
        }
    }

    public static class sell extends StaticStruct {
        public String seller;

        public BigInteger sellAmount;

        public Boolean depositState;

        public sell(String seller, BigInteger sellAmount, Boolean depositState) {
            super(new org.web3j.abi.datatypes.Address(160, seller), 
                    new org.web3j.abi.datatypes.generated.Uint256(sellAmount), 
                    new org.web3j.abi.datatypes.Bool(depositState));
            this.seller = seller;
            this.sellAmount = sellAmount;
            this.depositState = depositState;
        }

        public sell(Address seller, Uint256 sellAmount, Bool depositState) {
            super(seller, sellAmount, depositState);
            this.seller = seller.getValue();
            this.sellAmount = sellAmount.getValue();
            this.depositState = depositState.getValue();
        }
    }

    public static class buy extends StaticStruct {
        public String buyer;

        public BigInteger buyAmount;

        public buy(String buyer, BigInteger buyAmount) {
            super(new org.web3j.abi.datatypes.Address(160, buyer), 
                    new org.web3j.abi.datatypes.generated.Uint256(buyAmount));
            this.buyer = buyer;
            this.buyAmount = buyAmount;
        }

        public buy(Address buyer, Uint256 buyAmount) {
            super(buyer, buyAmount);
            this.buyer = buyer.getValue();
            this.buyAmount = buyAmount.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InvestmentFailedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] investmentIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String investmentId;

        public BigInteger status;

        public String reason;
    }

    public static class InvestmentRequestedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public List<investment> investmentList;
    }

    public static class InvestmentSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] investmentIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String investmentId;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RequestFulfilledEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class RequestSentEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class TradeFailedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public BigInteger status;

        public String reason;
    }

    public static class TradeRequestedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;
    }

    public static class TradeSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
