package com.ddiring.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.13.0.
 */
@SuppressWarnings("rawtypes")
public class FractionalInvestmentToken extends Contract {
    public static final String BINARY = "610200604052348015610010575f5ffd5b50604051614c1c380380614c1c83398101604081905261002f91610755565b84338a80604051806040016040528060018152602001603160f81b8152508d8d816003908161005e91906108dc565b50600461006b82826108dc565b5061007b9150839050600561036b565b6101205261008a81600661036b565b61014052815160208084019190912060e052815190820120610100524660a05261011660e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600160a01b03811661014e57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6101578161039d565b506001600160a01b0316610160525f86116101cd5760405162461bcd60e51b815260206004820152603060248201527f4d696e696d756d20696e766573746d656e7420616d6f756e74206d757374206260448201526f0652067726561746572207468616e20360841b6064820152608401610145565b858710156102435760405162461bcd60e51b815260206004820152603560248201527f546f74616c20676f616c206d757374206265206174206c65617374206d696e6960448201527f6d756d20696e766573746d656e7420616d6f756e7400000000000000000000006064820152608401610145565b61024d86886109aa565b156102cc5760405162461bcd60e51b815260206004820152604360248201527f546f74616c20676f616c206d75737420626520706572666563746c792064697660448201527f697369626c65206279206d696e696d756d20696e766573746d656e7420616d6f6064820152621d5b9d60ea1b608482015260a401610145565b6101808a90526101a08790526101c08690526102e886886109d1565b6101e052600980546001600160401b038616600160a01b026001600160e01b03199091166001600160a01b03881617179055600a839055600b61032b83826108dc565b50600c61033882826108dc565b5061035c306103496012600a610ac7565b6101e0516103579190610adc565b6103ee565b50505050505050505050610b5e565b5f6020835110156103865761037f83610426565b9050610397565b8161039184826108dc565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382166104175760405163ec442f0560e01b81525f6004820152602401610145565b6104225f8383610463565b5050565b5f5f829050601f81511115610450578260405163305a27a960e01b81526004016101459190610af3565b805161045b82610b28565b179392505050565b6001600160a01b03831615610551576001600160a01b0383165f908152601160205260409020544210156104e55760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b6064820152608401610145565b6104f8600854600160a01b900460ff1690565b156105515760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b6064820152608401610145565b61055c838383610561565b505050565b6001600160a01b03831661058b578060025f8282546105809190610b4b565b909155506105fb9050565b6001600160a01b0383165f90815260208190526040902054818110156105dd5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610145565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661061757600280548290039055610635565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161067a91815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126106aa575f5ffd5b81516001600160401b038111156106c3576106c3610687565b604051601f8201601f19908116603f011681016001600160401b03811182821017156106f1576106f1610687565b604052818152838201602001851015610708575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b80516001600160a01b038116811461073a575f5ffd5b919050565b80516001600160401b038116811461073a575f5ffd5b5f5f5f5f5f5f5f5f5f5f6101408b8d03121561076f575f5ffd5b8a5160208c0151909a506001600160401b0381111561078c575f5ffd5b6107988d828e0161069b565b60408d0151909a5090506001600160401b038111156107b5575f5ffd5b6107c18d828e0161069b565b60608d015160808e0151919a50985096506107e0905060a08c01610724565b94506107ee60c08c0161073f565b60e08c01516101008d015191955093506001600160401b03811115610811575f5ffd5b61081d8d828e0161069b565b6101208d015190935090506001600160401b0381111561083b575f5ffd5b6108478d828e0161069b565b9150509295989b9194979a5092959850565b600181811c9082168061086d57607f821691505b60208210810361088b57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561055c57805f5260205f20601f840160051c810160208510156108b65750805b601f840160051c820191505b818110156108d5575f81556001016108c2565b5050505050565b81516001600160401b038111156108f5576108f5610687565b610909816109038454610859565b84610891565b6020601f82116001811461093b575f83156109245750848201515b5f19600385901b1c1916600184901b1784556108d5565b5f84815260208120601f198516915b8281101561096a578785015182556020948501946001909201910161094a565b508482101561098757868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52601260045260245ffd5b5f826109b8576109b8610996565b500690565b634e487b7160e01b5f52601160045260245ffd5b5f826109df576109df610996565b500490565b6001815b6001841115610a1f57808504811115610a0357610a036109bd565b6001841615610a1157908102905b60019390931c9280026109e8565b935093915050565b5f82610a3557506001610397565b81610a4157505f610397565b8160018114610a575760028114610a6157610a7d565b6001915050610397565b60ff841115610a7257610a726109bd565b50506001821b610397565b5060208310610133831016604e8410600b8410161715610aa0575081810a610397565b610aac5f1984846109e4565b805f1904821115610abf57610abf6109bd565b029392505050565b5f610ad560ff841683610a27565b9392505050565b8082028115828204841417610397576103976109bd565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b8051602080830151919081101561088b575f1960209190910360031b1b16919050565b80820180821115610397576103976109bd565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051613fd9610c435f395f61021c01525f61032a01525f61042d01525f818161030301528181610ca5015281816117da0152818161233d015281816123a5015281816124e101528181612603015281816126aa0152818161272f0152818161278a01528181612902015281816129f901528181612aeb0152612bec01525f81816106b40152611d9301525f6121a901525f61217c01525f61200801525f611fe001525f611f3b01525f611f6501525f611f8f0152613fd95ff3fe608060405234801561000f575f5ffd5b5060043610610213575f3560e01c80637ecebe001161011f578063cb021d51116100a9578063dd62ed3e11610079578063dd62ed3e14610587578063e08f5638146105bf578063eb43efa7146105c7578063f2fde38b146105da578063ffdf54e4146105ed575f5ffd5b8063cb021d51146104bd578063d0973af81461054e578063d505accf14610561578063dcd9cb6f14610574575f5ffd5b80638da5cb5b116100ef5780638da5cb5b146103e857806395d89b411461040d578063a9059cbb14610415578063b1504a8814610428578063b38374b71461044f575f5ffd5b80637ecebe001461039f5780637f17cef7146103b25780638456cb59146103c557806384b0196e146103cd575f5ffd5b80633e579307116101a057806358955ee91161017057806358955ee91461034c5780635c975abb1461035f5780635d0371461461037157806370a0823114610384578063715018a614610397575f5ffd5b80633e579307146102e35780633f4ba83a146102f65780633fafa127146102fe5780634d298a0714610325575f5ffd5b80631290bba1116101e65780631290bba11461029e57806318160ddd146102b157806323b872dd146102b9578063313ce567146102cc5780633644e515146102db575f5ffd5b80630337b3aa1461021757806306fdde0314610251578063095ea7b3146102665780630ca7617514610289575b5f5ffd5b61023e7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b610259610600565b6040516102489190613635565b610279610274366004613662565b610690565b6040519015158152602001610248565b61029c61029736600461372d565b6106a9565b005b61029c6102ac366004613798565b61072c565b60025461023e565b6102796102c73660046137f9565b610d78565b60405160128152602001610248565b61023e610d9b565b61029c6102f1366004613662565b610da9565b61029c610e26565b61023e7f000000000000000000000000000000000000000000000000000000000000000081565b61023e7f000000000000000000000000000000000000000000000000000000000000000081565b61029c61035a366004613843565b610e38565b600854600160a01b900460ff16610279565b61029c61037f3660046138d2565b61115d565b61023e6103923660046138e9565b611172565b61029c61118c565b61023e6103ad3660046138e9565b61119d565b6102596103c03660046138d2565b6111ba565b61029c611251565b6103d5611261565b6040516102489796959493929190613902565b6008546001600160a01b03165b6040516001600160a01b039091168152602001610248565b6102596112a3565b610279610423366004613662565b6112b2565b61023e7f000000000000000000000000000000000000000000000000000000000000000081565b61049661045d366004613998565b8051602081830181018051600d825292820191909301209152805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b0390941684526020840192909252151590820152606001610248565b6105176104cb366004613998565b805180820160209081018051600f8252928201919093012091528054600182015460028301546003909301546001600160a01b0392831693919092169160ff8082169161010090041685565b604080516001600160a01b03968716815295909416602086015292840191909152151560608301521515608082015260a001610248565b61029c61055c366004613662565b6112bf565b61029c61056f3660046139d1565b61132e565b6009546103f5906001600160a01b031681565b61023e610595366004613a37565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b61029c611464565b61029c6105d5366004613a68565b6114db565b61029c6105e83660046138e9565b61182d565b6102596105fb3660046138d2565b611867565b60606003805461060f90613aaa565b80601f016020809104026020016040519081016040528092919081815260200182805461063b90613aaa565b80156106865780601f1061065d57610100808354040283529160200191610686565b820191905f5260205f20905b81548152906001019060200180831161066957829003601f168201915b5050505050905090565b5f3361069d81858561187f565b60019150505b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106f25760405163c6829f8360e01b815260040160405180910390fd5b6106fd838383611891565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6905f90a2505050565b610734611a3e565b61073c611a6b565b600f8460405161074c9190613ae2565b9081526040519081900360200190206003015460ff16156107885760405162461bcd60e51b815260040161077f90613af8565b60405180910390fd5b600f846040516107989190613ae2565b9081526040519081900360200190206003015460ff610100909104166107d05760405162461bcd60e51b815260040161077f90613b43565b6001600160a01b038216158015906107f057506001600160a01b03831615155b6108385760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b9b2b99031b0b73737ba103132903d32b9379760391b604482015260640161077f565b816001600160a01b0316600f856040516108529190613ae2565b908152604051908190036020019020600101546001600160a01b0316146108cc5760405162461bcd60e51b815260206004820152602860248201527f427579657220646f6573206e6f74206d61746368207472616e73616374696f6e60448201526720686973746f727960c01b606482015260840161077f565b826001600160a01b0316600f856040516108e69190613ae2565b908152604051908190036020019020546001600160a01b03161461095e5760405162461bcd60e51b815260206004820152602960248201527f53656c6c657220646f6573206e6f74206d61746368207472616e73616374696f6044820152686e20686973746f727960b81b606482015260840161077f565b5f600c805461096c90613aaa565b9050116109b25760405162461bcd60e51b815260206004820152601460248201527329b7bab931b29031b7b232903737ba1039b2ba1760611b604482015260640161077f565b5f6109bf6012600a613c8d565b600f866040516109cf9190613ae2565b9081526020016040518091039020600201546109eb9190613c9b565b90505f8211610a0c5760405162461bcd60e51b815260040161077f90613cb2565b600f85604051610a1c9190613ae2565b9081526020016040518091039020600201548214610a945760405162461bcd60e51b815260206004820152602f60248201527f546f6b656e20616d6f756e7420646f6573206e6f74206d61746368207472616e60448201526e73616374696f6e20686973746f727960881b606482015260840161077f565b80610a9e30611172565b1015610b14576040805162461bcd60e51b81526020600482015260248101919091527f436f6e747261637420686f6c64696e6720616d6f756e7420697320696e73756660448201527f66696369656e74207468616e20547261646520546f6b656e20416d6f756e742e606482015260840161077f565b610b526040805160e08101909152805f81526020015f81526020015f8152602001606081526020016060815260200160608152602001606081525090565b610bed600c8054610b6290613aaa565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8e90613aaa565b8015610bd95780601f10610bb057610100808354040283529160200191610bd9565b820191905f5260205f20905b815481529060010190602001808311610bbc57829003601f168201915b505050505082611a9690919063ffffffff16565b6040805160018082528183019092525f91816020015b6060815260200190600190039081610c0357905050905086815f81518110610c2d57610c2d613cf6565b6020908102919091010152610c428282611aa2565b5f610c71610c4f84611acb565b600960149054906101000a90046001600160401b0316620493e0600a54611d8f565b5f818152601060205260409020909150610c8b8982613d4e565b508088604051610c9b9190613ae2565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007fa464592cc1f7393d131f9d711cf8f093719d7c203a1c4cf6282d1473d8efcd30600f8c604051610cf59190613ae2565b90815260200160405180910390205f015f9054906101000a90046001600160a01b03168a600f8e604051610d299190613ae2565b90815260405190819003602001812060020154610d669392916001600160a01b039384168152919092166020820152604081019190915260600190565b60405180910390a45050505050505050565b5f33610d85858285611e5c565b610d90858585611ed2565b506001949350505050565b5f610da4611f2f565b905090565b610db1611a3e565b428111610e0b5760405162461bcd60e51b815260206004820152602260248201527f556e6c6f636b2074696d65206d75737420626520696e20746865206675747572604482015261329760f11b606482015260840161077f565b6001600160a01b039091165f90815260116020526040902055565b610e2e611a3e565b610e36612058565b565b610e40611a3e565b610e48611a6b565b600f88604051610e589190613ae2565b9081526040519081900360200190206003015460ff1615610e8b5760405162461bcd60e51b815260040161077f90613af8565b600f88604051610e9b9190613ae2565b9081526040519081900360200190206003015460ff6101009091041615610ed45760405162461bcd60e51b815260040161077f90613b43565b6001600160a01b03871615801590610ef457506001600160a01b03861615155b610f3c5760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b9b2b99031b0b73737ba103132903d32b9379760391b604482015260640161077f565b5f8511610f9e5760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e7320746f207472616e73666572206d75737420626520677265617460448201526932b9103a3430b710181760b11b606482015260840161077f565b5f610fab6012600a613c8d565b610fb59087613c9b565b905080610fc189611172565b101561101f5760405162461bcd60e51b815260206004820152602760248201527f53656c6c6572277320746f6b656e2062616c616e636520697320696e7375666660448201526634b1b4b2b73a1760c91b606482015260840161077f565b61102e8830838888888861132e565b611039883083611ed2565b87600f8a60405161104a9190613ae2565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091558790600f9061108a908c90613ae2565b90815260200160405180910390206001015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555085600f8a6040516110cf9190613ae2565b9081526020016040518091039020600201819055505f600f8a6040516110f59190613ae2565b908152604051908190036020018120600301805492151560ff1990931692909217909155600190600f9061112a908c90613ae2565b90815260405190819003602001902060030180549115156101000261ff0019909216919091179055505050505050505050565b611165611a3e565b61116f30826120ad565b50565b6001600160a01b03165f9081526020819052604090205490565b611194611a3e565b610e365f6120e1565b6001600160a01b0381165f908152600760205260408120546106a3565b60106020525f9081526040902080546111d290613aaa565b80601f01602080910402602001604051908101604052809291908181526020018280546111fe90613aaa565b80156112495780601f1061122057610100808354040283529160200191611249565b820191905f5260205f20905b81548152906001019060200180831161122c57829003601f168201915b505050505081565b611259611a3e565b610e36612132565b5f6060805f5f5f6060611272612175565b61127a6121a2565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461060f90613aaa565b5f3361069d818585611ed2565b6112c7611a3e565b806112d130611172565b101561131f5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e747261637420746f6b656e732e000000604482015260640161077f565b61132a308383611ed2565b5050565b834211156113525760405163313c898160e11b81526004810185905260240161077f565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c988888861139d8c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f6113f7826121cf565b90505f611406828787876121fb565b9050896001600160a01b0316816001600160a01b03161461144d576040516325c0072360e11b81526001600160a01b0380831660048301528b16602482015260440161077f565b6114588a8a8a61187f565b50505050505050505050565b61146c611a3e565b600954604051631cd0704360e21b8152600160a01b82046001600160401b031660048201523060248201526001600160a01b0390911690637341c10c906044015f604051808303815f87803b1580156114c3575f5ffd5b505af11580156114d5573d5f5f3e3d5ffd5b50505050565b6114e3611a3e565b6114eb611a6b565b600d836040516114fb9190613ae2565b9081526040519081900360200190206002015460ff16156115745760405162461bcd60e51b815260206004820152602d60248201527f496e697469616c207265717565737420616c72656164792070726f636573736560448201526c321037b9103832b73234b7339760991b606482015260840161077f565b6001600160a01b0382166115ca5760405162461bcd60e51b815260206004820152601d60248201527f427579657220616464726573732063616e6e6f74206265207a65726f2e000000604482015260640161077f565b5f81116115e95760405162461bcd60e51b815260040161077f90613cb2565b6115f56012600a613c8d565b6115ff9082613c9b565b61160830611172565b101561167c5760405162461bcd60e51b815260206004820152603760248201527f4e6f7420656e6f75676820746f6b656e7320696e20636f6e747261637420666f60448201527f72207468697320696e697469616c20726571756573742e000000000000000000606482015260840161077f565b81600d8460405161168d9190613ae2565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091558190600d906116cd908690613ae2565b9081526040519081900360200190206001015561171e6040805160e08101909152805f81526020015f81526020015f8152602001606081526020016060815260200160608152602001606081525090565b61172e600b8054610b6290613aaa565b6040805160018082528183019092525f91816020015b606081526020019060019003908161174457905050905084815f8151811061176e5761176e613cf6565b60209081029190910101526117838282611aa2565b5f611790610c4f84611acb565b5f818152600e602052604090209091506117aa8782613d4e565b5080866040516117ba9190613ae2565b604080519182900382206001600160a01b038916835260208301889052917f0000000000000000000000000000000000000000000000000000000000000000917f836fc95ab5b39b8069f428767dc90fe3baee4fb4a25bbbd50f2707f3b3c69dcb910160405180910390a4505050505050565b611835611a3e565b6001600160a01b03811661185e57604051631e4fbdf760e01b81525f600482015260240161077f565b61116f816120e1565b600e6020525f9081526040902080546111d290613aaa565b61188c8383836001612227565b505050565b5f838152600e6020526040812080546118a990613aaa565b80601f01602080910402602001604051908101604052809291908181526020018280546118d590613aaa565b80156119205780601f106118f757610100808354040283529160200191611920565b820191905f5260205f20905b81548152906001019060200180831161190357829003601f168201915b505050505090505f60105f8681526020019081526020015f20805461194490613aaa565b80601f016020809104026020016040519081016040528092919081815260200182805461197090613aaa565b80156119bb5780601f10611992576101008083540402835291602001916119bb565b820191905f5260205f20905b81548152906001019060200180831161199e57829003601f168201915b505050505090505f825111156119dc576119d7858386866122f9565b611a37565b8051156119ef576119d7858286866126eb565b60405162461bcd60e51b815260206004820152601c60248201527f556e6b6e6f776e20436861696e6c696e6b207265717565737420494400000000604482015260640161077f565b5050505050565b6008546001600160a01b03163314610e365760405163118cdaa760e01b815233600482015260240161077f565b600854600160a01b900460ff1615610e365760405163d93c066560e01b815260040160405180910390fd5b61132a825f5f84612c2f565b80515f03611ac35760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60605f611ad9610100612cac565b9050611b126040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b81525082612ccc90919063ffffffff16565b8251611b30906002811115611b2957611b29613e08565b8290612ce5565b6040805180820190915260088152676c616e677561676560c01b6020820152611b5a908290612ccc565b6040830151611b71908015611b2957611b29613e08565b604080518082019091526006815265736f7572636560d01b6020820152611b99908290612ccc565b6060830151611ba9908290612ccc565b60a08301515115611c34576040805180820190915260048152636172677360e01b6020820152611bda908290612ccc565b611be381612d1e565b5f5b8360a0015151811015611c2a57611c228460a001518281518110611c0b57611c0b613cf6565b602002602001015183612ccc90919063ffffffff16565b600101611be5565b50611c3481612d42565b60808301515115611cf7575f83602001516002811115611c5657611c56613e08565b03611c745760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152611ca5908290612ccc565b611cbe83602001516002811115611b2957611b29613e08565b6040805180820190915260078152667365637265747360c81b6020820152611ce7908290612ccc565b6080830151611cf7908290612d60565b60c08301515115611d875760408051808201909152600981526862797465734172677360b81b6020820152611d2d908290612ccc565b611d3681612d1e565b5f5b8360c0015151811015611d7d57611d758460c001518281518110611d5e57611d5e613cf6565b602002602001015183612d6090919063ffffffff16565b600101611d38565b50611d8781612d42565b515192915050565b5f5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401611de6959493929190613e1c565b6020604051808303815f875af1158015611e02573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e269190613e64565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8905f90a295945050505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198110156114d55781811015611ec457604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161077f565b6114d584848484035f612227565b6001600160a01b038316611efb57604051634b637e8f60e11b81525f600482015260240161077f565b6001600160a01b038216611f245760405163ec442f0560e01b81525f600482015260240161077f565b61188c838383612d6d565b5f306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611f8757507f000000000000000000000000000000000000000000000000000000000000000046145b15611fb157507f000000000000000000000000000000000000000000000000000000000000000090565b610da4604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b612060612e60565b6008805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166120d657604051634b637e8f60e11b81525f600482015260240161077f565b61132a825f83612d6d565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b61213a611a6b565b6008805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120903390565b6060610da47f00000000000000000000000000000000000000000000000000000000000000006005612e8a565b6060610da47f00000000000000000000000000000000000000000000000000000000000000006006612e8a565b5f6106a36121db611f2f565b8360405161190160f01b8152600281019290925260228201526042902090565b5f5f5f5f61220b88888888612f33565b92509250925061221b8282612ffb565b50909695505050505050565b6001600160a01b0384166122505760405163e602df0560e01b81525f600482015260240161077f565b6001600160a01b03831661227957604051634a1406b160e11b81525f600482015260240161077f565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156114d557826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516122eb91815260200190565b60405180910390a350505050565b600d836040516123099190613ae2565b9081526040519081900360200190206002015460ff16156123855783836040516123339190613ae2565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020613f645f395f51905f525f6040516123789190613e7b565b60405180910390a46114d5565b8051156123e157838360405161239b9190613ae2565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020613f645f395f51905f5260016040516123789190613ec1565b5f600d846040516123f29190613ae2565b908152604051908190036020018120546001600160a01b031691505f90600d9061241d908790613ae2565b90815260200160405180910390206001015490505f848060200190518101906124469190613e64565b9050806001036126475761245c6012600a613c8d565b6124669083613c9b565b61246f30611172565b106125875761249430846124856012600a613c8d565b61248f9086613c9b565b611ed2565b6001600d876040516124a69190613ae2565b908152604051908190036020018120600201805492151560ff199093169290921790915587906124d7908890613ae2565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007f7fc6f4011ccd89346585e4aa424eccd102db2a87e3e7dd3657e94ad54e561216868660405161257a9291906001600160a01b0392909216825260208201526060604082018190526018908201527f496e697469616c207061796d656e742076657269666965640000000000000000608082015260a00190565b60405180910390a46126e2565b86866040516125969190613ae2565b6040805191829003822060028352602083018290526038838301527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060608401527f6c7920666f7220696e697469616c207472616e736665722e00000000000000006080840152905190917f0000000000000000000000000000000000000000000000000000000000000000915f516020613f645f395f51905f529181900360a00190a4612642611251565b6126e2565b86866040516126569190613ae2565b6040805191829003822060038352602083018290526024838301527f496e697469616c207061796d656e7420766572696669636174696f6e206661696060840152633632b21760e11b6080840152905190917f0000000000000000000000000000000000000000000000000000000000000000915f516020613f645f395f51905f529181900360a00190a45b50505050505050565b600f836040516126fb9190613ae2565b9081526040519081900360200190206003015460ff161561276a5783836040516127259190613ae2565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020613f845f395f51905f525f6040516123789190613e7b565b8051156127c65783836040516127809190613ae2565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020613f845f395f51905f5260016040516123789190613ec1565b5f600f846040516127d79190613ae2565b908152604051908190036020018120546001600160a01b031691505f90600f90612802908790613ae2565b908152604051908190036020018120600101546001600160a01b031691505f90600f90612830908890613ae2565b90815260200160405180910390206002015490505f61284d601290565b61285890600a613c8d565b6128629083613c9b565b90505f868060200190518101906128799190613e64565b905080600103612a4b578161288d30611172565b101561294f5788886040516128a29190613ae2565b6040805191829003822060028352602083018290526030918301919091527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060608301526f363c903337b9103a3930b739b332b91760811b6080830152907f0000000000000000000000000000000000000000000000000000000000000000905f516020613f845f395f51905f529060a0015b60405180910390a4612945611251565b50505050506114d5565b61295a308584611ed2565b6001600f8960405161296c9190613ae2565b908152604051908190036020018120600301805492151560ff1990931692909217909155899061299d908a90613ae2565b604080519182900382206001600160a01b03808a16845288166020840152908201869052608060608301819052601b908301527f4f66662d636861696e207075726368617365207665726966696564000000000060a0830152907f0000000000000000000000000000000000000000000000000000000000000000907f52de7a221cbfd6e4743e31cc6531e8aa1e21da79ade52efb8df784235125e8c29060c00160405180910390a4612c24565b81612a5530611172565b1015612b22578888604051612a6a9190613ae2565b604080519182900382206002835260208301829052604b918301919091527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060608301527f6c7920666f7220726566756e642e20436865636b2070726576696f757320747260808301526a30b739b0b1ba34b7b7399760a91b60a0830152907f0000000000000000000000000000000000000000000000000000000000000000905f516020613f845f395f51905f529060c001612935565b612b2d308684611ed2565b5f600f89604051612b3e9190613ae2565b90815260405190819003602001812060030180549215156101000261ff0019909316929092179091558990612b74908a90613ae2565b6040805191829003822060038352602083018290526042838301527f4f66662d636861696e20707572636861736520766572696669636174696f6e2060608401527f6661696c65642e20546f6b656e732072657475726e656420746f2073656c6c65608084015261391760f11b60a0840152905190917f0000000000000000000000000000000000000000000000000000000000000000915f516020613f845f395f51905f529181900360c00190a45b505050505050505050565b80515f03612c50576040516322ce3edd60e01b815260040160405180910390fd5b83836002811115612c6357612c63613e08565b90816002811115612c7657612c76613e08565b90525060408401828015612c8c57612c8c613e08565b90818015612c9c57612c9c613e08565b9052506060909301929092525050565b612cb46135d4565b8051612cc090836130b3565b505f6020820152919050565b612cd98260038351613127565b815161188c9082613240565b8151612cf29060c2613267565b5061132a8282604051602001612d0a91815260200190565b604051602081830303815290604052612d60565b612d298160046132ce565b600181602001818151612d3c9190613f13565b90525050565b612d4d8160076132ce565b600181602001818151612d3c9190613f26565b612cd98260028351613127565b6001600160a01b03831615612e55576001600160a01b0383165f90815260116020526040902054421015612def5760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b606482015260840161077f565b600854600160a01b900460ff1615612e555760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b606482015260840161077f565b61188c8383836132e5565b600854600160a01b900460ff16610e3657604051638dfc202b60e01b815260040160405180910390fd5b606060ff8314612ea457612e9d8361340b565b90506106a3565b818054612eb090613aaa565b80601f0160208091040260200160405190810160405280929190818152602001828054612edc90613aaa565b8015612f275780601f10612efe57610100808354040283529160200191612f27565b820191905f5260205f20905b815481529060010190602001808311612f0a57829003601f168201915b505050505090506106a3565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115612f6c57505f91506003905082612ff1565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015612fbd573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b038116612fe857505f925060019150829050612ff1565b92505f91508190505b9450945094915050565b5f82600381111561300e5761300e613e08565b03613017575050565b600182600381111561302b5761302b613e08565b036130495760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561305d5761305d613e08565b0361307e5760405163fce698f760e01b81526004810182905260240161077f565b600382600381111561309257613092613e08565b0361132a576040516335e2f38360e21b81526004810182905260240161077f565b60408051808201909152606081525f60208201526130d2602083613f39565b156130fa576130e2602083613f39565b6130ed906020613f26565b6130f79083613f13565b91505b60208084018390526040518085525f815290818401018181101561311c575f5ffd5b604052509192915050565b6017816001600160401b03161161314d5782516114d59060e0600585901b168317613267565b60ff816001600160401b03161161318d578251613175906018611fe0600586901b1617613267565b5082516114d5906001600160401b0383166001613448565b61ffff816001600160401b0316116131ce5782516131b6906019611fe0600586901b1617613267565b5082516114d5906001600160401b0383166002613448565b63ffffffff816001600160401b0316116132115782516131f990601a611fe0600586901b1617613267565b5082516114d5906001600160401b0383166004613448565b825161322890601b611fe0600586901b1617613267565b5082516114d5906001600160401b0383166008613448565b60408051808201909152606081525f6020820152613260838384516134ca565b9392505050565b60408051808201909152606081525f60208201528251515f61328a826001613f13565b9050846020015182106132ab576132ab856132a6836002613c9b565b613596565b84516020838201018581535080518211156132c4578181525b5093949350505050565b815161188c90601f611fe0600585901b1617613267565b6001600160a01b03831661330f578060025f8282546133049190613f13565b9091555061337f9050565b6001600160a01b0383165f90815260208190526040902054818110156133615760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161077f565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661339b576002805482900390556133b9565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516133fe91815260200190565b60405180910390a3505050565b60605f613417836135ad565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b60408051808201909152606081525f60208201528351515f61346a8285613f13565b9050856020015181111561348757613487866132a6836002613c9b565b5f600161349686610100613f58565b6134a09190613f26565b905086518281018783198251161781525080518311156134be578281525b50959695505050505050565b60408051808201909152606081525f602082015282518211156134eb575f5ffd5b8351515f6134f98483613f13565b9050856020015181111561351657613516866132a6836002613c9b565b85518051838201602001915f918085111561352f578482525b505050602086015b6020861061356f578051825261354e602083613f13565b915061355b602082613f13565b9050613568602087613f26565b9550613537565b5181515f1960208890036101000a0190811690199190911617905250849150509392505050565b81516135a283836130b3565b506114d58382613240565b5f60ff8216601f8111156106a357604051632cd44ac360e21b815260040160405180910390fd5b60405180604001604052806135fb6040518060400160405280606081526020015f81525090565b81526020015f81525090565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6132606020830184613607565b80356001600160a01b038116811461365d575f5ffd5b919050565b5f5f60408385031215613673575f5ffd5b61367c83613647565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126136ad575f5ffd5b8135602083015f5f6001600160401b038411156136cc576136cc61368a565b50604051601f19601f85018116603f011681018181106001600160401b03821117156136fa576136fa61368a565b604052838152905080828401871015613711575f5ffd5b838360208301375f602085830101528094505050505092915050565b5f5f5f6060848603121561373f575f5ffd5b8335925060208401356001600160401b0381111561375b575f5ffd5b6137678682870161369e565b92505060408401356001600160401b03811115613782575f5ffd5b61378e8682870161369e565b9150509250925092565b5f5f5f5f608085870312156137ab575f5ffd5b84356001600160401b038111156137c0575f5ffd5b6137cc8782880161369e565b9450506137db60208601613647565b92506137e960408601613647565b9396929550929360600135925050565b5f5f5f6060848603121561380b575f5ffd5b61381484613647565b925061382260208501613647565b929592945050506040919091013590565b803560ff8116811461365d575f5ffd5b5f5f5f5f5f5f5f5f610100898b03121561385b575f5ffd5b88356001600160401b03811115613870575f5ffd5b61387c8b828c0161369e565b98505061388b60208a01613647565b965061389960408a01613647565b955060608901359450608089013593506138b560a08a01613833565b979a969950949793969295929450505060c08201359160e0013590565b5f602082840312156138e2575f5ffd5b5035919050565b5f602082840312156138f9575f5ffd5b61326082613647565b60ff60f81b8816815260e060208201525f61392060e0830189613607565b82810360408401526139328189613607565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015613987578351835260209384019390920191600101613969565b50909b9a5050505050505050505050565b5f602082840312156139a8575f5ffd5b81356001600160401b038111156139bd575f5ffd5b6139c98482850161369e565b949350505050565b5f5f5f5f5f5f5f60e0888a0312156139e7575f5ffd5b6139f088613647565b96506139fe60208901613647565b95506040880135945060608801359350613a1a60808901613833565b9699959850939692959460a0840135945060c09093013592915050565b5f5f60408385031215613a48575f5ffd5b613a5183613647565b9150613a5f60208401613647565b90509250929050565b5f5f5f60608486031215613a7a575f5ffd5b83356001600160401b03811115613a8f575f5ffd5b613a9b8682870161369e565b93505061382260208501613647565b600181811c90821680613abe57607f821691505b602082108103613adc57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f82518060208501845e5f920191825250919050565b6020808252602b908201527f5472616465207265717565737420616c72656164792070726f6365737365642060408201526a37b9103832b73234b7339760a91b606082015260800190565b60208082526033908201527f5472616465204465706f736974207265717565737420616c726561647920707260408201527237b1b2b9b9b2b21037b9103832b73234b7339760691b606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b6001815b6001841115613be557808504811115613bc957613bc9613b96565b6001841615613bd757908102905b60019390931c928002613bae565b935093915050565b5f82613bfb575060016106a3565b81613c0757505f6106a3565b8160018114613c1d5760028114613c2757613c43565b60019150506106a3565b60ff841115613c3857613c38613b96565b50506001821b6106a3565b5060208310610133831016604e8410600b8410161715613c66575081810a6106a3565b613c725f198484613baa565b805f1904821115613c8557613c85613b96565b029392505050565b5f61326060ff841683613bed565b80820281158282048414176106a3576106a3613b96565b60208082526024908201527f546f6b656e20616d6f756e74206d7573742062652067726561746572207468616040820152633710181760e11b606082015260800190565b634e487b7160e01b5f52603260045260245ffd5b601f82111561188c57805f5260205f20601f840160051c81016020851015613d2f5750805b601f840160051c820191505b81811015611a37575f8155600101613d3b565b81516001600160401b03811115613d6757613d6761368a565b613d7b81613d758454613aaa565b84613d0a565b6020601f821160018114613dad575f8315613d965750848201515b5f19600385901b1c1916600184901b178455611a37565b5f84815260208120601f198516915b82811015613ddc5787850151825560209485019460019092019101613dbc565b5084821015613df957868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52602160045260245ffd5b6001600160401b038616815260a060208201525f613e3d60a0830187613607565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b5f60208284031215613e74575f5ffd5b5051919050565b63ffffffff919091168152604060208201819052601a908201527f5265717565737420616c72656164792070726f6365737365642e000000000000606082015260800190565b63ffffffff9190911681526040602082018190526023908201527f436861696e6c696e6b2046756e6374696f6e732072657175657374206661696c60608201526232b21760e91b608082015260a00190565b808201808211156106a3576106a3613b96565b818103818111156106a3576106a3613b96565b5f82613f5357634e487b7160e01b5f52601260045260245ffd5b500690565b5f6132608383613bed56fec1fff0986e72f6dce748d6b0fbb04269f665faa12565de163ddf6a3ba4dc401f993f09aa220d54af7e62a7beddf108ebbb3e91aa8c7f7b16a0e5c6b98a37d9f4a26469706673582212207f9a7fc9c5758060a6f65229544229b11f1992f49f7b03d1a0896e54a7842dc264736f6c634300081d0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNCONTRACTTOKENS = "burnContractTokens";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DEPOSITWITHPERMIT = "depositWithPermit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FUNCTIONSSUBSCRIPTIONS = "functionsSubscriptions";

    public static final String FUNC_HANDLEORACLEFULFILLMENT = "handleOracleFulfillment";

    public static final String FUNC_INVESTMENTKEY = "investmentKey";

    public static final String FUNC_INVESTMENTRECORD = "investmentRecord";

    public static final String FUNC_MININVESTMENTAMOUNT = "minInvestmentAmount";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NONCES = "nonces";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PERMIT = "permit";

    public static final String FUNC_PROJECTID = "projectId";

    public static final String FUNC_REGISTERASCONSUMER = "registerAsConsumer";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REQUESTINVESTMENT = "requestInvestment";

    public static final String FUNC_REQUESTTRADE = "requestTrade";

    public static final String FUNC_SETLOCKUP = "setLockup";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALINVESTMENTAMOUNT = "totalInvestmentAmount";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TOTALTOKENAMOUNT = "totalTokenAmount";

    public static final String FUNC_TRADEKEY = "tradeKey";

    public static final String FUNC_TRADERECORD = "tradeRecord";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERTOKENSFROMCONTRACT = "transferTokensFromContract";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INVESTMENTFAILED_EVENT = new Event("InvestmentFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INVESTMENTREQUESTED_EVENT = new Event("InvestmentRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INVESTMENTSUCCESSFUL_EVENT = new Event("InvestmentSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTFULFILLED_EVENT = new Event("RequestFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event REQUESTSENT_EVENT = new Event("RequestSent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event TRADEFAILED_EVENT = new Event("TradeFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRADEREQUESTED_EVENT = new Event("TradeRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRADESUCCESSFUL_EVENT = new Event("TradeSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InvestmentFailedEventResponse> getInvestmentFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, transactionReceipt);
        ArrayList<InvestmentFailedEventResponse> responses = new ArrayList<InvestmentFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentFailedEventResponse getInvestmentFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, log);
        InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentFailedEventFromLog(log));
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTFAILED_EVENT));
        return investmentFailedEventFlowable(filter);
    }

    public static List<InvestmentRequestedEventResponse> getInvestmentRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, transactionReceipt);
        ArrayList<InvestmentRequestedEventResponse> responses = new ArrayList<InvestmentRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentRequestedEventResponse getInvestmentRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, log);
        InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentRequestedEventFromLog(log));
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTREQUESTED_EVENT));
        return investmentRequestedEventFlowable(filter);
    }

    public static List<InvestmentSuccessfulEventResponse> getInvestmentSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<InvestmentSuccessfulEventResponse> responses = new ArrayList<InvestmentSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentSuccessfulEventResponse getInvestmentSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, log);
        InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentSuccessfulEventFromLog(log));
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTSUCCESSFUL_EVENT));
        return investmentSuccessfulEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<RequestFulfilledEventResponse> getRequestFulfilledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, transactionReceipt);
        ArrayList<RequestFulfilledEventResponse> responses = new ArrayList<RequestFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestFulfilledEventResponse getRequestFulfilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, log);
        RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestFulfilledEventFromLog(log));
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTFULFILLED_EVENT));
        return requestFulfilledEventFlowable(filter);
    }

    public static List<RequestSentEventResponse> getRequestSentEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, transactionReceipt);
        ArrayList<RequestSentEventResponse> responses = new ArrayList<RequestSentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestSentEventResponse typedResponse = new RequestSentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestSentEventResponse getRequestSentEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, log);
        RequestSentEventResponse typedResponse = new RequestSentEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestSentEventFromLog(log));
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSENT_EVENT));
        return requestSentEventFlowable(filter);
    }

    public static List<TradeFailedEventResponse> getTradeFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, transactionReceipt);
        ArrayList<TradeFailedEventResponse> responses = new ArrayList<TradeFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeFailedEventResponse getTradeFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, log);
        TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeFailedEventFromLog(log));
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEFAILED_EVENT));
        return tradeFailedEventFlowable(filter);
    }

    public static List<TradeRequestedEventResponse> getTradeRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, transactionReceipt);
        ArrayList<TradeRequestedEventResponse> responses = new ArrayList<TradeRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeRequestedEventResponse getTradeRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, log);
        TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeRequestedEventFromLog(log));
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEREQUESTED_EVENT));
        return tradeRequestedEventFlowable(filter);
    }

    public static List<TradeSuccessfulEventResponse> getTradeSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<TradeSuccessfulEventResponse> responses = new ArrayList<TradeSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeSuccessfulEventResponse getTradeSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, log);
        TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeSuccessfulEventFromLog(log));
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADESUCCESSFUL_EVENT));
        return tradeSuccessfulEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnContractTokens(BigInteger _amount) {
        final Function function = new Function(
                FUNC_BURNCONTRACTTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> depositWithPermit(String _tradeId, String _seller,
            String _buyer, BigInteger _tokenAmount, BigInteger deadline, BigInteger v, byte[] r,
            byte[] s) {
        final Function function = new Function(
                FUNC_DEPOSITWITHPERMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_tradeId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.Address(160, _buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain(
            ) {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> functionsSubscriptions() {
        final Function function = new Function(FUNC_FUNCTIONSSUBSCRIPTIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOracleFulfillment(byte[] requestId,
            byte[] response, byte[] err) {
        final Function function = new Function(
                FUNC_HANDLEORACLEFULFILLMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId), 
                new org.web3j.abi.datatypes.DynamicBytes(response), 
                new org.web3j.abi.datatypes.DynamicBytes(err)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> investmentKey(byte[] param0) {
        final Function function = new Function(FUNC_INVESTMENTKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, Boolean>> investmentRecord(String param0) {
        final Function function = new Function(FUNC_INVESTMENTRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, Boolean>>(function,
                new Callable<Tuple3<String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> minInvestmentAmount() {
        final Function function = new Function(FUNC_MININVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> nonces(String owner) {
        final Function function = new Function(FUNC_NONCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> permit(String owner, String spender,
            BigInteger value, BigInteger deadline, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_PERMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> projectId() {
        final Function function = new Function(FUNC_PROJECTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> registerAsConsumer() {
        final Function function = new Function(
                FUNC_REGISTERASCONSUMER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestInvestment(String _investmentId,
            String _buyer, BigInteger _tokenAmount) {
        final Function function = new Function(
                FUNC_REQUESTINVESTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_investmentId), 
                new org.web3j.abi.datatypes.Address(160, _buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestTrade(String _tradeId, String _seller,
            String _buyer, BigInteger _tokenAmount) {
        final Function function = new Function(
                FUNC_REQUESTTRADE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_tradeId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.Address(160, _buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLockup(String _account,
            BigInteger _unlockTime) {
        final Function function = new Function(
                FUNC_SETLOCKUP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account), 
                new org.web3j.abi.datatypes.generated.Uint256(_unlockTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalInvestmentAmount() {
        final Function function = new Function(FUNC_TOTALINVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalTokenAmount() {
        final Function function = new Function(FUNC_TOTALTOKENAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tradeKey(byte[] param0) {
        final Function function = new Function(FUNC_TRADEKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<String, String, BigInteger, Boolean, Boolean>> tradeRecord(
            String param0) {
        final Function function = new Function(FUNC_TRADERECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, BigInteger, Boolean, Boolean>>(function,
                new Callable<Tuple5<String, String, BigInteger, Boolean, Boolean>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, Boolean, Boolean> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, Boolean, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferTokensFromContract(String _to,
            BigInteger _amount) {
        final Function function = new Function(
                FUNC_TRANSFERTOKENSFROMCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _router, BigInteger _subscriptionId,
            byte[] _donId, String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _router, BigInteger _subscriptionId,
            byte[] _donId, String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InvestmentFailedEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] investmentId;

        public byte[] chainlinkRequestId;

        public BigInteger status;

        public String reason;
    }

    public static class InvestmentRequestedEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] investmentId;

        public byte[] chainlinkRequestId;

        public String buyer;

        public BigInteger tokenAmount;
    }

    public static class InvestmentSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] investmentId;

        public byte[] chainlinkRequestId;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RequestFulfilledEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class RequestSentEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class TradeFailedEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] tradeId;

        public byte[] chainlinkRequestId;

        public BigInteger status;

        public String reason;
    }

    public static class TradeRequestedEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] tradeId;

        public byte[] chainlinkRequestId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;
    }

    public static class TradeSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] tradeId;

        public byte[] chainlinkRequestId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
