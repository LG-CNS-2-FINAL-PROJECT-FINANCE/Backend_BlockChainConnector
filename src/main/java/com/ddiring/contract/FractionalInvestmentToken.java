package com.ddiring.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.13.0.
 */
@SuppressWarnings("rawtypes")
public class FractionalInvestmentToken extends Contract {
    public static final String BINARY = "610200604052348015610010575f5ffd5b506040516157cd3803806157cd83398101604081905261002f91610755565b84338a80604051806040016040528060018152602001603160f81b8152508d8d816003908161005e91906108dc565b50600461006b82826108dc565b5061007b9150839050600561036b565b6101205261008a81600661036b565b61014052815160208084019190912060e052815190820120610100524660a05261011660e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600160a01b03811661014e57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6101578161039d565b506001600160a01b0316610160525f86116101cd5760405162461bcd60e51b815260206004820152603060248201527f4d696e696d756d20696e766573746d656e7420616d6f756e74206d757374206260448201526f0652067726561746572207468616e20360841b6064820152608401610145565b858710156102435760405162461bcd60e51b815260206004820152603560248201527f546f74616c20676f616c206d757374206265206174206c65617374206d696e6960448201527f6d756d20696e766573746d656e7420616d6f756e7400000000000000000000006064820152608401610145565b61024d86886109aa565b156102cc5760405162461bcd60e51b815260206004820152604360248201527f546f74616c20676f616c206d75737420626520706572666563746c792064697660448201527f697369626c65206279206d696e696d756d20696e766573746d656e7420616d6f6064820152621d5b9d60ea1b608482015260a401610145565b6101808a90526101a08790526101c08690526102e886886109d1565b6101e052600980546001600160401b038616600160a01b026001600160e01b03199091166001600160a01b03881617179055600a839055600b61032b83826108dc565b50600c61033882826108dc565b5061035c306103496012600a610ac7565b6101e0516103579190610adc565b6103ee565b50505050505050505050610b5e565b5f6020835110156103865761037f83610426565b9050610397565b8161039184826108dc565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382166104175760405163ec442f0560e01b81525f6004820152602401610145565b6104225f8383610463565b5050565b5f5f829050601f81511115610450578260405163305a27a960e01b81526004016101459190610af3565b805161045b82610b28565b179392505050565b6001600160a01b03831615610551576001600160a01b0383165f908152601360205260409020544210156104e55760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b6064820152608401610145565b6104f8600854600160a01b900460ff1690565b156105515760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b6064820152608401610145565b61055c838383610561565b505050565b6001600160a01b03831661058b578060025f8282546105809190610b4b565b909155506105fb9050565b6001600160a01b0383165f90815260208190526040902054818110156105dd5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610145565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661061757600280548290039055610635565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161067a91815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126106aa575f5ffd5b81516001600160401b038111156106c3576106c3610687565b604051601f8201601f19908116603f011681016001600160401b03811182821017156106f1576106f1610687565b604052818152838201602001851015610708575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b80516001600160a01b038116811461073a575f5ffd5b919050565b80516001600160401b038116811461073a575f5ffd5b5f5f5f5f5f5f5f5f5f5f6101408b8d03121561076f575f5ffd5b8a5160208c0151909a506001600160401b0381111561078c575f5ffd5b6107988d828e0161069b565b60408d0151909a5090506001600160401b038111156107b5575f5ffd5b6107c18d828e0161069b565b60608d015160808e0151919a50985096506107e0905060a08c01610724565b94506107ee60c08c0161073f565b60e08c01516101008d015191955093506001600160401b03811115610811575f5ffd5b61081d8d828e0161069b565b6101208d015190935090506001600160401b0381111561083b575f5ffd5b6108478d828e0161069b565b9150509295989b9194979a5092959850565b600181811c9082168061086d57607f821691505b60208210810361088b57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561055c57805f5260205f20601f840160051c810160208510156108b65750805b601f840160051c820191505b818110156108d5575f81556001016108c2565b5050505050565b81516001600160401b038111156108f5576108f5610687565b610909816109038454610859565b84610891565b6020601f82116001811461093b575f83156109245750848201515b5f19600385901b1c1916600184901b1784556108d5565b5f84815260208120601f198516915b8281101561096a578785015182556020948501946001909201910161094a565b508482101561098757868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52601260045260245ffd5b5f826109b8576109b8610996565b500690565b634e487b7160e01b5f52601160045260245ffd5b5f826109df576109df610996565b500490565b6001815b6001841115610a1f57808504811115610a0357610a036109bd565b6001841615610a1157908102905b60019390931c9280026109e8565b935093915050565b5f82610a3557506001610397565b81610a4157505f610397565b8160018114610a575760028114610a6157610a7d565b6001915050610397565b60ff841115610a7257610a726109bd565b50506001821b610397565b5060208310610133831016604e8410600b8410161715610aa0575081810a610397565b610aac5f1984846109e4565b805f1904821115610abf57610abf6109bd565b029392505050565b5f610ad560ff841683610a27565b9392505050565b8082028115828204841417610397576103976109bd565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b8051602080830151919081101561088b575f1960209190910360031b1b16919050565b80820180821115610397576103976109bd565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051614b2f610c9e5f395f61023201525f61035301525f61053401525f818161032c0152818161140301528181611445015281816119b4015281816119f601528181612891015281816128c00152818161291d0152818161294c01528181612a6401528181612a9301528181612b3601528181612b7801528181612be201528181612c1101528181612c9901528181612cc801528181612d5101528181612d8001528181612dd001528181612dff01528181612f3301528181612f7501528181612fcd01528181612ffc0152818161305b015261308a01525f818161078f015261265a01525f61233701525f61230a01525f61213e01525f61211601525f61207101525f61209b01525f6120c50152614b2f5ff3fe608060405234801561000f575f5ffd5b5060043610610229575f3560e01c8063715018a61161012a578063a9059cbb116100b4578063d505accf11610079578063d505accf14610662578063dcd9cb6f14610675578063dd62ed3e14610688578063e08f5638146106c0578063f2fde38b146106c8575f5ffd5b8063a9059cbb1461051c578063b1504a881461052f578063b38374b714610556578063cb021d5114610579578063d0973af81461064f575f5ffd5b806384b0196e116100fa57806384b0196e146104ae5780638da5cb5b146104c957806395d89b41146104ee5780639d212a18146104f6578063a4108ecb14610509575f5ffd5b8063715018a6146104785780637ecebe00146104805780637f17cef7146104935780638456cb59146104a6575f5ffd5b80633666cec5116101b65780635ba6947f1161017b5780635ba6947f146103755780635c8ecf53146103e35780635c975abb146104405780635d0371461461045257806370a0823114610465575f5ffd5b80633666cec5146102f95780633e5793071461030c5780633f4ba83a1461031f5780633fafa127146103275780634d298a071461034e575f5ffd5b806318160ddd116101fc57806318160ddd146102b457806323b872dd146102bc5780632d873e15146102cf578063313ce567146102e25780633644e515146102f1575f5ffd5b80630337b3aa1461022d57806306fdde0314610267578063095ea7b31461027c5780630ca761751461029f575b5f5ffd5b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61026f6106db565b60405161025e9190613b89565b61028f61028a366004613bb6565b61076b565b604051901515815260200161025e565b6102b26102ad366004613cbb565b610784565b005b600254610254565b61028f6102ca366004613d26565b610807565b61026f6102dd366004613d60565b61082a565b6040516012815260200161025e565b6102546108db565b6102b2610307366004613d90565b6108e9565b6102b261031a366004613bb6565b610b81565b6102b2610bfe565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6103bc610383366004613e0f565b8051602081830181018051600f825292820191909301209152805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b039094168452602084019290925215159082015260600161025e565b6104216103f1366004613e0f565b8051602081830181018051601082529282019190930120915280546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520161025e565b600854600160a01b900460ff1661028f565b6102b2610460366004613e48565b610c10565b610254610473366004613e5f565b610c25565b6102b2610c3f565b61025461048e366004613e5f565b610c50565b61026f6104a1366004613e48565b610c6d565b6102b2610c85565b6104b6610c95565b60405161025e9796959493929190613e78565b6008546001600160a01b03165b6040516001600160a01b03909116815260200161025e565b61026f610cd7565b6102b2610504366004613f0e565b610ce6565b6102b2610517366004613fcf565b61148d565b61028f61052a366004613bb6565b611a33565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b610569610564366004613e0f565b611a40565b60405161025e9493929190614106565b610602610587366004613e0f565b80516020818301810180516011825292820193820193909320919092526040805160608101825282546001600160a01b039081168252600184015482860152600284015460ff908116151583850152835180850190945260038501549091168352600484015494830194909452600590920154919290911683565b6040805184516001600160a01b03908116825260208087015181840152958301511515928201929092528351909116606082015292909101516080830152151560a082015260c00161025e565b6102b261065d366004613bb6565b611b08565b6102b261067036600461413f565b611b77565b6009546104d6906001600160a01b031681565b61025461069636600461416c565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6102b2611cad565b6102b26106d6366004613e5f565b611d24565b6060600380546106ea9061419d565b80601f01602080910402602001604051908101604052809291908181526020018280546107169061419d565b80156107615780601f1061073857610100808354040283529160200191610761565b820191905f5260205f20905b81548152906001019060200180831161074457829003601f168201915b5050505050905090565b5f33610778818585611d5e565b60019150505b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107cd5760405163c6829f8360e01b815260040160405180910390fd5b6107d8838383611d70565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6905f90a2505050565b5f33610814858285611f92565b61081f858585612008565b506001949350505050565b600e602052815f5260405f208181548110610843575f80fd5b905f5260205f20015f9150915050805461085c9061419d565b80601f01602080910402602001604051908101604052809291908181526020018280546108889061419d565b80156108d35780601f106108aa576101008083540402835291602001916108d3565b820191905f5260205f20905b8154815290600101906020018083116108b657829003601f168201915b505050505081565b5f6108e4612065565b905090565b6108f161218e565b6108f96121bb565b600f8760405161090991906141ec565b9081526040519081900360200190206002015460ff161561098d5760405162461bcd60e51b815260206004820152603360248201527f5472616465204465706f736974207265717565737420616c726561647920707260448201527237b1b2b9b9b2b21037b9103832b73234b7339760691b60648201526084015b60405180910390fd5b6001600160a01b0386166109df5760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b9b2b99031b0b73737ba103132903d32b9379760391b6044820152606401610984565b5f8511610a415760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e7320746f207472616e73666572206d75737420626520677265617460448201526932b9103a3430b710181760b11b6064820152608401610984565b5f610a4e6012600a6142ee565b610a5890876142fc565b905080610a6488610c25565b1015610ac25760405162461bcd60e51b815260206004820152602760248201527f53656c6c6572277320746f6b656e2062616c616e636520697320696e7375666660448201526634b1b4b2b73a1760c91b6064820152608401610984565b610ad187308388888888611b77565b610adc873083612008565b86600f89604051610aed91906141ec565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091558690600f90610b2d908b906141ec565b9081526020016040518091039020600101819055506001600f89604051610b5491906141ec565b908152604051908190036020019020600201805491151560ff199092169190911790555050505050505050565b610b8961218e565b428111610be35760405162461bcd60e51b815260206004820152602260248201527f556e6c6f636b2074696d65206d75737420626520696e20746865206675747572604482015261329760f11b6064820152608401610984565b6001600160a01b039091165f90815260136020526040902055565b610c0661218e565b610c0e6121e6565b565b610c1861218e565b610c22308261223b565b50565b6001600160a01b03165f9081526020819052604090205490565b610c4761218e565b610c0e5f61226f565b6001600160a01b0381165f9081526007602052604081205461077e565b60126020525f90815260409020805461085c9061419d565b610c8d61218e565b610c0e6122c0565b5f6060805f5f5f6060610ca6612303565b610cae612330565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6060600480546106ea9061419d565b610cee61218e565b610cf66121bb565b601187604051610d0691906141ec565b9081526040519081900360200190206005015460ff1615610d7d5760405162461bcd60e51b815260206004820152602b60248201527f5472616465207265717565737420616c72656164792070726f6365737365642060448201526a37b9103832b73234b7339760a91b6064820152608401610984565b600f86604051610d8d91906141ec565b9081526040519081900360200190206002015460ff16610e0a5760405162461bcd60e51b815260206004820152603260248201527f5472616465204465706f7369742072657175657374206973206e6f742070726f60448201527131b2b9b9b2b21037b9103832b73234b7339760711b6064820152608401610984565b6001600160a01b03821615801590610e2a57506001600160a01b03851615155b610e725760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b9b2b99031b0b73737ba103132903d32b9379760391b6044820152606401610984565b5f84118015610e8057505f81115b610e9c5760405162461bcd60e51b815260040161098490614313565b838114610efe5760405162461bcd60e51b815260206004820152602a60248201527f42757920616e642053656c6c20616d6f756e7473206d757374206d61746368206044820152693337b9103a3930b2329760b11b6064820152608401610984565b600f86604051610f0e91906141ec565b908152604051908190036020019020546001600160a01b03868116911614610f8a5760405162461bcd60e51b815260206004820152602960248201527f53656c6c657220646f6573206e6f74206d61746368207472616e73616374696f6044820152686e20686973746f727960b81b6064820152608401610984565b600f86604051610f9a91906141ec565b90815260200160405180910390206001015484146110115760405162461bcd60e51b815260206004820152602e60248201527f53656c6c20616d6f756e7420646f6573206e6f74206d61746368207472616e7360448201526d616374696f6e20686973746f727960901b6064820152608401610984565b5f600c805461101f9061419d565b9050116110655760405162461bcd60e51b815260206004820152601460248201527329b7bab931b29031b7b232903737ba1039b2ba1760611b6044820152606401610984565b6110716012600a6142ee565b61107b90856142fc565b61108430610c25565b10156110fa576040805162461bcd60e51b81526020600482015260248101919091527f436f6e747261637420686f6c64696e6720616d6f756e7420697320696e73756660448201527f66696369656e74207468616e20547261646520546f6b656e20416d6f756e742e6064820152608401610984565b8160108460405161110b91906141ec565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b031990931692909217909155819060109061114b9086906141ec565b908152602001604051809103902060010181905550600f8660405161117091906141ec565b908152602001604051809103902060118860405161118e91906141ec565b908152604051908190036020018120825481546001600160a01b0319166001600160a01b03909116178155600180840154908201556002928301549201805460ff909316151560ff19909316929092179091556010906111ef9085906141ec565b908152602001604051809103902060118860405161120d91906141ec565b90815260405190819003602001812082546003820180546001600160a01b0319166001600160a01b039092169190911790556001909201546004909201919091555f9060119061125e908a906141ec565b9081526040805160209281900383018120600501805460ff19169415159490941790935560e0830181525f80845291830182905282015260608082018190526080820181905260a0820181905260c082015261134b600c80546112c09061419d565b80601f01602080910402602001604051908101604052809291908181526020018280546112ec9061419d565b80156113375780601f1061130e57610100808354040283529160200191611337565b820191905f5260205f20905b81548152906001019060200180831161131a57829003601f168201915b50505050508261235d90919063ffffffff16565b6040805160018082528183019092525f91816020015b606081526020019060019003908161136157905050905088815f8151811061138b5761138b614357565b60209081029190910101526113a08282612369565b5f6113cf6113ad84612392565b600960149054906101000a90046001600160401b0316620493e0600a54612656565b5f8181526012602052604090209091506113e98b826143af565b50808a6040516113f991906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007f589bd8c058cd521b9d0ee152b14a61da92077f0114e35b76ac9d9176b0ad7e547f00000000000000000000000000000000000000000000000000000000000000008e8d8b8e604051611479959493929190614469565b60405180910390a450505050505050505050565b61149561218e565b61149d6121bb565b5f81516001600160401b038111156114b7576114b7613bde565b6040519080825280602002602001820160405280156114ea57816020015b60608152602001906001900390816114d55790505b5090505f82516001600160401b0381111561150757611507613bde565b60405190808252806020026020018201604052801561153a57816020015b60608152602001906001900390816115255790505b5090505f5b835181101561176057600d84828151811061155c5761155c614357565b60200260200101515f015160405161157491906141ec565b9081526040519081900360200190206003015460ff16156115ed5760405162461bcd60e51b815260206004820152602d60248201527f496e697469616c207265717565737420616c72656164792070726f636573736560448201526c321037b9103832b73234b7339760991b6064820152608401610984565b5f6001600160a01b031684828151811061160957611609614357565b6020026020010151602001516001600160a01b03160361166b5760405162461bcd60e51b815260206004820152601d60248201527f427579657220616464726573732063616e6e6f74206265207a65726f2e0000006044820152606401610984565b5f84828151811061167e5761167e614357565b602002602001015160400151116116a75760405162461bcd60e51b815260040161098490614313565b6116b36012600a6142ee565b8482815181106116c5576116c5614357565b6020026020010151604001516116db91906142fc565b6116e430610c25565b10156117585760405162461bcd60e51b815260206004820152603760248201527f4e6f7420656e6f75676820746f6b656e7320696e20636f6e747261637420666f60448201527f72207468697320696e697469616c20726571756573742e0000000000000000006064820152608401610984565b60010161153f565b505f5b83518110156119275783818151811061177e5761177e614357565b602002602001015160200151600d85838151811061179e5761179e614357565b60200260200101515f01516040516117b691906141ec565b90815260200160405180910390206001015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055508381815181106117fc576117fc614357565b602002602001015160400151600d85838151811061181c5761181c614357565b60200260200101515f015160405161183491906141ec565b9081526020016040518091039020600201819055505f84828151811061185c5761185c614357565b60200260200101515f015185838151811061187957611879614357565b60200260200101516020015186848151811061189757611897614357565b6020026020010151604001516040516020016118b5939291906144a5565b6040516020818303038152906040529050808483815181106118d9576118d9614357565b60200260200101819052508482815181106118f6576118f6614357565b60200260200101515f015183838151811061191357611913614357565b602090810291909101015250600101611763565b506119666040805160e08101909152805f81526020015f81526020015f8152602001606081526020016060815260200160608152602001606081525090565b611976600b80546112c09061419d565b6119808184612369565b5f61198d6113ad83612392565b5f818152600e6020908152604090912085519293506119b0929091860190613a72565b50807f00000000000000000000000000000000000000000000000000000000000000007f88dd8d46f665018a2a09127133b628777e643d4988d6a99ddae27c46a4770b107f000000000000000000000000000000000000000000000000000000000000000088604051611a249291906144e9565b60405180910390a35050505050565b5f33610778818585612008565b8051602081830181018051600d82529282019190930120915280548190611a669061419d565b80601f0160208091040260200160405190810160405280929190818152602001828054611a929061419d565b8015611add5780601f10611ab457610100808354040283529160200191611add565b820191905f5260205f20905b815481529060010190602001808311611ac057829003601f168201915b505050506001830154600284015460039094015492936001600160a01b039091169290915060ff1684565b611b1061218e565b80611b1a30610c25565b1015611b685760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e747261637420746f6b656e732e0000006044820152606401610984565b611b73308383612008565b5050565b83421115611b9b5760405163313c898160e11b815260048101859052602401610984565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888611be68c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f611c4082612723565b90505f611c4f8287878761274f565b9050896001600160a01b0316816001600160a01b031614611c96576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610984565b611ca18a8a8a611d5e565b50505050505050505050565b611cb561218e565b600954604051631cd0704360e21b8152600160a01b82046001600160401b031660048201523060248201526001600160a01b0390911690637341c10c906044015f604051808303815f87803b158015611d0c575f5ffd5b505af1158015611d1e573d5f5f3e3d5ffd5b50505050565b611d2c61218e565b6001600160a01b038116611d5557604051631e4fbdf760e01b81525f6004820152602401610984565b610c228161226f565b611d6b838383600161277b565b505050565b5f838152600e6020908152604080832080548251818502810185019093528083529192909190849084015b82821015611e43578382905f5260205f20018054611db89061419d565b80601f0160208091040260200160405190810160405280929190818152602001828054611de49061419d565b8015611e2f5780601f10611e0657610100808354040283529160200191611e2f565b820191905f5260205f20905b815481529060010190602001808311611e1257829003601f168201915b505050505081526020019060010190611d9b565b5050505090505f60125f8681526020019081526020015f208054611e669061419d565b80601f0160208091040260200160405190810160405280929190818152602001828054611e929061419d565b8015611edd5780601f10611eb457610100808354040283529160200191611edd565b820191905f5260205f20905b815481529060010190602001808311611ec057829003601f168201915b505050505090505f81511115611efe57611ef98582868661284d565b611f8b565b815115611f43575f5b8251811015611f3d57611f3586848381518110611f2657611f26614357565b60200260200101518787612d0d565b600101611f07565b50611f8b565b60405162461bcd60e51b815260206004820152601c60248201527f556e6b6e6f776e20436861696e6c696e6b2072657175657374204944000000006044820152606401610984565b5050505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f19811015611d1e5781811015611ffa57604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610984565b611d1e84848484035f61277b565b6001600160a01b03831661203157604051634b637e8f60e11b81525f6004820152602401610984565b6001600160a01b03821661205a5760405163ec442f0560e01b81525f6004820152602401610984565b611d6b8383836130cd565b5f306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156120bd57507f000000000000000000000000000000000000000000000000000000000000000046145b156120e757507f000000000000000000000000000000000000000000000000000000000000000090565b6108e4604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b6008546001600160a01b03163314610c0e5760405163118cdaa760e01b8152336004820152602401610984565b600854600160a01b900460ff1615610c0e5760405163d93c066560e01b815260040160405180910390fd5b6121ee6131c0565b6008805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03821661226457604051634b637e8f60e11b81525f6004820152602401610984565b611b73825f836130cd565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6122c86121bb565b6008805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861221e3390565b60606108e47f000000000000000000000000000000000000000000000000000000000000000060056131ea565b60606108e47f000000000000000000000000000000000000000000000000000000000000000060066131ea565b611b73825f5f84613293565b80515f0361238a5760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60605f6123a0610100613310565b90506123d96040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b8152508261333090919063ffffffff16565b82516123f79060028111156123f0576123f0614588565b8290613349565b6040805180820190915260088152676c616e677561676560c01b6020820152612421908290613330565b60408301516124389080156123f0576123f0614588565b604080518082019091526006815265736f7572636560d01b6020820152612460908290613330565b6060830151612470908290613330565b60a083015151156124fb576040805180820190915260048152636172677360e01b60208201526124a1908290613330565b6124aa81613382565b5f5b8360a00151518110156124f1576124e98460a0015182815181106124d2576124d2614357565b60200260200101518361333090919063ffffffff16565b6001016124ac565b506124fb816133a6565b608083015151156125be575f8360200151600281111561251d5761251d614588565b0361253b5760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b602082015261256c908290613330565b612585836020015160028111156123f0576123f0614588565b6040805180820190915260078152667365637265747360c81b60208201526125ae908290613330565b60808301516125be9082906133c4565b60c0830151511561264e5760408051808201909152600981526862797465734172677360b81b60208201526125f4908290613330565b6125fd81613382565b5f5b8360c00151518110156126445761263c8460c00151828151811061262557612625614357565b6020026020010151836133c490919063ffffffff16565b6001016125ff565b5061264e816133a6565b515192915050565b5f5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b81526004016126ad95949392919061459c565b6020604051808303815f875af11580156126c9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126ed91906145e4565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8905f90a295945050505050565b5f61077e61272f612065565b8360405161190160f01b8152600281019290925260228201526042902090565b5f5f5f5f61275f888888886133d1565b92509250925061276f8282613499565b50909695505050505050565b6001600160a01b0384166127a45760405163e602df0560e01b81525f6004820152602401610984565b6001600160a01b0383166127cd57604051634a1406b160e11b81525f6004820152602401610984565b6001600160a01b038085165f9081526001602090815260408083209387168352929052208290558015611d1e57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161283f91815260200190565b60405180910390a350505050565b60118360405161285d91906141ec565b9081526040519081900360200190206005015460ff16156128fd57838360405161288791906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614ada5f395f51905f527f0000000000000000000000000000000000000000000000000000000000000000875f6040516128f0939291906145fb565b60405180910390a4611d1e565b80511561297d57838360405161291391906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614ada5f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008760016040516128f093929190614660565b5f60118460405161298e91906141ec565b908152604051908190036020018120546001600160a01b031691505f906011906129b99087906141ec565b908152604051908190036020018120600301546001600160a01b031691505f906011906129e79088906141ec565b9081526040519081900360200190206001015490505f612a05601290565b612a1090600a6142ee565b612a1a90836142fc565b90505f86806020019051810190612a3191906145e4565b905080600103612bb95781612a4530610c25565b1015612ade578888604051612a5a91906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614ada5f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008c6002604051612ac4939291906146d1565b60405180910390a4612ad4610c85565b5050505050611d1e565b612ae9308584612008565b6001601189604051612afb91906141ec565b908152604051908190036020018120600501805492151560ff19909316929092179091558990612b2c908a906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007fe4daf0cc7a61dd6ad790d55a15d78530cae3c88af6fd51fa88885a1c75911bea7f00000000000000000000000000000000000000000000000000000000000000008c8a8a8a604051612bac95949392919061474f565b60405180910390a4612d02565b81612bc330610c25565b1015612c42578888604051612bd891906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614ada5f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008c6002604051612ac4939291906147c7565b612c4d308684612008565b5f601189604051612c5e91906141ec565b908152604051908190036020018120600201805492151560ff19909316929092179091558990612c8f908a906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614ada5f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008c6003604051612cf993929190614866565b60405180910390a45b505050505050505050565b600d83604051612d1d91906141ec565b9081526040519081900360200190206003015460ff1615612db0578383604051612d4791906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614aba5f395f51905f527f0000000000000000000000000000000000000000000000000000000000000000875f6040516128f0939291906145fb565b805115612e30578383604051612dc691906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614aba5f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008760016040516128f093929190614660565b5f600d84604051612e4191906141ec565b908152604051908190036020018120600101546001600160a01b031691505f90600d90612e6f9087906141ec565b90815260200160405180910390206002015490505f84806020019051810190612e9891906145e4565b90508060010361304257612eae6012600a6142ee565b612eb890836142fc565b612ec130610c25565b10612fb457612ee63084612ed76012600a6142ee565b612ee190866142fc565b612008565b6001600d87604051612ef891906141ec565b908152604051908190036020018120600301805492151560ff19909316929092179091558790612f299088906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007f67a14b8953fe4619174debb9fe0581a67af9a1f4703b50e5e70fc32774dc3e147f00000000000000000000000000000000000000000000000000000000000000008a8888604051612fa794939291906148fc565b60405180910390a46130c4565b8686604051612fc391906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614aba5f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008a600260405161302d9392919061496c565b60405180910390a461303d610c85565b6130c4565b868660405161305191906141ec565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f516020614aba5f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008a60036040516130bb939291906149f7565b60405180910390a45b50505050505050565b6001600160a01b038316156131b5576001600160a01b0383165f9081526013602052604090205442101561314f5760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b6064820152608401610984565b600854600160a01b900460ff16156131b55760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b6064820152608401610984565b611d6b838383613551565b600854600160a01b900460ff16610c0e57604051638dfc202b60e01b815260040160405180910390fd5b606060ff8314613204576131fd83613677565b905061077e565b8180546132109061419d565b80601f016020809104026020016040519081016040528092919081815260200182805461323c9061419d565b80156132875780601f1061325e57610100808354040283529160200191613287565b820191905f5260205f20905b81548152906001019060200180831161326a57829003601f168201915b5050505050905061077e565b80515f036132b4576040516322ce3edd60e01b815260040160405180910390fd5b838360028111156132c7576132c7614588565b908160028111156132da576132da614588565b905250604084018280156132f0576132f0614588565b9081801561330057613300614588565b9052506060909301929092525050565b613318613ac6565b805161332490836136b4565b505f6020820152919050565b61333d8260038351613728565b8151611d6b9082613841565b81516133569060c2613868565b50611b73828260405160200161336e91815260200190565b6040516020818303038152906040526133c4565b61338d8160046138cf565b6001816020018181516133a09190614a69565b90525050565b6133b18160076138cf565b6001816020018181516133a09190614a7c565b61333d8260028351613728565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561340a57505f9150600390508261348f565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561345b573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b03811661348657505f92506001915082905061348f565b92505f91508190505b9450945094915050565b5f8260038111156134ac576134ac614588565b036134b5575050565b60018260038111156134c9576134c9614588565b036134e75760405163f645eedf60e01b815260040160405180910390fd5b60028260038111156134fb576134fb614588565b0361351c5760405163fce698f760e01b815260048101829052602401610984565b600382600381111561353057613530614588565b03611b73576040516335e2f38360e21b815260048101829052602401610984565b6001600160a01b03831661357b578060025f8282546135709190614a69565b909155506135eb9050565b6001600160a01b0383165f90815260208190526040902054818110156135cd5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610984565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661360757600280548290039055613625565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161366a91815260200190565b60405180910390a3505050565b60605f613683836138e6565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b60408051808201909152606081525f60208201526136d3602083614a8f565b156136fb576136e3602083614a8f565b6136ee906020614a7c565b6136f89083614a69565b91505b60208084018390526040518085525f815290818401018181101561371d575f5ffd5b604052509192915050565b6017816001600160401b03161161374e578251611d1e9060e0600585901b168317613868565b60ff816001600160401b03161161378e578251613776906018611fe0600586901b1617613868565b508251611d1e906001600160401b038316600161390d565b61ffff816001600160401b0316116137cf5782516137b7906019611fe0600586901b1617613868565b508251611d1e906001600160401b038316600261390d565b63ffffffff816001600160401b0316116138125782516137fa90601a611fe0600586901b1617613868565b508251611d1e906001600160401b038316600461390d565b825161382990601b611fe0600586901b1617613868565b508251611d1e906001600160401b038316600861390d565b60408051808201909152606081525f60208201526138618383845161398f565b9392505050565b60408051808201909152606081525f60208201528251515f61388b826001614a69565b9050846020015182106138ac576138ac856138a78360026142fc565b613a5b565b84516020838201018581535080518211156138c5578181525b5093949350505050565b8151611d6b90601f611fe0600585901b1617613868565b5f60ff8216601f81111561077e57604051632cd44ac360e21b815260040160405180910390fd5b60408051808201909152606081525f60208201528351515f61392f8285614a69565b9050856020015181111561394c5761394c866138a78360026142fc565b5f600161395b86610100614aae565b6139659190614a7c565b90508651828101878319825116178152508051831115613983578281525b50959695505050505050565b60408051808201909152606081525f602082015282518211156139b0575f5ffd5b8351515f6139be8483614a69565b905085602001518111156139db576139db866138a78360026142fc565b85518051838201602001915f91808511156139f4578482525b505050602086015b60208610613a345780518252613a13602083614a69565b9150613a20602082614a69565b9050613a2d602087614a7c565b95506139fc565b5181515f1960208890036101000a0190811690199190911617905250849150509392505050565b8151613a6783836136b4565b50611d1e8382613841565b828054828255905f5260205f20908101928215613ab6579160200282015b82811115613ab65782518290613aa690826143af565b5091602001919060010190613a90565b50613ac2929150613af9565b5090565b6040518060400160405280613aed6040518060400160405280606081526020015f81525090565b81526020015f81525090565b80821115613ac2575f613b0c8282613b15565b50600101613af9565b508054613b219061419d565b5f825580601f10613b30575050565b601f0160209004905f5260205f2090810190610c2291905b80821115613ac2575f8155600101613b48565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6138616020830184613b5b565b80356001600160a01b0381168114613bb1575f5ffd5b919050565b5f5f60408385031215613bc7575f5ffd5b613bd083613b9b565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b0381118282101715613c1457613c14613bde565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613c4257613c42613bde565b604052919050565b5f82601f830112613c59575f5ffd5b8135602083015f5f6001600160401b03841115613c7857613c78613bde565b50601f8301601f1916602001613c8d81613c1a565b915050828152858383011115613ca1575f5ffd5b828260208301375f92810160200192909252509392505050565b5f5f5f60608486031215613ccd575f5ffd5b8335925060208401356001600160401b03811115613ce9575f5ffd5b613cf586828701613c4a565b92505060408401356001600160401b03811115613d10575f5ffd5b613d1c86828701613c4a565b9150509250925092565b5f5f5f60608486031215613d38575f5ffd5b613d4184613b9b565b9250613d4f60208501613b9b565b929592945050506040919091013590565b5f5f60408385031215613d71575f5ffd5b50508035926020909101359150565b803560ff81168114613bb1575f5ffd5b5f5f5f5f5f5f5f60e0888a031215613da6575f5ffd5b87356001600160401b03811115613dbb575f5ffd5b613dc78a828b01613c4a565b975050613dd660208901613b9b565b95506040880135945060608801359350613df260808901613d80565b9699959850939692959460a0840135945060c09093013592915050565b5f60208284031215613e1f575f5ffd5b81356001600160401b03811115613e34575f5ffd5b613e4084828501613c4a565b949350505050565b5f60208284031215613e58575f5ffd5b5035919050565b5f60208284031215613e6f575f5ffd5b61386182613b9b565b60ff60f81b8816815260e060208201525f613e9660e0830189613b5b565b8281036040840152613ea88189613b5b565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015613efd578351835260209384019390920191600101613edf565b50909b9a5050505050505050505050565b5f5f5f5f5f5f5f60e0888a031215613f24575f5ffd5b87356001600160401b03811115613f39575f5ffd5b613f458a828b01613c4a565b97505060208801356001600160401b03811115613f60575f5ffd5b613f6c8a828b01613c4a565b965050613f7b60408901613b9b565b94506060880135935060808801356001600160401b03811115613f9c575f5ffd5b613fa88a828b01613c4a565b935050613fb760a08901613b9b565b96999598509396929591949193505060c09091013590565b5f60208284031215613fdf575f5ffd5b81356001600160401b03811115613ff4575f5ffd5b8201601f81018413614004575f5ffd5b80356001600160401b0381111561401d5761401d613bde565b8060051b61402d60208201613c1a565b91825260208184018101929081019087841115614048575f5ffd5b6020850192505b838310156140fb5782356001600160401b0381111561406c575f5ffd5b85016080818a03601f19011215614081575f5ffd5b614089613bf2565b60208201356001600160401b038111156140a1575f5ffd5b6140b08b602083860101613c4a565b8252506140bf60408301613b9b565b6020820152606082013560408201526080909101359081151582146140e2575f5ffd5b606081019190915282526020928301929091019061404f565b979650505050505050565b608081525f6141186080830187613b5b565b6001600160a01b039590951660208301525060408101929092521515606090910152919050565b5f5f5f5f5f5f5f60e0888a031215614155575f5ffd5b61415e88613b9b565b9650613dd660208901613b9b565b5f5f6040838503121561417d575f5ffd5b61418683613b9b565b915061419460208401613b9b565b90509250929050565b600181811c908216806141b157607f821691505b6020821081036141cf57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f81518060208401855e5f93019283525090919050565b5f61386182846141d5565b634e487b7160e01b5f52601160045260245ffd5b6001815b60018411156142465780850481111561422a5761422a6141f7565b600184161561423857908102905b60019390931c92800261420f565b935093915050565b5f8261425c5750600161077e565b8161426857505f61077e565b816001811461427e5760028114614288576142a4565b600191505061077e565b60ff841115614299576142996141f7565b50506001821b61077e565b5060208310610133831016604e8410600b84101617156142c7575081810a61077e565b6142d35f19848461420b565b805f19048211156142e6576142e66141f7565b029392505050565b5f61386160ff84168361424e565b808202811582820484141761077e5761077e6141f7565b60208082526024908201527f546f6b656e20616d6f756e74206d7573742062652067726561746572207468616040820152633710181760e11b606082015260800190565b634e487b7160e01b5f52603260045260245ffd5b601f821115611d6b57805f5260205f20601f840160051c810160208510156143905750805b601f840160051c820191505b81811015611f8b575f815560010161439c565b81516001600160401b038111156143c8576143c8613bde565b6143dc816143d6845461419d565b8461436b565b6020601f82116001811461440e575f83156143f75750848201515b5f19600385901b1c1916600184901b178455611f8b565b5f84815260208120601f198516915b8281101561443d578785015182556020948501946001909201910161441d565b508482101561445a57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b85815260a060208201525f61448160a0830187613b5b565b6001600160a01b039586166040840152939094166060820152608001529392505050565b5f6144b082866141d5565b600b60fa1b80825260609590951b6bffffffffffffffffffffffff19166001820152601581019490945250506016820152603601919050565b5f604082018483526040602084015280845180835260608501915060608160051b8601019250602086015f5b8281101561457b57605f19878603018452815180516080875261453b6080880182613b5b565b6020838101516001600160a01b031689820152604080850151908a0152606093840151151593909801929092525094938401939190910190600101614515565b5092979650505050505050565b634e487b7160e01b5f52602160045260245ffd5b6001600160401b038616815260a060208201525f6145bd60a0830187613b5b565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b5f602082840312156145f4575f5ffd5b5051919050565b838152608060208201525f6146136080830185613b5b565b63ffffffff841660408401528281036060840152601a81527f5265717565737420616c72656164792070726f6365737365642e000000000000602082015260408101915050949350505050565b838152608060208201525f6146786080830185613b5b565b63ffffffff841660408401528281036060840152602381527f436861696e6c696e6b2046756e6374696f6e732072657175657374206661696c60208201526232b21760e91b604082015260608101915050949350505050565b838152608060208201525f6146e96080830185613b5b565b63ffffffff841660408401528281036060840152603081527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060208201526f363c903337b9103a3930b739b332b91760811b604082015260608101915050949350505050565b85815260c060208201525f61476760c0830187613b5b565b6001600160a01b0395861660408481019190915294909516606083015250608081019190915280830360a090910152601b82527f4f66662d636861696e207075726368617365207665726966696564000000000060208301520192915050565b838152608060208201525f6147df6080830185613b5b565b63ffffffff841660408401528281036060840152604b81527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060208201527f6c7920666f7220726566756e642e20436865636b2070726576696f757320747260408201526a30b739b0b1ba34b7b7399760a91b606082015260808101915050949350505050565b838152608060208201525f61487e6080830185613b5b565b63ffffffff841660408401528281036060840152604281527f4f66662d636861696e20707572636861736520766572696669636174696f6e2060208201527f6661696c65642e20546f6b656e732072657475726e656420746f2073656c6c65604082015261391760f11b606082015260808101915050949350505050565b84815260a060208201525f61491460a0830186613b5b565b6001600160a01b0394909416604083810191909152606083019390935250808303608090910152601882527f496e697469616c207061796d656e74207665726966696564000000000000000060208301520192915050565b838152608060208201525f6149846080830185613b5b565b63ffffffff841660408401528281036060840152603881527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060208201527f6c7920666f7220696e697469616c207472616e736665722e0000000000000000604082015260608101915050949350505050565b838152608060208201525f614a0f6080830185613b5b565b63ffffffff841660408401528281036060840152602481527f496e697469616c207061796d656e7420766572696669636174696f6e206661696020820152633632b21760e11b604082015260608101915050949350505050565b8082018082111561077e5761077e6141f7565b8181038181111561077e5761077e6141f7565b5f82614aa957634e487b7160e01b5f52601260045260245ffd5b500690565b5f613861838361424e56fe5759fa17f0d605fd6a905f331dc2ae12c328873085c3441c157e1796c1cd36d12dfcb2476bc2e81a958dd81dfa7a79706863a91222e955e4bb156eebac161fa5a2646970667358221220f7f5076e9ff21d9ae78b7c9ad194c5c0448a114f27a4b12430435bc4ac43250b64736f6c634300081d0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNCONTRACTTOKENS = "burnContractTokens";

    public static final String FUNC_BUYRECORD = "buyRecord";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DEPOSITWITHPERMIT = "depositWithPermit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FUNCTIONSSUBSCRIPTIONS = "functionsSubscriptions";

    public static final String FUNC_HANDLEORACLEFULFILLMENT = "handleOracleFulfillment";

    public static final String FUNC_INVESTMENTKEY = "investmentKey";

    public static final String FUNC_INVESTMENTRECORD = "investmentRecord";

    public static final String FUNC_MININVESTMENTAMOUNT = "minInvestmentAmount";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NONCES = "nonces";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PERMIT = "permit";

    public static final String FUNC_PROJECTID = "projectId";

    public static final String FUNC_REGISTERASCONSUMER = "registerAsConsumer";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REQUESTINVESTMENT = "requestInvestment";

    public static final String FUNC_REQUESTTRADE = "requestTrade";

    public static final String FUNC_SELLRECORD = "sellRecord";

    public static final String FUNC_SETLOCKUP = "setLockup";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALINVESTMENTAMOUNT = "totalInvestmentAmount";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TOTALTOKENAMOUNT = "totalTokenAmount";

    public static final String FUNC_TRADEKEY = "tradeKey";

    public static final String FUNC_TRADERECORD = "tradeRecord";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERTOKENSFROMCONTRACT = "transferTokensFromContract";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INVESTMENTFAILED_EVENT = new Event("InvestmentFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INVESTMENTREQUESTED_EVENT = new Event("InvestmentRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<investment>>() {}));
    ;

    public static final Event INVESTMENTSUCCESSFUL_EVENT = new Event("InvestmentSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTFULFILLED_EVENT = new Event("RequestFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event REQUESTSENT_EVENT = new Event("RequestSent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event TRADEFAILED_EVENT = new Event("TradeFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRADEREQUESTED_EVENT = new Event("TradeRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRADESUCCESSFUL_EVENT = new Event("TradeSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InvestmentFailedEventResponse> getInvestmentFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, transactionReceipt);
        ArrayList<InvestmentFailedEventResponse> responses = new ArrayList<InvestmentFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentFailedEventResponse getInvestmentFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, log);
        InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentFailedEventFromLog(log));
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTFAILED_EVENT));
        return investmentFailedEventFlowable(filter);
    }

    public static List<InvestmentRequestedEventResponse> getInvestmentRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, transactionReceipt);
        ArrayList<InvestmentRequestedEventResponse> responses = new ArrayList<InvestmentRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentList = (List<investment>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentRequestedEventResponse getInvestmentRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, log);
        InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentList = (List<investment>) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentRequestedEventFromLog(log));
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTREQUESTED_EVENT));
        return investmentRequestedEventFlowable(filter);
    }

    public static List<InvestmentSuccessfulEventResponse> getInvestmentSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<InvestmentSuccessfulEventResponse> responses = new ArrayList<InvestmentSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentSuccessfulEventResponse getInvestmentSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, log);
        InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentSuccessfulEventFromLog(log));
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTSUCCESSFUL_EVENT));
        return investmentSuccessfulEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<RequestFulfilledEventResponse> getRequestFulfilledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, transactionReceipt);
        ArrayList<RequestFulfilledEventResponse> responses = new ArrayList<RequestFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestFulfilledEventResponse getRequestFulfilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, log);
        RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestFulfilledEventFromLog(log));
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTFULFILLED_EVENT));
        return requestFulfilledEventFlowable(filter);
    }

    public static List<RequestSentEventResponse> getRequestSentEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, transactionReceipt);
        ArrayList<RequestSentEventResponse> responses = new ArrayList<RequestSentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestSentEventResponse typedResponse = new RequestSentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestSentEventResponse getRequestSentEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, log);
        RequestSentEventResponse typedResponse = new RequestSentEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestSentEventFromLog(log));
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSENT_EVENT));
        return requestSentEventFlowable(filter);
    }

    public static List<TradeFailedEventResponse> getTradeFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, transactionReceipt);
        ArrayList<TradeFailedEventResponse> responses = new ArrayList<TradeFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeFailedEventResponse getTradeFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, log);
        TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeFailedEventFromLog(log));
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEFAILED_EVENT));
        return tradeFailedEventFlowable(filter);
    }

    public static List<TradeRequestedEventResponse> getTradeRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, transactionReceipt);
        ArrayList<TradeRequestedEventResponse> responses = new ArrayList<TradeRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeRequestedEventResponse getTradeRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, log);
        TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeRequestedEventFromLog(log));
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEREQUESTED_EVENT));
        return tradeRequestedEventFlowable(filter);
    }

    public static List<TradeSuccessfulEventResponse> getTradeSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<TradeSuccessfulEventResponse> responses = new ArrayList<TradeSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeSuccessfulEventResponse getTradeSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, log);
        TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeSuccessfulEventFromLog(log));
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADESUCCESSFUL_EVENT));
        return tradeSuccessfulEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnContractTokens(BigInteger _amount) {
        final Function function = new Function(
                FUNC_BURNCONTRACTTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> buyRecord(String param0) {
        final Function function = new Function(FUNC_BUYRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> depositWithPermit(String _sellId, String _seller,
            BigInteger _sellAmount, BigInteger deadline, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_DEPOSITWITHPERMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_sellId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.generated.Uint256(_sellAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain(
            ) {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> functionsSubscriptions() {
        final Function function = new Function(FUNC_FUNCTIONSSUBSCRIPTIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOracleFulfillment(byte[] requestId,
            byte[] response, byte[] err) {
        final Function function = new Function(
                FUNC_HANDLEORACLEFULFILLMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId), 
                new org.web3j.abi.datatypes.DynamicBytes(response), 
                new org.web3j.abi.datatypes.DynamicBytes(err)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> investmentKey(byte[] param0, BigInteger param1) {
        final Function function = new Function(FUNC_INVESTMENTKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<String, String, BigInteger, Boolean>> investmentRecord(
            String param0) {
        final Function function = new Function(FUNC_INVESTMENTRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, BigInteger, Boolean>>(function,
                new Callable<Tuple4<String, String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> minInvestmentAmount() {
        final Function function = new Function(FUNC_MININVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> nonces(String owner) {
        final Function function = new Function(FUNC_NONCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> permit(String owner, String spender,
            BigInteger value, BigInteger deadline, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_PERMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> projectId() {
        final Function function = new Function(FUNC_PROJECTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> registerAsConsumer() {
        final Function function = new Function(
                FUNC_REGISTERASCONSUMER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestInvestment(List<investment> _investments) {
        final Function function = new Function(
                FUNC_REQUESTINVESTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<investment>(investment.class, _investments)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestTrade(String _tradeId, String _sellId,
            String _seller, BigInteger _sellAmount, String _buyId, String _buyer,
            BigInteger _buyAmount) {
        final Function function = new Function(
                FUNC_REQUESTTRADE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_tradeId), 
                new org.web3j.abi.datatypes.Utf8String(_sellId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.generated.Uint256(_sellAmount), 
                new org.web3j.abi.datatypes.Utf8String(_buyId), 
                new org.web3j.abi.datatypes.Address(160, _buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_buyAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, Boolean>> sellRecord(String param0) {
        final Function function = new Function(FUNC_SELLRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, Boolean>>(function,
                new Callable<Tuple3<String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setLockup(String _account,
            BigInteger _unlockTime) {
        final Function function = new Function(
                FUNC_SETLOCKUP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account), 
                new org.web3j.abi.datatypes.generated.Uint256(_unlockTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalInvestmentAmount() {
        final Function function = new Function(FUNC_TOTALINVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalTokenAmount() {
        final Function function = new Function(FUNC_TOTALTOKENAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tradeKey(byte[] param0) {
        final Function function = new Function(FUNC_TRADEKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<sell, buy, Boolean>> tradeRecord(String param0) {
        final Function function = new Function(FUNC_TRADERECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<sell>() {}, new TypeReference<buy>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<sell, buy, Boolean>>(function,
                new Callable<Tuple3<sell, buy, Boolean>>() {
                    @Override
                    public Tuple3<sell, buy, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<sell, buy, Boolean>(
                                (sell) results.get(0), 
                                (buy) results.get(1), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferTokensFromContract(String _to,
            BigInteger _amount) {
        final Function function = new Function(
                FUNC_TRANSFERTOKENSFROMCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _router, BigInteger _subscriptionId,
            byte[] _donId, String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _router, BigInteger _subscriptionId,
            byte[] _donId, String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class investment extends DynamicStruct {
        public String investId;

        public String investmentor;

        public BigInteger tokenAmount;

        public Boolean processState;

        public investment(String investId, String investmentor, BigInteger tokenAmount,
                Boolean processState) {
            super(new org.web3j.abi.datatypes.Utf8String(investId), 
                    new org.web3j.abi.datatypes.Address(160, investmentor), 
                    new org.web3j.abi.datatypes.generated.Uint256(tokenAmount), 
                    new org.web3j.abi.datatypes.Bool(processState));
            this.investId = investId;
            this.investmentor = investmentor;
            this.tokenAmount = tokenAmount;
            this.processState = processState;
        }

        public investment(Utf8String investId, Address investmentor, Uint256 tokenAmount,
                Bool processState) {
            super(investId, investmentor, tokenAmount, processState);
            this.investId = investId.getValue();
            this.investmentor = investmentor.getValue();
            this.tokenAmount = tokenAmount.getValue();
            this.processState = processState.getValue();
        }
    }

    public static class sell extends StaticStruct {
        public String seller;

        public BigInteger sellAmount;

        public Boolean depositState;

        public sell(String seller, BigInteger sellAmount, Boolean depositState) {
            super(new org.web3j.abi.datatypes.Address(160, seller), 
                    new org.web3j.abi.datatypes.generated.Uint256(sellAmount), 
                    new org.web3j.abi.datatypes.Bool(depositState));
            this.seller = seller;
            this.sellAmount = sellAmount;
            this.depositState = depositState;
        }

        public sell(Address seller, Uint256 sellAmount, Bool depositState) {
            super(seller, sellAmount, depositState);
            this.seller = seller.getValue();
            this.sellAmount = sellAmount.getValue();
            this.depositState = depositState.getValue();
        }
    }

    public static class buy extends StaticStruct {
        public String buyer;

        public BigInteger buyAmount;

        public buy(String buyer, BigInteger buyAmount) {
            super(new org.web3j.abi.datatypes.Address(160, buyer), 
                    new org.web3j.abi.datatypes.generated.Uint256(buyAmount));
            this.buyer = buyer;
            this.buyAmount = buyAmount;
        }

        public buy(Address buyer, Uint256 buyAmount) {
            super(buyer, buyAmount);
            this.buyer = buyer.getValue();
            this.buyAmount = buyAmount.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InvestmentFailedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] investmentIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String investmentId;

        public BigInteger status;

        public String reason;
    }

    public static class InvestmentRequestedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public List<investment> investmentList;
    }

    public static class InvestmentSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] investmentIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String investmentId;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RequestFulfilledEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class RequestSentEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class TradeFailedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public BigInteger status;

        public String reason;
    }

    public static class TradeRequestedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;
    }

    public static class TradeSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
