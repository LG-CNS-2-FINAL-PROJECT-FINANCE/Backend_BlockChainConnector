package com.ddiring.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.13.0.
 */
@SuppressWarnings("rawtypes")
public class FractionalInvestmentToken extends Contract {
    public static final String BINARY = "610200604052348015610010575f5ffd5b5060405161634f38038061634f83398101604081905261002f91610755565b84338a80604051806040016040528060018152602001603160f81b8152508d8d816003908161005e91906108dc565b50600461006b82826108dc565b5061007b9150839050600561036b565b6101205261008a81600661036b565b61014052815160208084019190912060e052815190820120610100524660a05261011660e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600160a01b03811661014e57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6101578161039d565b506001600160a01b0316610160525f86116101cd5760405162461bcd60e51b815260206004820152603060248201527f4d696e696d756d20696e766573746d656e7420616d6f756e74206d757374206260448201526f0652067726561746572207468616e20360841b6064820152608401610145565b858710156102435760405162461bcd60e51b815260206004820152603560248201527f546f74616c20676f616c206d757374206265206174206c65617374206d696e6960448201527f6d756d20696e766573746d656e7420616d6f756e7400000000000000000000006064820152608401610145565b61024d86886109aa565b156102cc5760405162461bcd60e51b815260206004820152604360248201527f546f74616c20676f616c206d75737420626520706572666563746c792064697660448201527f697369626c65206279206d696e696d756d20696e766573746d656e7420616d6f6064820152621d5b9d60ea1b608482015260a401610145565b6101808a90526101a08790526101c08690526102e886886109d1565b6101e052600980546001600160401b038616600160a01b026001600160e01b03199091166001600160a01b03881617179055600a839055600b61032b83826108dc565b50600c61033882826108dc565b5061035c306103496012600a610ac7565b6101e0516103579190610adc565b6103ee565b50505050505050505050610b5e565b5f6020835110156103865761037f83610426565b9050610397565b8161039184826108dc565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382166104175760405163ec442f0560e01b81525f6004820152602401610145565b6104225f8383610463565b5050565b5f5f829050601f81511115610450578260405163305a27a960e01b81526004016101459190610af3565b805161045b82610b28565b179392505050565b6001600160a01b03831615610551576001600160a01b0383165f908152601360205260409020544210156104e55760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b6064820152608401610145565b6104f8600854600160a01b900460ff1690565b156105515760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b6064820152608401610145565b61055c838383610561565b505050565b6001600160a01b03831661058b578060025f8282546105809190610b4b565b909155506105fb9050565b6001600160a01b0383165f90815260208190526040902054818110156105dd5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610145565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661061757600280548290039055610635565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161067a91815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126106aa575f5ffd5b81516001600160401b038111156106c3576106c3610687565b604051601f8201601f19908116603f011681016001600160401b03811182821017156106f1576106f1610687565b604052818152838201602001851015610708575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b80516001600160a01b038116811461073a575f5ffd5b919050565b80516001600160401b038116811461073a575f5ffd5b5f5f5f5f5f5f5f5f5f5f6101408b8d03121561076f575f5ffd5b8a5160208c0151909a506001600160401b0381111561078c575f5ffd5b6107988d828e0161069b565b60408d0151909a5090506001600160401b038111156107b5575f5ffd5b6107c18d828e0161069b565b60608d015160808e0151919a50985096506107e0905060a08c01610724565b94506107ee60c08c0161073f565b60e08c01516101008d015191955093506001600160401b03811115610811575f5ffd5b61081d8d828e0161069b565b6101208d015190935090506001600160401b0381111561083b575f5ffd5b6108478d828e0161069b565b9150509295989b9194979a5092959850565b600181811c9082168061086d57607f821691505b60208210810361088b57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561055c57805f5260205f20601f840160051c810160208510156108b65750805b601f840160051c820191505b818110156108d5575f81556001016108c2565b5050505050565b81516001600160401b038111156108f5576108f5610687565b610909816109038454610859565b84610891565b6020601f82116001811461093b575f83156109245750848201515b5f19600385901b1c1916600184901b1784556108d5565b5f84815260208120601f198516915b8281101561096a578785015182556020948501946001909201910161094a565b508482101561098757868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52601260045260245ffd5b5f826109b8576109b8610996565b500690565b634e487b7160e01b5f52601160045260245ffd5b5f826109df576109df610996565b500490565b6001815b6001841115610a1f57808504811115610a0357610a036109bd565b6001841615610a1157908102905b60019390931c9280026109e8565b935093915050565b5f82610a3557506001610397565b81610a4157505f610397565b8160018114610a575760028114610a6157610a7d565b6001915050610397565b60ff841115610a7257610a726109bd565b50506001821b610397565b5060208310610133831016604e8410600b8410161715610aa0575081810a610397565b610aac5f1984846109e4565b805f1904821115610abf57610abf6109bd565b029392505050565b5f610ad560ff841683610a27565b9392505050565b8082028115828204841417610397576103976109bd565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b8051602080830151919081101561088b575f1960209190910360031b1b16919050565b80820180821115610397576103976109bd565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516156db610c745f395f61023d01525f61035e01525f61052701525f8181610337015281816112f7015281816113390152818161199c015281816119de01528181612e9e01528181612f6201528181613027015281816130f9015281816131ce01528181613298015281816133a0015281816133cf01528181613474015281816134a301528181613580015281816135c20152818161365c0152818161368b01528181613730015261375f01525f81816106e20152612b9301525f6127cb01525f61279e01525f6125d201525f6125aa01525f61250501525f61252f01525f61255901526156db5ff3fe608060405234801561000f575f5ffd5b5060043610610234575f3560e01c8063715018a611610135578063b1504a88116100b4578063dcd9cb6f11610079578063dcd9cb6f146105b5578063dd62ed3e146105c8578063e08f563814610600578063f2fde38b14610608578063f72c4db41461061b575f5ffd5b8063b1504a8814610522578063b38374b714610549578063cb021d511461056c578063d0973af81461058f578063d505accf146105a2575f5ffd5b80638da5cb5b116100fa5780638da5cb5b146104bc57806395d89b41146104e15780639dd33054146104e9578063a76fa7c8146104fc578063a9059cbb1461050f575f5ffd5b8063715018a61461046b5780637ecebe00146104735780637f17cef7146104865780638456cb591461049957806384b0196e146104a1575f5ffd5b80633666cec5116101c15780635ba6947f116101865780635ba6947f146103805780635c8ecf53146103d65780635c975abb146104335780635d0371461461044557806370a0823114610458575f5ffd5b80633666cec5146103045780633e579307146103175780633f4ba83a1461032a5780633fafa127146103325780634d298a0714610359575f5ffd5b806318160ddd1161020757806318160ddd146102bf57806323b872dd146102c75780632d873e15146102da578063313ce567146102ed5780633644e515146102fc575f5ffd5b80630337b3aa1461023857806306fdde0314610272578063095ea7b3146102875780630ca76175146102aa575b5f5ffd5b61025f7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61027a61062e565b60405161026991906144a9565b61029a6102953660046144d6565b6106be565b6040519015158152602001610269565b6102bd6102b83660046145db565b6106d7565b005b60025461025f565b61029a6102d5366004614646565b61075a565b61027a6102e8366004614680565b61077d565b60405160128152602001610269565b61025f61082e565b6102bd6103123660046146b0565b61083c565b6102bd6103253660046144d6565b610afa565b6102bd610b77565b61025f7f000000000000000000000000000000000000000000000000000000000000000081565b61025f7f000000000000000000000000000000000000000000000000000000000000000081565b6103c761038e36600461472f565b8051602081830181018051600f825292820191909301209152805460018201546002909201546001600160a01b03909116919060ff1683565b60405161026993929190614794565b6104146103e436600461472f565b8051602081830181018051601082529282019190930120915280546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610269565b600854600160a01b900460ff1661029a565b6102bd6104533660046147b8565b610b89565b61025f6104663660046147cf565b610b9e565b6102bd610bb8565b61025f6104813660046147cf565b610bc9565b61027a6104943660046147b8565b610be6565b6102bd610bfe565b6104a9610c0e565b60405161026997969594939291906147e8565b6008546001600160a01b03165b6040516001600160a01b039091168152602001610269565b61027a610c50565b6102bd6104f73660046148a0565b610c5f565b6102bd61050a3660046149c1565b611376565b61029a61051d3660046144d6565b611a26565b61025f7f000000000000000000000000000000000000000000000000000000000000000081565b61055c61055736600461472f565b611a33565b6040516102699493929190614a63565b61057f61057a36600461472f565b611afb565b6040516102699493929190614aa3565b6102bd61059d3660046144d6565b611c3e565b6102bd6105b0366004614add565b611cad565b6009546104c9906001600160a01b031681565b61025f6105d6366004614b0a565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6102bd611de3565b6102bd6106163660046147cf565b611e5a565b6102bd6106293660046146b0565b611e94565b60606003805461063d90614b3b565b80601f016020809104026020016040519081016040528092919081815260200182805461066990614b3b565b80156106b45780601f1061068b576101008083540402835291602001916106b4565b820191905f5260205f20905b81548152906001019060200180831161069757829003601f168201915b5050505050905090565b5f336106cb81858561218b565b60019150505b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107205760405163c6829f8360e01b815260040160405180910390fd5b61072b83838361219d565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6905f90a2505050565b5f33610767858285612426565b61077285858561249c565b506001949350505050565b600e602052815f5260405f208181548110610796575f80fd5b905f5260205f20015f915091505080546107af90614b3b565b80601f01602080910402602001604051908101604052809291908181526020018280546107db90614b3b565b80156108265780601f106107fd57610100808354040283529160200191610826565b820191905f5260205f20905b81548152906001019060200180831161080957829003601f168201915b505050505081565b5f6108376124f9565b905090565b610844612622565b61084c61264f565b5f600f8860405161085d9190614b8a565b90815260405190819003602001902060029081015460ff169081111561088557610885614760565b146108f35760405162461bcd60e51b815260206004820152603360248201527f5472616465204465706f736974207265717565737420616c726561647920707260448201527237b1b2b9b9b2b21037b9103832b73234b7339760691b60648201526084015b60405180910390fd5b6001600160a01b0386166109455760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b9b2b99031b0b73737ba103132903d32b9379760391b60448201526064016108ea565b5f85116109a75760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e7320746f207472616e73666572206d75737420626520677265617460448201526932b9103a3430b710181760b11b60648201526084016108ea565b5f6109b46012600a614c8c565b6109be9087614c9a565b9050806109ca88610b9e565b1015610a285760405162461bcd60e51b815260206004820152602760248201527f53656c6c6572277320746f6b656e2062616c616e636520697320696e7375666660448201526634b1b4b2b73a1760c91b60648201526084016108ea565b610a3787308388888888611cad565b610a4287308361249c565b86600f89604051610a539190614b8a565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091558690600f90610a93908b90614b8a565b9081526020016040518091039020600101819055506002600f89604051610aba9190614b8a565b90815260200160405180910390206002015f6101000a81548160ff02191690836002811115610aeb57610aeb614760565b02179055505050505050505050565b610b02612622565b428111610b5c5760405162461bcd60e51b815260206004820152602260248201527f556e6c6f636b2074696d65206d75737420626520696e20746865206675747572604482015261329760f11b60648201526084016108ea565b6001600160a01b039091165f90815260136020526040902055565b610b7f612622565b610b8761267a565b565b610b91612622565b610b9b30826126cf565b50565b6001600160a01b03165f9081526020819052604090205490565b610bc0612622565b610b875f612703565b6001600160a01b0381165f908152600760205260408120546106d1565b60126020525f9081526040902080546107af90614b3b565b610c06612622565b610b87612754565b5f6060805f5f5f6060610c1f612797565b610c276127c4565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461063d90614b3b565b610c67612622565b610c6f61264f565b5f81516001600160401b03811115610c8957610c896144fe565b604051908082528060200260200182016040528015610cbc57816020015b6060815260200190600190039081610ca75790505b5090505f82516001600160401b03811115610cd957610cd96144fe565b604051908082528060200260200182016040528015610d0c57816020015b6060815260200190600190039081610cf75790505b5090505f5b8351811015610f80575f600d858381518110610d2f57610d2f614cb1565b60200260200101515f0151604051610d479190614b8a565b9081526040519081900360200190206003015460ff166002811115610d6e57610d6e614760565b14610dd15760405162461bcd60e51b815260206004820152602d60248201527f496e697469616c207265717565737420616c72656164792070726f636573736560448201526c321037b9103832b73234b7339760991b60648201526084016108ea565b5f6001600160a01b0316848281518110610ded57610ded614cb1565b6020026020010151602001516001600160a01b031603610e4f5760405162461bcd60e51b815260206004820152601d60248201527f427579657220616464726573732063616e6e6f74206265207a65726f2e00000060448201526064016108ea565b5f848281518110610e6257610e62614cb1565b60200260200101516040015111610ec75760405162461bcd60e51b8152602060048201526024808201527f546f6b656e20616d6f756e74206d7573742062652067726561746572207468616044820152633710181760e11b60648201526084016108ea565b610ed36012600a614c8c565b848281518110610ee557610ee5614cb1565b602002602001015160400151610efb9190614c9a565b610f0430610b9e565b1015610f785760405162461bcd60e51b815260206004820152603760248201527f4e6f7420656e6f75676820746f6b656e7320696e20636f6e747261637420666f60448201527f72207468697320696e697469616c20726571756573742e00000000000000000060648201526084016108ea565b600101610d11565b505f5b83518110156111bd576040518060800160405280858381518110610fa957610fa9614cb1565b60200260200101515f01518152602001858381518110610fcb57610fcb614cb1565b6020026020010151602001516001600160a01b03168152602001858381518110610ff757610ff7614cb1565b60200260200101516040015181526020016001600281111561101b5761101b614760565b815250600d85838151811061103257611032614cb1565b60200260200101515f015160405161104a9190614b8a565b908152604051908190036020019020815181906110679082614d09565b506020820151816001015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015f6101000a81548160ff021916908360028111156110c7576110c7614760565b02179055509050505f8482815181106110e2576110e2614cb1565b60200260200101515f015161111386848151811061110257611102614cb1565b6020026020010151602001516127f1565b61113987858151811061112857611128614cb1565b602002602001015160400151612807565b60405160200161114b93929190614dc3565b60405160208183030381529060405290508084838151811061116f5761116f614cb1565b602002602001018190525084828151811061118c5761118c614cb1565b60200260200101515f01518383815181106111a9576111a9614cb1565b602090810291909101015250600101610f83565b506111fc6040805160e08101909152805f81526020015f81526020015f8152602001606081526020016060815260200160608152602001606081525090565b611297600b805461120c90614b3b565b80601f016020809104026020016040519081016040528092919081815260200182805461123890614b3b565b80156112835780601f1061125a57610100808354040283529160200191611283565b820191905f5260205f20905b81548152906001019060200180831161126657829003601f168201915b50505050508261289690919063ffffffff16565b6112a181846128a2565b5f6112d06112ae836128cb565b600960149054906101000a90046001600160401b0316620493e0600a54612b8f565b5f818152600e6020908152604090912085519293506112f3929091860190614392565b50807f00000000000000000000000000000000000000000000000000000000000000007fa981463756a2b775a81250f195c9c3e9e2d4a5b7be948f3f5306fb9f0ada77c57f000000000000000000000000000000000000000000000000000000000000000086604051611367929190614e02565b60405180910390a35050505050565b61137e612622565b61138661264f565b5f6011886040516113979190614b8a565b9081526040519081900360200190206003015460ff1660028111156113be576113be614760565b1461141f5760405162461bcd60e51b815260206004820152602b60248201527f5472616465207265717565737420616c72656164792070726f6365737365642060448201526a37b9103832b73234b7339760a91b60648201526084016108ea565b6002600f876040516114319190614b8a565b90815260405190819003602001902060029081015460ff169081111561145957611459614760565b146114c15760405162461bcd60e51b815260206004820152603260248201527f5472616465204465706f7369742072657175657374206973206e6f742070726f60448201527131b2b9b9b2b21037b9103832b73234b7339760711b60648201526084016108ea565b6001600160a01b038316158015906114e157506001600160a01b03851615155b6115295760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b9b2b99031b0b73737ba103132903d32b9379760391b60448201526064016108ea565b600f866040516115399190614b8a565b908152604051908190036020019020546001600160a01b038681169116146115b55760405162461bcd60e51b815260206004820152602960248201527f53656c6c657220646f6573206e6f74206d61746368207472616e73616374696f6044820152686e20686973746f727960b81b60648201526084016108ea565b600f866040516115c59190614b8a565b90815260200160405180910390206001015482111561163f5760405162461bcd60e51b815260206004820152603060248201527f4465706f73697420416d6f756e74206d7573742062652062696767657220746860448201526f30b7102a3930b2329020b6b7bab73a1760811b60648201526084016108ea565b61164b6012600a614c8c565b6116559083614c9a565b61165e30610b9e565b10156116d4576040805162461bcd60e51b81526020600482015260248101919091527f436f6e747261637420686f6c64696e6720616d6f756e7420697320696e73756660448201527f66696369656e74207468616e20547261646520546f6b656e20416d6f756e742e60648201526084016108ea565b5f600c80546116e290614b3b565b9050116117285760405162461bcd60e51b815260206004820152601460248201527329b7bab931b29031b7b232903737ba1039b2ba1760611b60448201526064016108ea565b826010856040516117399190614b8a565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091558290601090611779908790614b8a565b9081526020016040518091039020600101819055508560118860405161179f9190614b8a565b908152604051908190036020019020906117b99082614d09565b50836011886040516117cb9190614b8a565b908152602001604051809103902060010190816117e89190614d09565b50806011886040516117fa9190614b8a565b90815260200160405180910390206002018190555060016011886040516118219190614b8a565b908152604051908190036020019020600301805460ff1916600183600281111561184d5761184d614760565b02179055506118906040805160e08101909152805f81526020015f81526020015f8152602001606081526020016060815260200160608152602001606081525090565b6118a0600c805461120c90614b3b565b60408051600480825260a082019092525f91816020015b60608152602001906001900390816118b757905050905088815f815181106118e1576118e1614cb1565b6020026020010181905250858160018151811061190057611900614cb1565b6020026020010181905250878160028151811061191f5761191f614cb1565b602002602001018190525061193384612807565b8160038151811061194657611946614cb1565b602090810291909101015261195b82826128a2565b5f6119686112ae846128cb565b5f8181526012602052604090209091506119828b82614d09565b50808a6040516119929190614b8a565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007f589bd8c058cd521b9d0ee152b14a61da92077f0114e35b76ac9d9176b0ad7e547f00000000000000000000000000000000000000000000000000000000000000008e8d8c8c604051611a12959493929190614e6c565b60405180910390a450505050505050505050565b5f336106cb81858561249c565b8051602081830181018051600d82529282019190930120915280548190611a5990614b3b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8590614b3b565b8015611ad05780601f10611aa757610100808354040283529160200191611ad0565b820191905f5260205f20905b815481529060010190602001808311611ab357829003601f168201915b505050506001830154600284015460039094015492936001600160a01b039091169290915060ff1684565b8051602081830181018051601182529282019190930120915280548190611b2190614b3b565b80601f0160208091040260200160405190810160405280929190818152602001828054611b4d90614b3b565b8015611b985780601f10611b6f57610100808354040283529160200191611b98565b820191905f5260205f20905b815481529060010190602001808311611b7b57829003601f168201915b505050505090806001018054611bad90614b3b565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd990614b3b565b8015611c245780601f10611bfb57610100808354040283529160200191611c24565b820191905f5260205f20905b815481529060010190602001808311611c0757829003601f168201915b50505050600283015460039093015491929160ff16905084565b611c46612622565b80611c5030610b9e565b1015611c9e5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e747261637420746f6b656e732e00000060448201526064016108ea565b611ca930838361249c565b5050565b83421115611cd15760405163313c898160e11b8152600481018590526024016108ea565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888611d1c8c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f611d7682612c5e565b90505f611d8582878787612c8a565b9050896001600160a01b0316816001600160a01b031614611dcc576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016108ea565b611dd78a8a8a61218b565b50505050505050505050565b611deb612622565b600954604051631cd0704360e21b8152600160a01b82046001600160401b031660048201523060248201526001600160a01b0390911690637341c10c906044015f604051808303815f87803b158015611e42575f5ffd5b505af1158015611e54573d5f5f3e3d5ffd5b50505050565b611e62612622565b6001600160a01b038116611e8b57604051631e4fbdf760e01b81525f60048201526024016108ea565b610b9b81612703565b611e9c612622565b611ea461264f565b6002600f88604051611eb69190614b8a565b90815260405190819003602001902060029081015460ff1690811115611ede57611ede614760565b14611f2b5760405162461bcd60e51b815260206004820152601e60248201527f4e6f20616374697665206465706f73697420666f7220746869732049442e000060448201526064016108ea565b856001600160a01b0316600f88604051611f459190614b8a565b908152604051908190036020019020546001600160a01b031614611fbb5760405162461bcd60e51b815260206004820152602760248201527f53656c6c6572206973206e6f74206d61746368656420666f722074686973206460448201526632b837b9b4ba1760c91b60648201526084016108ea565b84600f88604051611fcc9190614b8a565b90815260200160405180910390206001015410156120415760405162461bcd60e51b815260206004820152602c60248201527f53656c6c20416d6f756e74206973206e6f74206d61746368656420666f72207460448201526b3434b9903232b837b9b4ba1760a11b60648201526084016108ea565b5f61204e6012600a614c8c565b6120589087614c9a565b90508061206430610b9e565b10156120ca5760405162461bcd60e51b815260206004820152602f60248201527f536d61727420436f6e7472616374277320746f6b656e2062616c616e6365206960448201526e399034b739bab33334b1b4b2b73a1760891b60648201526084016108ea565b6120d987308388888888611cad565b6120e430888361249c565b85600f896040516120f59190614b8a565b90815260200160405180910390206001015f8282546121149190614ea8565b9091555050604051600f9061212a908a90614b8a565b9081526020016040518091039020600101545f0361218157600f886040516121529190614b8a565b90815260405190819003602001902080546001600160a01b03191681555f6001820155600201805460ff191690555b5050505050505050565b6121988383836001612cb6565b505050565b5f838152600e6020908152604080832080548251818502810185019093528083529192909190849084015b82821015612270578382905f5260205f200180546121e590614b3b565b80601f016020809104026020016040519081016040528092919081815260200182805461221190614b3b565b801561225c5780601f106122335761010080835404028352916020019161225c565b820191905f5260205f20905b81548152906001019060200180831161223f57829003601f168201915b5050505050815260200190600101906121c8565b5050505090505f60125f8681526020019081526020015f20805461229390614b3b565b80601f01602080910402602001604051908101604052809291908181526020018280546122bf90614b3b565b801561230a5780601f106122e15761010080835404028352916020019161230a565b820191905f5260205f20905b8154815290600101906020018083116122ed57829003601f168201915b505050505090505f81511115612343575f8480602001905181019061232f9190614ebb565b905061233d86838387612d88565b5061241f565b8151156123d75783516060901561236b57848060200190518101906123689190614ed2565b90505b5f5b83518110156123d0575f81835111612385575f6123a0565b82828151811061239757612397614cb1565b60200260200101515b90506123c7888684815181106123b8576123b8614cb1565b602002602001015183896132f5565b5060010161236d565b505061241f565b60405162461bcd60e51b815260206004820152601c60248201527f556e6b6e6f776e20436861696e6c696e6b20726571756573742049440000000060448201526064016108ea565b5050505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f19811015611e54578181101561248e57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016108ea565b611e5484848484035f612cb6565b6001600160a01b0383166124c557604051634b637e8f60e11b81525f60048201526024016108ea565b6001600160a01b0382166124ee5760405163ec442f0560e01b81525f60048201526024016108ea565b6121988383836137a5565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561255157507f000000000000000000000000000000000000000000000000000000000000000046145b1561257b57507f000000000000000000000000000000000000000000000000000000000000000090565b610837604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b6008546001600160a01b03163314610b875760405163118cdaa760e01b81523360048201526024016108ea565b600854600160a01b900460ff1615610b875760405163d93c066560e01b815260040160405180910390fd5b612682613898565b6008805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166126f857604051634b637e8f60e11b81525f60048201526024016108ea565b611ca9825f836137a5565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b61275c61264f565b6008805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126b23390565b60606108377f000000000000000000000000000000000000000000000000000000000000000060056138c2565b60606108377f000000000000000000000000000000000000000000000000000000000000000060066138c2565b60606106d16001600160a01b038316601461396b565b60605f61281383613adc565b60010190505f816001600160401b03811115612831576128316144fe565b6040519080825280601f01601f19166020018201604052801561285b576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461286557509392505050565b611ca9825f5f84613bb3565b80515f036128c35760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60605f6128d9610100613c30565b90506129126040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b81525082613c5090919063ffffffff16565b825161293090600281111561292957612929614760565b8290613c69565b6040805180820190915260088152676c616e677561676560c01b602082015261295a908290613c50565b604083015161297190801561292957612929614760565b604080518082019091526006815265736f7572636560d01b6020820152612999908290613c50565b60608301516129a9908290613c50565b60a08301515115612a34576040805180820190915260048152636172677360e01b60208201526129da908290613c50565b6129e381613ca2565b5f5b8360a0015151811015612a2a57612a228460a001518281518110612a0b57612a0b614cb1565b602002602001015183613c5090919063ffffffff16565b6001016129e5565b50612a3481613cc6565b60808301515115612af7575f83602001516002811115612a5657612a56614760565b03612a745760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152612aa5908290613c50565b612abe8360200151600281111561292957612929614760565b6040805180820190915260078152667365637265747360c81b6020820152612ae7908290613c50565b6080830151612af7908290613ce4565b60c08301515115612b875760408051808201909152600981526862797465734172677360b81b6020820152612b2d908290613c50565b612b3681613ca2565b5f5b8360c0015151811015612b7d57612b758460c001518281518110612b5e57612b5e614cb1565b602002602001015183613ce490919063ffffffff16565b600101612b38565b50612b8781613cc6565b515192915050565b5f5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401612be6959493929190614f58565b6020604051808303815f875af1158015612c02573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c269190614ebb565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8905f90a290505b949350505050565b5f6106d1612c6a6124f9565b8360405161190160f01b8152600281019290925260228201526042902090565b5f5f5f5f612c9a88888888613cf1565b925092509250612caa8282613db9565b50909695505050505050565b6001600160a01b038416612cdf5760405163e602df0560e01b81525f60048201526024016108ea565b6001600160a01b038316612d0857604051634a1406b160e11b81525f60048201526024016108ea565b6001600160a01b038085165f9081526001602090815260408083209387168352929052208290558015611e5457826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051612d7a91815260200190565b60405180910390a350505050565b5f600f601185604051612d9b9190614b8a565b908152604051908190036020018120612db391614fa0565b908152602001604051809103902090505f6010601186604051612dd69190614b8a565b9081526020016040518091039020600101604051612df49190614fa0565b908152604080516020928190038301812081830190925281546001600160a01b0316815260019091015491810182905291505f6012612e3490600a614c8c565b612e3e9083614c9a565b90506001601188604051612e529190614b8a565b9081526040519081900360200190206003015460ff166002811115612e7957612e79614760565b14612ef9578787604051612e8d9190614b8a565b6040519081900381208654865191927f0000000000000000000000000000000000000000000000000000000000000000925f5160206156665f395f51905f5292612ee89285928f926001600160a01b0316918b905f90615011565b60405180910390a450505050611e54565b845115612fad575f601188604051612f119190614b8a565b908152604051908190036020019020600301805460ff19166001836002811115612f3d57612f3d614760565b02179055508787604051612f519190614b8a565b6040519081900381208654865191927f0000000000000000000000000000000000000000000000000000000000000000925f5160206156665f395f51905f5292612ee89285928f926001600160a01b0316918b906001906150d0565b856001036132365780612fbf30610b9e565b101561308b575f601188604051612fd69190614b8a565b908152604051908190036020019020600301805460ff1916600183600281111561300257613002614760565b021790555087876040516130169190614b8a565b6040519081900381208654865191927f0000000000000000000000000000000000000000000000000000000000000000925f5160206156665f395f51905f52926130729285928f926001600160a01b0316918b90600290615130565b60405180910390a4613082610bfe565b50505050611e54565b8184600101541015613144575f6011886040516130a89190614b8a565b908152604051908190036020019020600301805460ff191660018360028111156130d4576130d4614760565b021790555087876040516130e89190614b8a565b6040519081900381208654865191927f0000000000000000000000000000000000000000000000000000000000000000925f5160206156665f395f51905f52926130729285928f926001600160a01b0316918b906002906151d3565b61315230845f01518361249c565b60026011886040516131649190614b8a565b908152604051908190036020019020600301805460ff1916600183600281111561319057613190614760565b021790555081846001015f8282546131a89190614ea8565b909155505060405188906131bd908990614b8a565b6040519081900381208654865191927f0000000000000000000000000000000000000000000000000000000000000000927fe4daf0cc7a61dd6ad790d55a15d78530cae3c88af6fd51fa88885a1c75911bea926132299285928f926001600160a01b0316918b90615275565b60405180910390a4612181565b5f6011886040516132479190614b8a565b908152604051908190036020019020600301805460ff1916600183600281111561327357613273614760565b021790555087876040516132879190614b8a565b6040519081900381208654865191927f0000000000000000000000000000000000000000000000000000000000000000925f5160206156665f395f51905f52926132e39285928f926001600160a01b0316918b906003906152ed565b60405180910390a45050505050505050565b5f600d846040516133069190614b8a565b908152604051908190036020018120600101546001600160a01b031691505f90600d90613334908790614b8a565b9081526040519081900360200190206002015490506001600d8660405161335b9190614b8a565b9081526040519081900360200190206003015460ff16600281111561338257613382614760565b146134125785856040516133969190614b8a565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206156865f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008987875f6040516134039594939291906153a8565b60405180910390a45050611e54565b8251156134d8575f600d8660405161342a9190614b8a565b908152604051908190036020019020600301805460ff1916600183600281111561345657613456614760565b0217905550858560405161346a9190614b8a565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206156865f395f51905f527f00000000000000000000000000000000000000000000000000000000000000008987876001604051613403959493929190615423565b836001036136d5576134ec6012600a614c8c565b6134f69082614c9a565b6134ff30610b9e565b106136015761352430836135156012600a614c8c565b61351f9085614c9a565b61249c565b6002600d866040516135369190614b8a565b908152604051908190036020019020600301805460ff1916600183600281111561356257613562614760565b021790555085856040516135769190614b8a565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007f67a14b8953fe4619174debb9fe0581a67af9a1f4703b50e5e70fc32774dc3e147f00000000000000000000000000000000000000000000000000000000000000008987876040516135f4949392919061547a565b60405180910390a461379d565b5f600d866040516136129190614b8a565b908152604051908190036020019020600301805460ff1916600183600281111561363e5761363e614760565b021790555085856040516136529190614b8a565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206156865f395f51905f527f000000000000000000000000000000000000000000000000000000000000000089878760026040516136c09594939291906154ea565b60405180910390a46136d0610bfe565b61379d565b5f600d866040516136e69190614b8a565b908152604051908190036020019020600301805460ff1916600183600281111561371257613712614760565b021790555085856040516137269190614b8a565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206156865f395f51905f527f0000000000000000000000000000000000000000000000000000000000000000898787600360405161379495949392919061558b565b60405180910390a45b505050505050565b6001600160a01b0383161561388d576001600160a01b0383165f908152601360205260409020544210156138275760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b60648201526084016108ea565b600854600160a01b900460ff161561388d5760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b60648201526084016108ea565b612198838383613e71565b600854600160a01b900460ff16610b8757604051638dfc202b60e01b815260040160405180910390fd5b606060ff83146138dc576138d583613f97565b90506106d1565b8180546138e890614b3b565b80601f016020809104026020016040519081016040528092919081815260200182805461391490614b3b565b801561395f5780601f106139365761010080835404028352916020019161395f565b820191905f5260205f20905b81548152906001019060200180831161394257829003601f168201915b505050505090506106d1565b6060825f61397a846002614c9a565b613985906002615613565b6001600160401b0381111561399c5761399c6144fe565b6040519080825280601f01601f1916602001820160405280156139c6576020820181803683370190505b509050600360fc1b815f815181106139e0576139e0614cb1565b60200101906001600160f81b03191690815f1a905350600f60fb1b81600181518110613a0e57613a0e614cb1565b60200101906001600160f81b03191690815f1a9053505f613a30856002614c9a565b613a3b906001615613565b90505b6001811115613ab2576f181899199a1a9b1b9c1cb0b131b232b360811b83600f1660108110613a6f57613a6f614cb1565b1a60f81b828281518110613a8557613a85614cb1565b60200101906001600160f81b03191690815f1a90535060049290921c91613aab81615626565b9050613a3e565b508115612c565760405163e22e27eb60e01b815260048101869052602481018590526044016108ea565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310613b1a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613b46576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310613b6457662386f26fc10000830492506010015b6305f5e1008310613b7c576305f5e100830492506008015b6127108310613b9057612710830492506004015b60648310613ba2576064830492506002015b600a83106106d15760010192915050565b80515f03613bd4576040516322ce3edd60e01b815260040160405180910390fd5b83836002811115613be757613be7614760565b90816002811115613bfa57613bfa614760565b90525060408401828015613c1057613c10614760565b90818015613c2057613c20614760565b9052506060909301929092525050565b613c386143e6565b8051613c449083613fd4565b505f6020820152919050565b613c5d8260038351614048565b81516121989082614161565b8151613c769060c2614188565b50611ca98282604051602001613c8e91815260200190565b604051602081830303815290604052613ce4565b613cad8160046141ef565b600181602001818151613cc09190615613565b90525050565b613cd18160076141ef565b600181602001818151613cc09190614ea8565b613c5d8260028351614048565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115613d2a57505f91506003905082613daf565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015613d7b573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b038116613da657505f925060019150829050613daf565b92505f91508190505b9450945094915050565b5f826003811115613dcc57613dcc614760565b03613dd5575050565b6001826003811115613de957613de9614760565b03613e075760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115613e1b57613e1b614760565b03613e3c5760405163fce698f760e01b8152600481018290526024016108ea565b6003826003811115613e5057613e50614760565b03611ca9576040516335e2f38360e21b8152600481018290526024016108ea565b6001600160a01b038316613e9b578060025f828254613e909190615613565b90915550613f0b9050565b6001600160a01b0383165f9081526020819052604090205481811015613eed5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016108ea565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216613f2757600280548290039055613f45565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613f8a91815260200190565b60405180910390a3505050565b60605f613fa383614206565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b60408051808201909152606081525f6020820152613ff360208361563b565b1561401b5761400360208361563b565b61400e906020614ea8565b6140189083615613565b91505b60208084018390526040518085525f815290818401018181101561403d575f5ffd5b604052509192915050565b6017816001600160401b03161161406e578251611e549060e0600585901b168317614188565b60ff816001600160401b0316116140ae578251614096906018611fe0600586901b1617614188565b508251611e54906001600160401b038316600161422d565b61ffff816001600160401b0316116140ef5782516140d7906019611fe0600586901b1617614188565b508251611e54906001600160401b038316600261422d565b63ffffffff816001600160401b03161161413257825161411a90601a611fe0600586901b1617614188565b508251611e54906001600160401b038316600461422d565b825161414990601b611fe0600586901b1617614188565b508251611e54906001600160401b038316600861422d565b60408051808201909152606081525f6020820152614181838384516142af565b9392505050565b60408051808201909152606081525f60208201528251515f6141ab826001615613565b9050846020015182106141cc576141cc856141c7836002614c9a565b61437b565b84516020838201018581535080518211156141e5578181525b5093949350505050565b815161219890601f611fe0600585901b1617614188565b5f60ff8216601f8111156106d157604051632cd44ac360e21b815260040160405180910390fd5b60408051808201909152606081525f60208201528351515f61424f8285615613565b9050856020015181111561426c5761426c866141c7836002614c9a565b5f600161427b8661010061565a565b6142859190614ea8565b905086518281018783198251161781525080518311156142a3578281525b50959695505050505050565b60408051808201909152606081525f602082015282518211156142d0575f5ffd5b8351515f6142de8483615613565b905085602001518111156142fb576142fb866141c7836002614c9a565b85518051838201602001915f9180851115614314578482525b505050602086015b602086106143545780518252614333602083615613565b9150614340602082615613565b905061434d602087614ea8565b955061431c565b5181515f1960208890036101000a0190811690199190911617905250849150509392505050565b81516143878383613fd4565b50611e548382614161565b828054828255905f5260205f209081019282156143d6579160200282015b828111156143d657825182906143c69082614d09565b50916020019190600101906143b0565b506143e2929150614419565b5090565b604051806040016040528061440d6040518060400160405280606081526020015f81525090565b81526020015f81525090565b808211156143e2575f61442c8282614435565b50600101614419565b50805461444190614b3b565b5f825580601f10614450575050565b601f0160209004905f5260205f2090810190610b9b91905b808211156143e2575f8155600101614468565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f614181602083018461447b565b80356001600160a01b03811681146144d1575f5ffd5b919050565b5f5f604083850312156144e7575f5ffd5b6144f0836144bb565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b0381118282101715614534576145346144fe565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614562576145626144fe565b604052919050565b5f82601f830112614579575f5ffd5b8135602083015f5f6001600160401b03841115614598576145986144fe565b50601f8301601f19166020016145ad8161453a565b9150508281528583830111156145c1575f5ffd5b828260208301375f92810160200192909252509392505050565b5f5f5f606084860312156145ed575f5ffd5b8335925060208401356001600160401b03811115614609575f5ffd5b6146158682870161456a565b92505060408401356001600160401b03811115614630575f5ffd5b61463c8682870161456a565b9150509250925092565b5f5f5f60608486031215614658575f5ffd5b614661846144bb565b925061466f602085016144bb565b929592945050506040919091013590565b5f5f60408385031215614691575f5ffd5b50508035926020909101359150565b803560ff811681146144d1575f5ffd5b5f5f5f5f5f5f5f60e0888a0312156146c6575f5ffd5b87356001600160401b038111156146db575f5ffd5b6146e78a828b0161456a565b9750506146f6602089016144bb565b95506040880135945060608801359350614712608089016146a0565b9699959850939692959460a0840135945060c09093013592915050565b5f6020828403121561473f575f5ffd5b81356001600160401b03811115614754575f5ffd5b612c568482850161456a565b634e487b7160e01b5f52602160045260245ffd5b6003811061479057634e487b7160e01b5f52602160045260245ffd5b9052565b6001600160a01b03841681526020810183905260608101612c566040830184614774565b5f602082840312156147c8575f5ffd5b5035919050565b5f602082840312156147df575f5ffd5b614181826144bb565b60ff60f81b8816815260e060208201525f61480660e083018961447b565b8281036040840152614818818961447b565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b8181101561486d57835183526020938401939092019160010161484f565b50909b9a5050505050505050505050565b5f6001600160401b03821115614896576148966144fe565b5060051b60200190565b5f602082840312156148b0575f5ffd5b81356001600160401b038111156148c5575f5ffd5b8201601f810184136148d5575f5ffd5b80356148e86148e38261487e565b61453a565b8082825260208201915060208360051b850101925086831115614909575f5ffd5b602084015b838110156149b65780356001600160401b0381111561492b575f5ffd5b85016080818a03601f19011215614940575f5ffd5b614948614512565b60208201356001600160401b03811115614960575f5ffd5b61496f8b60208386010161456a565b82525061497e604083016144bb565b60208201526060820135604082015260809091013590600382106149a0575f5ffd5b606081019190915283526020928301920161490e565b509695505050505050565b5f5f5f5f5f5f5f60e0888a0312156149d7575f5ffd5b87356001600160401b038111156149ec575f5ffd5b6149f88a828b0161456a565b97505060208801356001600160401b03811115614a13575f5ffd5b614a1f8a828b0161456a565b965050614a2e604089016144bb565b945060608801356001600160401b03811115614a48575f5ffd5b614a548a828b0161456a565b945050614712608089016144bb565b608081525f614a75608083018761447b565b6001600160a01b0386166020840152604083018590529050614a9a6060830184614774565b95945050505050565b608081525f614ab5608083018761447b565b8281036020840152614ac7818761447b565b915050836040830152614a9a6060830184614774565b5f5f5f5f5f5f5f60e0888a031215614af3575f5ffd5b614afc886144bb565b96506146f6602089016144bb565b5f5f60408385031215614b1b575f5ffd5b614b24836144bb565b9150614b32602084016144bb565b90509250929050565b600181811c90821680614b4f57607f821691505b602082108103614b6d57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f81518060208401855e5f93019283525090919050565b5f6141818284614b73565b634e487b7160e01b5f52601160045260245ffd5b6001815b6001841115614be457808504811115614bc857614bc8614b95565b6001841615614bd657908102905b60019390931c928002614bad565b935093915050565b5f82614bfa575060016106d1565b81614c0657505f6106d1565b8160018114614c1c5760028114614c2657614c42565b60019150506106d1565b60ff841115614c3757614c37614b95565b50506001821b6106d1565b5060208310610133831016604e8410600b8410161715614c65575081810a6106d1565b614c715f198484614ba9565b805f1904821115614c8457614c84614b95565b029392505050565b5f61418160ff841683614bec565b80820281158282048414176106d1576106d1614b95565b634e487b7160e01b5f52603260045260245ffd5b601f82111561219857805f5260205f20601f840160051c81016020851015614cea5750805b601f840160051c820191505b8181101561241f575f8155600101614cf6565b81516001600160401b03811115614d2257614d226144fe565b614d3681614d308454614b3b565b84614cc5565b6020601f821160018114614d68575f8315614d515750848201515b5f19600385901b1c1916600184901b17845561241f565b5f84815260208120601f198516915b82811015614d975787850151825560209485019460019092019101614d77565b5084821015614db457868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f614dce8286614b73565b600b60fa1b8152614de26001820186614b73565b9050600b60fa1b8152614df86001820185614b73565b9695505050505050565b5f604082018483526040602084015280845180835260608501915060608160051b8601019250602086015f5b82811015614e5f57605f19878603018452614e4a85835161447b565b94506020938401939190910190600101614e2e565b5092979650505050505050565b85815260a060208201525f614e8460a083018761447b565b6001600160a01b039586166040840152939094166060820152608001529392505050565b818103818111156106d1576106d1614b95565b5f60208284031215614ecb575f5ffd5b5051919050565b5f60208284031215614ee2575f5ffd5b81516001600160401b03811115614ef7575f5ffd5b8201601f81018413614f07575f5ffd5b8051614f156148e38261487e565b8082825260208201915060208360051b850101925086831115614f36575f5ffd5b6020840193505b82841015614df8578351825260209384019390910190614f3d565b6001600160401b038616815260a060208201525f614f7960a083018761447b565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b5f5f8354614fad81614b3b565b600182168015614fc45760018114614fd957615006565b60ff1983168652811515820286019350615006565b865f5260205f205f5b83811015614ffe57815488820152600190910190602001614fe2565b505081860193505b509195945050505050565b86815260e060208201525f61502960e083018861447b565b6001600160a01b0396871660408481019190915295909616606083015250608081019290925263ffffffff1660a082015280830360c090910152601a82527f5265717565737420616c72656164792070726f6365737365642e00000000000060208301520192915050565b602381527f436861696e6c696e6b2046756e6374696f6e732072657175657374206661696c60208201526232b21760e91b604082015260600190565b86815260e060208201525f6150e860e083018861447b565b6001600160a01b038781166040850152861660608401526080830185905263ffffffff841660a084015282810360c084015261512381615094565b9998505050505050505050565b86815260e060208201525f61514860e083018861447b565b60018060a01b038716604084015260018060a01b038616606084015284608084015263ffffffff841660a084015282810360c0840152603081527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060208201526f363c903337b9103a3930b739b332b91760811b604082015260608101915050979650505050505050565b86815260e060208201525f6151eb60e083018861447b565b60018060a01b038716604084015260018060a01b038616606084015284608084015263ffffffff841660a084015282810360c0840152602f81527f496e73756666696369656e74206465706f73697420746f6b656e20737570706c60208201526e3c903337b9103a3930b739b332b91760891b604082015260608101915050979650505050505050565b85815260c060208201525f61528d60c083018761447b565b6001600160a01b0395861660408481019190915294909516606083015250608081019190915280830360a090910152601b82527f4f66662d636861696e207075726368617365207665726966696564000000000060208301520192915050565b86815260e060208201525f61530560e083018861447b565b60018060a01b038716604084015260018060a01b038616606084015284608084015263ffffffff841660a084015282810360c0840152604281527f4f66662d636861696e20707572636861736520766572696669636174696f6e2060208201527f6661696c65642e20546f6b656e732072657475726e656420746f2073656c6c65604082015261391760f11b606082015260808101915050979650505050505050565b85815260c060208201525f6153c060c083018761447b565b60018060a01b038616604084015284606084015263ffffffff8416608084015282810360a0840152601e81527f5265717565737420537461747573206973206e6f742050656e64696e672e00006020820152604081019150509695505050505050565b85815260c060208201525f61543b60c083018761447b565b6001600160a01b03861660408401526060830185905263ffffffff8416608084015282810360a084015261546e81615094565b98975050505050505050565b84815260a060208201525f61549260a083018661447b565b6001600160a01b0394909416604083810191909152606083019390935250808303608090910152601882527f496e697469616c207061796d656e74207665726966696564000000000000000060208301520192915050565b85815260c060208201525f61550260c083018761447b565b60018060a01b038616604084015284606084015263ffffffff8416608084015282810360a0840152603881527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060208201527f6c7920666f7220696e697469616c207472616e736665722e00000000000000006040820152606081019150509695505050505050565b85815260c060208201525f6155a360c083018761447b565b60018060a01b038616604084015284606084015263ffffffff8416608084015282810360a0840152602481527f496e697469616c207061796d656e7420766572696669636174696f6e206661696020820152633632b21760e11b6040820152606081019150509695505050505050565b808201808211156106d1576106d1614b95565b5f8161563457615634614b95565b505f190190565b5f8261565557634e487b7160e01b5f52601260045260245ffd5b500690565b5f6141818383614bec56fefd864ffa15090dc9d3f9cea1292549ffe75f5fe0f2b5fe25c7d83bc82a1be1f167c6487a84b740e52352b8a053137de4a222ced29ae14446f3d5ccb20518ad03a26469706673582212207dd450770b1d515c561a107db630743a97c9c28746f3811f7f3376532ac9fc8364736f6c634300081d0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNCONTRACTTOKENS = "burnContractTokens";

    public static final String FUNC_BUYRECORD = "buyRecord";

    public static final String FUNC_CANCELDEPOSIT = "cancelDeposit";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DEPOSITWITHPERMIT = "depositWithPermit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FUNCTIONSSUBSCRIPTIONS = "functionsSubscriptions";

    public static final String FUNC_HANDLEORACLEFULFILLMENT = "handleOracleFulfillment";

    public static final String FUNC_INVESTMENTKEY = "investmentKey";

    public static final String FUNC_INVESTMENTRECORD = "investmentRecord";

    public static final String FUNC_MININVESTMENTAMOUNT = "minInvestmentAmount";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NONCES = "nonces";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PERMIT = "permit";

    public static final String FUNC_PROJECTID = "projectId";

    public static final String FUNC_REGISTERASCONSUMER = "registerAsConsumer";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REQUESTINVESTMENT = "requestInvestment";

    public static final String FUNC_REQUESTTRADE = "requestTrade";

    public static final String FUNC_SELLRECORD = "sellRecord";

    public static final String FUNC_SETLOCKUP = "setLockup";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALINVESTMENTAMOUNT = "totalInvestmentAmount";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TOTALTOKENAMOUNT = "totalTokenAmount";

    public static final String FUNC_TRADEKEY = "tradeKey";

    public static final String FUNC_TRADERECORD = "tradeRecord";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERTOKENSFROMCONTRACT = "transferTokensFromContract";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INVESTMENTFAILED_EVENT = new Event("InvestmentFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INVESTMENTREQUESTED_EVENT = new Event("InvestmentRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
    ;

    public static final Event INVESTMENTSUCCESSFUL_EVENT = new Event("InvestmentSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTFULFILLED_EVENT = new Event("RequestFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event REQUESTSENT_EVENT = new Event("RequestSent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event TRADEFAILED_EVENT = new Event("TradeFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRADEREQUESTED_EVENT = new Event("TradeRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRADESUCCESSFUL_EVENT = new Event("TradeSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InvestmentFailedEventResponse> getInvestmentFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, transactionReceipt);
        ArrayList<InvestmentFailedEventResponse> responses = new ArrayList<InvestmentFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentFailedEventResponse getInvestmentFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, log);
        InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentFailedEventFromLog(log));
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTFAILED_EVENT));
        return investmentFailedEventFlowable(filter);
    }

    public static List<InvestmentRequestedEventResponse> getInvestmentRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, transactionReceipt);
        ArrayList<InvestmentRequestedEventResponse> responses = new ArrayList<InvestmentRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentIdList = (List<String>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentRequestedEventResponse getInvestmentRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, log);
        InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentIdList = (List<String>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentRequestedEventFromLog(log));
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTREQUESTED_EVENT));
        return investmentRequestedEventFlowable(filter);
    }

    public static List<InvestmentSuccessfulEventResponse> getInvestmentSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<InvestmentSuccessfulEventResponse> responses = new ArrayList<InvestmentSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentSuccessfulEventResponse getInvestmentSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, log);
        InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investmentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentSuccessfulEventFromLog(log));
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTSUCCESSFUL_EVENT));
        return investmentSuccessfulEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<RequestFulfilledEventResponse> getRequestFulfilledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, transactionReceipt);
        ArrayList<RequestFulfilledEventResponse> responses = new ArrayList<RequestFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestFulfilledEventResponse getRequestFulfilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, log);
        RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestFulfilledEventFromLog(log));
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTFULFILLED_EVENT));
        return requestFulfilledEventFlowable(filter);
    }

    public static List<RequestSentEventResponse> getRequestSentEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, transactionReceipt);
        ArrayList<RequestSentEventResponse> responses = new ArrayList<RequestSentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestSentEventResponse typedResponse = new RequestSentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestSentEventResponse getRequestSentEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, log);
        RequestSentEventResponse typedResponse = new RequestSentEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestSentEventFromLog(log));
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSENT_EVENT));
        return requestSentEventFlowable(filter);
    }

    public static List<TradeFailedEventResponse> getTradeFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, transactionReceipt);
        ArrayList<TradeFailedEventResponse> responses = new ArrayList<TradeFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeFailedEventResponse getTradeFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, log);
        TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(6).getValue();
        return typedResponse;
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeFailedEventFromLog(log));
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEFAILED_EVENT));
        return tradeFailedEventFlowable(filter);
    }

    public static List<TradeRequestedEventResponse> getTradeRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, transactionReceipt);
        ArrayList<TradeRequestedEventResponse> responses = new ArrayList<TradeRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeRequestedEventResponse getTradeRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, log);
        TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeRequestedEventFromLog(log));
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEREQUESTED_EVENT));
        return tradeRequestedEventFlowable(filter);
    }

    public static List<TradeSuccessfulEventResponse> getTradeSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<TradeSuccessfulEventResponse> responses = new ArrayList<TradeSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeSuccessfulEventResponse getTradeSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, log);
        TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectIndex = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeIndex = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.projectId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeSuccessfulEventFromLog(log));
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADESUCCESSFUL_EVENT));
        return tradeSuccessfulEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnContractTokens(BigInteger _amount) {
        final Function function = new Function(
                FUNC_BURNCONTRACTTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> buyRecord(String param0) {
        final Function function = new Function(FUNC_BUYRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> cancelDeposit(String _sellId, String _seller,
            BigInteger _cancelAmount, BigInteger deadline, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_CANCELDEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_sellId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.generated.Uint256(_cancelAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> depositWithPermit(String _sellId, String _seller,
            BigInteger _depositAmount, BigInteger deadline, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_DEPOSITWITHPERMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_sellId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.generated.Uint256(_depositAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain(
            ) {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> functionsSubscriptions() {
        final Function function = new Function(FUNC_FUNCTIONSSUBSCRIPTIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOracleFulfillment(byte[] requestId,
            byte[] response, byte[] err) {
        final Function function = new Function(
                FUNC_HANDLEORACLEFULFILLMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId), 
                new org.web3j.abi.datatypes.DynamicBytes(response), 
                new org.web3j.abi.datatypes.DynamicBytes(err)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> investmentKey(byte[] param0, BigInteger param1) {
        final Function function = new Function(FUNC_INVESTMENTKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<String, String, BigInteger, BigInteger>> investmentRecord(
            String param0) {
        final Function function = new Function(FUNC_INVESTMENTRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> minInvestmentAmount() {
        final Function function = new Function(FUNC_MININVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> nonces(String owner) {
        final Function function = new Function(FUNC_NONCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> permit(String owner, String spender,
            BigInteger value, BigInteger deadline, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_PERMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> projectId() {
        final Function function = new Function(FUNC_PROJECTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> registerAsConsumer() {
        final Function function = new Function(
                FUNC_REGISTERASCONSUMER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestInvestment(List<investment> _investments) {
        final Function function = new Function(
                FUNC_REQUESTINVESTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<investment>(investment.class, _investments)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestTrade(String _tradeId, String _sellId,
            String _seller, String _buyId, String _buyer, BigInteger _tradeAmount,
            BigInteger _tradePricePerToken) {
        final Function function = new Function(
                FUNC_REQUESTTRADE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_tradeId), 
                new org.web3j.abi.datatypes.Utf8String(_sellId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.Utf8String(_buyId), 
                new org.web3j.abi.datatypes.Address(160, _buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_tradeAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_tradePricePerToken)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>> sellRecord(String param0) {
        final Function function = new Function(FUNC_SELLRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setLockup(String _account,
            BigInteger _unlockTime) {
        final Function function = new Function(
                FUNC_SETLOCKUP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account), 
                new org.web3j.abi.datatypes.generated.Uint256(_unlockTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalInvestmentAmount() {
        final Function function = new Function(FUNC_TOTALINVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalTokenAmount() {
        final Function function = new Function(FUNC_TOTALTOKENAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tradeKey(byte[] param0) {
        final Function function = new Function(FUNC_TRADEKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<String, String, BigInteger, BigInteger>> tradeRecord(
            String param0) {
        final Function function = new Function(FUNC_TRADERECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferTokensFromContract(String _to,
            BigInteger _amount) {
        final Function function = new Function(
                FUNC_TRANSFERTOKENSFROMCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _router, BigInteger _subscriptionId,
            byte[] _donId, String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _router, BigInteger _subscriptionId,
            byte[] _donId, String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class investment extends DynamicStruct {
        public String investId;

        public String investmentor;

        public BigInteger tokenAmount;

        public BigInteger processState;

        public investment(String investId, String investmentor, BigInteger tokenAmount,
                BigInteger processState) {
            super(new org.web3j.abi.datatypes.Utf8String(investId), 
                    new org.web3j.abi.datatypes.Address(160, investmentor), 
                    new org.web3j.abi.datatypes.generated.Uint256(tokenAmount), 
                    new org.web3j.abi.datatypes.generated.Uint8(processState));
            this.investId = investId;
            this.investmentor = investmentor;
            this.tokenAmount = tokenAmount;
            this.processState = processState;
        }

        public investment(Utf8String investId, Address investmentor, Uint256 tokenAmount,
                Uint8 processState) {
            super(investId, investmentor, tokenAmount, processState);
            this.investId = investId.getValue();
            this.investmentor = investmentor.getValue();
            this.tokenAmount = tokenAmount.getValue();
            this.processState = processState.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InvestmentFailedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] investmentIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String investmentId;

        public String buyer;

        public BigInteger tokenAmount;

        public BigInteger status;

        public String reason;
    }

    public static class InvestmentRequestedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public List<String> investmentIdList;
    }

    public static class InvestmentSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] investmentIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String investmentId;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RequestFulfilledEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class RequestSentEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class TradeFailedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;

        public BigInteger status;

        public String reason;
    }

    public static class TradeRequestedEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;
    }

    public static class TradeSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectIndex;

        public byte[] tradeIndex;

        public byte[] chainlinkRequestId;

        public byte[] projectId;

        public String tradeId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
