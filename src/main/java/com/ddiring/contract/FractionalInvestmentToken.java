package com.ddiring.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.13.0.
 */
@SuppressWarnings("rawtypes")
public class FractionalInvestmentToken extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNCONTRACTTOKENS = "burnContractTokens";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_HANDLEORACLEFULFILLMENT = "handleOracleFulfillment";

    public static final String FUNC_INVESTMENTKEY = "investmentKey";

    public static final String FUNC_INVESTMENTPROCESSED = "investmentProcessed";

    public static final String FUNC_INVESTMENTTOKENAMOUNT = "investmentTokenAmount";

    public static final String FUNC_INVESTMENTOR = "investmentor";

    public static final String FUNC_ISTRUSTEDFORWARDER = "isTrustedForwarder";

    public static final String FUNC_MININVESTMENTAMOUNT = "minInvestmentAmount";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_REQUESTINVESTMENT = "requestInvestment";

    public static final String FUNC_REQUESTTRADE = "requestTrade";

    public static final String FUNC_SETLOCKUP = "setLockup";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALINVESTMENTAMOUNT = "totalInvestmentAmount";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TOTALTOKENAMOUNT = "totalTokenAmount";

    public static final String FUNC_TRADEBUYER = "tradeBuyer";

    public static final String FUNC_TRADEKEY = "tradeKey";

    public static final String FUNC_TRADEPROCESSED = "tradeProcessed";

    public static final String FUNC_TRADESELLER = "tradeSeller";

    public static final String FUNC_TRADETOKENAMOUNT = "tradeTokenAmount";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERTOKENSFROMCONTRACT = "transferTokensFromContract";

    public static final String FUNC_TRUSTEDFORWARDER = "trustedForwarder";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INVESTMENTFAILED_EVENT = new Event("InvestmentFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INVESTMENTREQUESTED_EVENT = new Event("InvestmentRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event INVESTMENTSUCCESSFUL_EVENT = new Event("InvestmentSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERREQUESTED_EVENT = new Event("OwnershipTransferRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTFULFILLED_EVENT = new Event("RequestFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event REQUESTSENT_EVENT = new Event("RequestSent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event TRADEFAILED_EVENT = new Event("TradeFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRADEREQUESTED_EVENT = new Event("TradeRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event TRADESUCCESSFUL_EVENT = new Event("TradeSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<InvestmentFailedEventResponse> getInvestmentFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, transactionReceipt);
        ArrayList<InvestmentFailedEventResponse> responses = new ArrayList<InvestmentFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userRequestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentFailedEventResponse getInvestmentFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, log);
        InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
        typedResponse.log = log;
        typedResponse.userRequestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentFailedEventFromLog(log));
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTFAILED_EVENT));
        return investmentFailedEventFlowable(filter);
    }

    public static List<InvestmentRequestedEventResponse> getInvestmentRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, transactionReceipt);
        ArrayList<InvestmentRequestedEventResponse> responses = new ArrayList<InvestmentRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userRequestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentRequestedEventResponse getInvestmentRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, log);
        InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.userRequestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentRequestedEventFromLog(log));
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTREQUESTED_EVENT));
        return investmentRequestedEventFlowable(filter);
    }

    public static List<InvestmentSuccessfulEventResponse> getInvestmentSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<InvestmentSuccessfulEventResponse> responses = new ArrayList<InvestmentSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userRequestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentSuccessfulEventResponse getInvestmentSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, log);
        InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.userRequestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentSuccessfulEventFromLog(log));
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTSUCCESSFUL_EVENT));
        return investmentSuccessfulEventFlowable(filter);
    }

    public static List<OwnershipTransferRequestedEventResponse> getOwnershipTransferRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferRequestedEventResponse> responses = new ArrayList<OwnershipTransferRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferRequestedEventResponse getOwnershipTransferRequestedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, log);
        OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferRequestedEventFromLog(log));
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERREQUESTED_EVENT));
        return ownershipTransferRequestedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<RequestFulfilledEventResponse> getRequestFulfilledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, transactionReceipt);
        ArrayList<RequestFulfilledEventResponse> responses = new ArrayList<RequestFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestFulfilledEventResponse getRequestFulfilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, log);
        RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestFulfilledEventFromLog(log));
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTFULFILLED_EVENT));
        return requestFulfilledEventFlowable(filter);
    }

    public static List<RequestSentEventResponse> getRequestSentEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, transactionReceipt);
        ArrayList<RequestSentEventResponse> responses = new ArrayList<RequestSentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestSentEventResponse typedResponse = new RequestSentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestSentEventResponse getRequestSentEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, log);
        RequestSentEventResponse typedResponse = new RequestSentEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestSentEventFromLog(log));
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSENT_EVENT));
        return requestSentEventFlowable(filter);
    }

    public static List<TradeFailedEventResponse> getTradeFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, transactionReceipt);
        ArrayList<TradeFailedEventResponse> responses = new ArrayList<TradeFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeFailedEventResponse getTradeFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, log);
        TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
        typedResponse.log = log;
        typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeFailedEventFromLog(log));
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEFAILED_EVENT));
        return tradeFailedEventFlowable(filter);
    }

    public static List<TradeRequestedEventResponse> getTradeRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, transactionReceipt);
        ArrayList<TradeRequestedEventResponse> responses = new ArrayList<TradeRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeRequestedEventResponse getTradeRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, log);
        TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.buyer = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeRequestedEventFromLog(log));
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEREQUESTED_EVENT));
        return tradeRequestedEventFlowable(filter);
    }

    public static List<TradeSuccessfulEventResponse> getTradeSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<TradeSuccessfulEventResponse> responses = new ArrayList<TradeSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeSuccessfulEventResponse getTradeSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, log);
        TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.buyer = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeSuccessfulEventFromLog(log));
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADESUCCESSFUL_EVENT));
        return tradeSuccessfulEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
        final Function function = new Function(
                FUNC_ACCEPTOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnContractTokens(BigInteger _amount) {
        final Function function = new Function(
                FUNC_BURNCONTRACTTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOracleFulfillment(byte[] requestId,
            byte[] response, byte[] err) {
        final Function function = new Function(
                FUNC_HANDLEORACLEFULFILLMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId), 
                new org.web3j.abi.datatypes.DynamicBytes(response), 
                new org.web3j.abi.datatypes.DynamicBytes(err)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> investmentKey(byte[] param0) {
        final Function function = new Function(FUNC_INVESTMENTKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> investmentProcessed(String param0) {
        final Function function = new Function(FUNC_INVESTMENTPROCESSED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> investmentTokenAmount(String param0) {
        final Function function = new Function(FUNC_INVESTMENTTOKENAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> investmentor(String param0) {
        final Function function = new Function(FUNC_INVESTMENTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isTrustedForwarder(String forwarder) {
        final Function function = new Function(FUNC_ISTRUSTEDFORWARDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, forwarder)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> minInvestmentAmount() {
        final Function function = new Function(FUNC_MININVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> requestInvestment(String _investmentId,
            String _buyer, BigInteger _tokenAmount) {
        final Function function = new Function(
                FUNC_REQUESTINVESTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_investmentId), 
                new org.web3j.abi.datatypes.Address(160, _buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestTrade(String _tradeId, String _seller,
            String _buyer, BigInteger _tokenAmount) {
        final Function function = new Function(
                FUNC_REQUESTTRADE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_tradeId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.Address(160, _buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLockup(String _account,
            BigInteger _unlockTime) {
        final Function function = new Function(
                FUNC_SETLOCKUP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account), 
                new org.web3j.abi.datatypes.generated.Uint256(_unlockTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalInvestmentAmount() {
        final Function function = new Function(FUNC_TOTALINVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalTokenAmount() {
        final Function function = new Function(FUNC_TOTALTOKENAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tradeBuyer(String param0) {
        final Function function = new Function(FUNC_TRADEBUYER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tradeKey(byte[] param0) {
        final Function function = new Function(FUNC_TRADEKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> tradeProcessed(String param0) {
        final Function function = new Function(FUNC_TRADEPROCESSED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> tradeSeller(String param0) {
        final Function function = new Function(FUNC_TRADESELLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tradeTokenAmount(String param0) {
        final Function function = new Function(FUNC_TRADETOKENAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String to) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferTokensFromContract(String _to,
            BigInteger _amount) {
        final Function function = new Function(
                FUNC_TRANSFERTOKENSFROMCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> trustedForwarder() {
        final Function function = new Function(FUNC_TRUSTEDFORWARDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String _name, String _symbol,
            BigInteger _totalAmount, BigInteger _minInvestmentAmount, String _trustedForwarder,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _trustedForwarder), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            String _name, String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _trustedForwarder, String _router, BigInteger _subscriptionId, byte[] _donId,
            String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _trustedForwarder), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol,
            BigInteger _totalAmount, BigInteger _minInvestmentAmount, String _trustedForwarder,
            String _router, BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _trustedForwarder), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            String _name, String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _trustedForwarder, String _router, BigInteger _subscriptionId, byte[] _donId,
            String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _trustedForwarder), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class InvestmentFailedEventResponse extends BaseEventResponse {
        public byte[] userRequestId;

        public byte[] chainlinkRequestId;

        public String reason;
    }

    public static class InvestmentRequestedEventResponse extends BaseEventResponse {
        public byte[] userRequestId;

        public String buyer;

        public BigInteger tokenAmount;

        public byte[] chainlinkRequestId;
    }

    public static class InvestmentSuccessfulEventResponse extends BaseEventResponse {
        public byte[] userRequestId;

        public String buyer;

        public BigInteger tokenAmount;

        public byte[] chainlinkRequestId;

        public String chainlinkResult;
    }

    public static class OwnershipTransferRequestedEventResponse extends BaseEventResponse {
        public String from;

        public String to;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String from;

        public String to;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RequestFulfilledEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class RequestSentEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class TradeFailedEventResponse extends BaseEventResponse {
        public byte[] tradeId;

        public byte[] chainlinkRequestId;

        public String reason;
    }

    public static class TradeRequestedEventResponse extends BaseEventResponse {
        public byte[] tradeId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;

        public byte[] chainlinkRequestId;
    }

    public static class TradeSuccessfulEventResponse extends BaseEventResponse {
        public byte[] tradeId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;

        public byte[] chainlinkRequestId;

        public String chainlinkResult;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
