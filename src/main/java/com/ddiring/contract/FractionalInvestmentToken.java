package com.ddiring.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.13.0.
 */
@SuppressWarnings("rawtypes")
public class FractionalInvestmentToken extends Contract {
    public static final String BINARY = "610140604052348015610010575f5ffd5b5060405161408638038061408683398101604081905261002f91610731565b858533805f8e8e600361004283826108c9565b50600461004f82826108c9565b5050506001600160a01b0382166100ad5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600580546001600160a01b0319166001600160a01b03848116919091179091558116156100dd576100dd8161035e565b5050506001600160a01b039081166080521660a0525f871161015a5760405162461bcd60e51b815260206004820152603060248201527f4d696e696d756d20696e766573746d656e7420616d6f756e74206d757374206260448201526f0652067726561746572207468616e20360841b60648201526084016100a4565b868810156101d05760405162461bcd60e51b815260206004820152603560248201527f546f74616c20676f616c206d757374206265206174206c65617374206d696e6960448201527f6d756d20696e766573746d656e7420616d6f756e74000000000000000000000060648201526084016100a4565b6101da8789610997565b156102595760405162461bcd60e51b815260206004820152604360248201527f546f74616c20676f616c206d75737420626520706572666563746c792064697660448201527f697369626c65206279206d696e696d756d20696e766573746d656e7420616d6f6064820152621d5b9d60ea1b608482015260a4016100a4565b6001600160a01b0386166102c05760405162461bcd60e51b815260206004820152602860248201527f5472757374656420466f7277617264657220616464726573732063616e6e6f74604482015267206265207a65726f60c01b60648201526084016100a4565b60c08b905260e08890526101008790526102da87896109be565b61012052600780546001600160401b038616600160a01b026001600160e01b03199091166001600160a01b038816171790556008839055600961031d83826108c9565b50600a61032a82826108c9565b5061034e3061033b6012600a610ab6565b610120516103499190610acb565b610407565b5050505050505050505050610af5565b336001600160a01b038216036103b65760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100a4565b600680546001600160a01b0319166001600160a01b03838116918217909255600554604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b6001600160a01b0382166104305760405163ec442f0560e01b81525f60048201526024016100a4565b61043b5f838361043f565b5050565b6001600160a01b0383161561052d576001600160a01b0383165f908152601460205260409020544210156104c15760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b60648201526084016100a4565b6104d4600654600160a01b900460ff1690565b1561052d5760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b60648201526084016100a4565b61053883838361053d565b505050565b6001600160a01b038316610567578060025f82825461055c9190610ae2565b909155506105d79050565b6001600160a01b0383165f90815260208190526040902054818110156105b95760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016100a4565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166105f357600280548290039055610611565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161065691815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610686575f5ffd5b81516001600160401b0381111561069f5761069f610663565b604051601f8201601f19908116603f011681016001600160401b03811182821017156106cd576106cd610663565b6040528181528382016020018510156106e4575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b80516001600160a01b0381168114610716575f5ffd5b919050565b80516001600160401b0381168114610716575f5ffd5b5f5f5f5f5f5f5f5f5f5f5f6101608c8e03121561074c575f5ffd5b8b5160208d0151909b506001600160401b03811115610769575f5ffd5b6107758e828f01610677565b60408e0151909b5090506001600160401b03811115610792575f5ffd5b61079e8e828f01610677565b60608e015160808f0151919b50995097506107bd905060a08d01610700565b95506107cb60c08d01610700565b94506107d960e08d0161071b565b6101008d01516101208e015191955093506001600160401b038111156107fd575f5ffd5b6108098e828f01610677565b6101408e015190935090506001600160401b03811115610827575f5ffd5b6108338e828f01610677565b9150509295989b509295989b9093969950565b600181811c9082168061085a57607f821691505b60208210810361087857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561053857805f5260205f20601f840160051c810160208510156108a35750805b601f840160051c820191505b818110156108c2575f81556001016108af565b5050505050565b81516001600160401b038111156108e2576108e2610663565b6108f6816108f08454610846565b8461087e565b6020601f821160018114610928575f83156109115750848201515b5f19600385901b1c1916600184901b1784556108c2565b5f84815260208120601f198516915b828110156109575787850151825560209485019460019092019101610937565b508482101561097457868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52601260045260245ffd5b5f826109a5576109a5610983565b500690565b634e487b7160e01b5f52601160045260245ffd5b5f826109cc576109cc610983565b500490565b6001815b6001841115610a0c578085048111156109f0576109f06109aa565b60018416156109fe57908102905b60019390931c9280026109d5565b935093915050565b5f82610a2257506001610ab0565b81610a2e57505f610ab0565b8160018114610a445760028114610a4e57610a6a565b6001915050610ab0565b60ff841115610a5f57610a5f6109aa565b50506001821b610ab0565b5060208310610133831016604e8410600b8410161715610a8d575081810a610ab0565b610a995f1984846109d1565b805f1904821115610aac57610aac6109aa565b0290505b92915050565b5f610ac460ff841683610a14565b9392505050565b8082028115828204841417610ab057610ab06109aa565b80820180821115610ab057610ab06109aa565b60805160a05160c05160e05161010051610120516134e8610b9e5f395f61023201525f61041101525f61059301525f818161039101528181610cbe015281816113b401528181611df501528181611e8d01528181611fc6015281816120850152818161212f015281816121fa01528181612298015281816124e8015261255401525f8181610443015281816104ca0152611c8901525f8181610721015261197801526134e85ff3fe608060405234801561000f575f5ffd5b5060043610610229575f3560e01c806370a082311161012a578063ae70f03b116100b4578063dd62ed3e11610079578063dd62ed3e1461060f578063e08f563814610622578063eb43efa71461062a578063f2fde38b1461063d578063ffdf54e414610650575f5ffd5b8063ae70f03b14610563578063b1504a881461058e578063d0973af8146105b5578063d6e1be3e146105c8578063dcd9cb6f146105fc575f5ffd5b80638456cb59116100fa5780638456cb59146105015780638bca5a63146105095780638da5cb5b1461053757806395d89b4114610548578063a9059cbb14610550575f5ffd5b806370a082311461049857806379ba5097146104c05780637da0a877146104c85780637f17cef7146104ee575f5ffd5b806338cebb2f116101b65780634c6db4f61161017b5780634c6db4f6146103de5780634d298a071461040c578063572b6c05146104335780635c975abb146104735780635d03714614610485575f5ffd5b806338cebb2f1461033d5780633e579307146103715780633f4ba83a146103845780633fafa1271461038c5780634a603ea6146103b3575f5ffd5b80631290bba1116101fc5780631290bba1146102b457806318160ddd146102c75780631daa41b0146102cf57806323b872dd1461031b578063313ce5671461032e575f5ffd5b80630337b3aa1461022d57806306fdde0314610267578063095ea7b31461027c5780630ca761751461029f575b5f5ffd5b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61026f610663565b60405161025e9190612d65565b61028f61028a366004612d92565b6106f3565b604051901515815260200161025e565b6102b26102ad366004612e5d565b610716565b005b6102b26102c2366004612ec8565b610799565b600254610254565b6103036102dd366004612f29565b8051602081830181018051600b825292820191909301209152546001600160a01b031681565b6040516001600160a01b03909116815260200161025e565b61028f610329366004612f62565b610d16565b6040516012815260200161025e565b61030361034b366004612f29565b80516020818301810180516010825292820191909301209152546001600160a01b031681565b6102b261037f366004612d92565b610d43565b6102b2610dc0565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6102546103c1366004612f29565b805160208183018101805160118252928201919093012091525481565b61028f6103ec366004612f29565b8051602081830181018051600d8252928201919093012091525460ff1681565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b61028f610441366004612f9c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b600654600160a01b900460ff1661028f565b6102b2610493366004612fb5565b610dd2565b6102546104a6366004612f9c565b6001600160a01b03165f9081526020819052604090205490565b6102b2610de7565b7f0000000000000000000000000000000000000000000000000000000000000000610303565b61026f6104fc366004612fb5565b610e94565b6102b2610f2b565b61028f610517366004612f29565b805160208183018101805160128252928201919093012091525460ff1681565b6005546001600160a01b0316610303565b61026f610f3b565b61028f61055e366004612d92565b610f4a565b610254610571366004612f29565b8051602081830181018051600c8252928201919093012091525481565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6102b26105c3366004612d92565b610f61565b6103036105d6366004612f29565b8051602081830181018051600f825292820191909301209152546001600160a01b031681565b600754610303906001600160a01b031681565b61025461061d366004612fcc565b610fd6565b6102b2611000565b6102b2610638366004612ffd565b611077565b6102b261064b366004612f9c565b611407565b61026f61065e366004612fb5565b611418565b6060600380546106729061303f565b80601f016020809104026020016040519081016040528092919081815260200182805461069e9061303f565b80156106e95780601f106106c0576101008083540402835291602001916106e9565b820191905f5260205f20905b8154815290600101906020018083116106cc57829003601f168201915b5050505050905090565b5f5f6106fd611430565b905061070a81858561143e565b60019150505b92915050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461075f5760405163c6829f8360e01b815260040160405180910390fd5b61076a838383611450565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6905f90a2505050565b6107a16115fd565b6107a9611650565b6012846040516107b99190613077565b9081526040519081900360200190205460ff16156108355760405162461bcd60e51b815260206004820152602e60248201527f5075726368617365207265717565737420616c72656164792070726f6365737360448201526d32b21037b9103832b73234b7339760911b60648201526084015b60405180910390fd5b6001600160a01b03831661088b5760405162461bcd60e51b815260206004820152601e60248201527f53656c6c657220616464726573732063616e6e6f74206265207a65726f2e0000604482015260640161082c565b6001600160a01b0382166108e15760405162461bcd60e51b815260206004820152601d60248201527f427579657220616464726573732063616e6e6f74206265207a65726f2e000000604482015260640161082c565b5f81116109435760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e7320746f207472616e73666572206d75737420626520677265617460448201526932b9103a3430b710181760b11b606482015260840161082c565b5f600a80546109519061303f565b9050116109965760405162461bcd60e51b815260206004820152601360248201527214dbdd5c98d94818dbd919481b9bdd081cd95d606a1b604482015260640161082c565b5f6109a36012600a613184565b6109ad9083613192565b9050806109ce856001600160a01b03165f9081526020819052604090205490565b1015610a425760405162461bcd60e51b815260206004820152603960248201527f53656c6c6572277320746f6b656e2062616c616e636520697320696e7375666660448201527f696369656e7420666f7220747261646520726571756573742e00000000000000606482015260840161082c565b80610a4d8530610fd6565b1015610a6b5760405162461bcd60e51b815260040161082c906131a9565b83600f86604051610a7c9190613077565b90815260200160405180910390205f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555082601086604051610abe9190613077565b90815260200160405180910390205f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555081601186604051610b009190613077565b90815260405190819003602001902055610b4e6040805160e08101909152805f81526020015f81526020015f8152602001606081526020016060815260200160608152602001606081525090565b610be9600a8054610b5e9061303f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8a9061303f565b8015610bd55780601f10610bac57610100808354040283529160200191610bd5565b820191905f5260205f20905b815481529060010190602001808311610bb857829003601f168201915b50505050508261167b90919063ffffffff16565b6040805160018082528183019092525f91816020015b6060815260200190600190039081610bff57905050905086815f81518110610c2957610c29613206565b6020908102919091010152610c3e8282611687565b5f610c6d610c4b846116b0565b600760149054906101000a90046001600160401b0316620493e0600854611974565b5f818152601360205260409020909150610c87898261325e565b508088604051610c979190613077565b604080519182900382206001600160a01b03808c1684528a166020840152908201889052907f0000000000000000000000000000000000000000000000000000000000000000907fa464592cc1f7393d131f9d711cf8f093719d7c203a1c4cf6282d1473d8efcd30906060015b60405180910390a45050505050505050565b5f5f610d20611430565b9050610d2d858285611a41565b610d38858585611a9f565b506001949350505050565b610d4b6115fd565b428111610da55760405162461bcd60e51b815260206004820152602260248201527f556e6c6f636b2074696d65206d75737420626520696e20746865206675747572604482015261329760f11b606482015260840161082c565b6001600160a01b039091165f90815260146020526040902055565b610dc86115fd565b610dd0611afc565b565b610dda6115fd565b610de43082611b57565b50565b6006546001600160a01b03163314610e3a5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b604482015260640161082c565b600580546001600160a01b0319808216339081179093556006805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350565b60136020525f908152604090208054610eac9061303f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed89061303f565b8015610f235780601f10610efa57610100808354040283529160200191610f23565b820191905f5260205f20905b815481529060010190602001808311610f0657829003601f168201915b505050505081565b610f336115fd565b610dd0611b8b565b6060600480546106729061303f565b5f5f610f54611430565b905061070a818585611a9f565b610f696115fd565b305f90815260208190526040902054811115610fc75760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e747261637420746f6b656e732e000000604482015260640161082c565b610fd2308383611a9f565b5050565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6110086115fd565b600754604051631cd0704360e21b8152600160a01b82046001600160401b031660048201523060248201526001600160a01b0390911690637341c10c906044015f604051808303815f87803b15801561105f575f5ffd5b505af1158015611071573d5f5f3e3d5ffd5b50505050565b61107f6115fd565b611087611650565b600d836040516110979190613077565b9081526040519081900360200190205460ff161561110d5760405162461bcd60e51b815260206004820152602d60248201527f496e697469616c207265717565737420616c72656164792070726f636573736560448201526c321037b9103832b73234b7339760991b606482015260840161082c565b6001600160a01b0382166111635760405162461bcd60e51b815260206004820152601d60248201527f427579657220616464726573732063616e6e6f74206265207a65726f2e000000604482015260640161082c565b5f81116111be5760405162461bcd60e51b8152602060048201526024808201527f546f6b656e20616d6f756e74206d7573742062652067726561746572207468616044820152633710181760e11b606482015260840161082c565b6111ca6012600a613184565b6111d49082613192565b305f9081526020819052604090205410156112575760405162461bcd60e51b815260206004820152603760248201527f4e6f7420656e6f75676820746f6b656e7320696e20636f6e747261637420666f60448201527f72207468697320696e697469616c20726571756573742e000000000000000000606482015260840161082c565b81600b846040516112689190613077565b90815260200160405180910390205f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600c846040516112aa9190613077565b908152604051908190036020019020556112f86040805160e08101909152805f81526020015f81526020015f8152602001606081526020016060815260200160608152602001606081525090565b61130860098054610b5e9061303f565b6040805160018082528183019092525f91816020015b606081526020019060019003908161131e57905050905084815f8151811061134857611348613206565b602090810291909101015261135d8282611687565b5f61136a610c4b846116b0565b5f818152600e60205260409020909150611384878261325e565b5080866040516113949190613077565b604080519182900382206001600160a01b038916835260208301889052917f0000000000000000000000000000000000000000000000000000000000000000917f836fc95ab5b39b8069f428767dc90fe3baee4fb4a25bbbd50f2707f3b3c69dcb910160405180910390a4505050505050565b61140f6115fd565b610de481611bcf565b600e6020525f908152604090208054610eac9061303f565b5f611439611c78565b905090565b61144b8383836001611ce2565b505050565b5f838152600e6020526040812080546114689061303f565b80601f01602080910402602001604051908101604052809291908181526020018280546114949061303f565b80156114df5780601f106114b6576101008083540402835291602001916114df565b820191905f5260205f20905b8154815290600101906020018083116114c257829003601f168201915b505050505090505f60135f8681526020019081526020015f2080546115039061303f565b80601f016020809104026020016040519081016040528092919081815260200182805461152f9061303f565b801561157a5780601f106115515761010080835404028352916020019161157a565b820191905f5260205f20905b81548152906001019060200180831161155d57829003601f168201915b505050505090505f8251111561159b5761159685838686611db4565b6115f6565b8051156115ae57611596858286866121b9565b60405162461bcd60e51b815260206004820152601c60248201527f556e6b6e6f776e20436861696e6c696e6b207265717565737420494400000000604482015260640161082c565b5050505050565b6005546001600160a01b03163314610dd05760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b604482015260640161082c565b600654600160a01b900460ff1615610dd05760405163d93c066560e01b815260040160405180910390fd5b610fd2825f5f846125ec565b80515f036116a85760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60605f6116be610100612669565b90506116f76040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b8152508261268990919063ffffffff16565b825161171590600281111561170e5761170e613318565b82906126a2565b6040805180820190915260088152676c616e677561676560c01b602082015261173f908290612689565b604083015161175690801561170e5761170e613318565b604080518082019091526006815265736f7572636560d01b602082015261177e908290612689565b606083015161178e908290612689565b60a08301515115611819576040805180820190915260048152636172677360e01b60208201526117bf908290612689565b6117c8816126db565b5f5b8360a001515181101561180f576118078460a0015182815181106117f0576117f0613206565b60200260200101518361268990919063ffffffff16565b6001016117ca565b50611819816126ff565b608083015151156118dc575f8360200151600281111561183b5761183b613318565b036118595760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b602082015261188a908290612689565b6118a38360200151600281111561170e5761170e613318565b6040805180820190915260078152667365637265747360c81b60208201526118cc908290612689565b60808301516118dc90829061271d565b60c0830151511561196c5760408051808201909152600981526862797465734172677360b81b6020820152611912908290612689565b61191b816126db565b5f5b8360c00151518110156119625761195a8460c00151828151811061194357611943613206565b60200260200101518361271d90919063ffffffff16565b60010161191d565b5061196c816126ff565b515192915050565b5f5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b81526004016119cb95949392919061332c565b6020604051808303815f875af11580156119e7573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a0b9190613374565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8905f90a295945050505050565b5f611a4c8484610fd6565b90505f198110156110715781811015611a9157604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161082c565b61107184848484035f611ce2565b6001600160a01b038316611ac857604051634b637e8f60e11b81525f600482015260240161082c565b6001600160a01b038216611af15760405163ec442f0560e01b81525f600482015260240161082c565b61144b83838361272a565b611b0461281d565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611b3a611430565b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216611b8057604051634b637e8f60e11b81525f600482015260240161082c565b610fd2825f8361272a565b611b93611650565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b3a611430565b336001600160a01b03821603611c275760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161082c565b600680546001600160a01b0319166001600160a01b03838116918217909255600554604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b5f366014808210801590611cb457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633145b15611cda57611cc736828403815f61338b565b611cd0916133b2565b60601c9250505090565b339250505090565b6001600160a01b038416611d0b5760405163e602df0560e01b81525f600482015260240161082c565b6001600160a01b038316611d3457604051634a1406b160e11b81525f600482015260240161082c565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561107157826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611da691815260200190565b60405180910390a350505050565b600d83604051611dc49190613077565b9081526040519081900360200190205460ff1615611e6d578383604051611deb9190613077565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206134935f395f51905f52604051611e60906020808252601a908201527f5265717565737420616c72656164792070726f6365737365642e000000000000604082015260600190565b60405180910390a4611071565b805115611ec6578383604051611e839190613077565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206134935f395f51905f52604051611e60906133ff565b5f600b84604051611ed79190613077565b908152604051908190036020018120546001600160a01b031691505f90600c90611f02908790613077565b90815260200160405180910390205490505f84806020019051810190611f289190613374565b90508060010361211657611f3e6012600a613184565b611f489083613192565b305f908152602081905260409020541061206c57611f7c3084611f6d6012600a613184565b611f779086613192565b611a9f565b6001600d87604051611f8e9190613077565b908152604051908190036020018120805492151560ff19909316929092179091558790611fbc908890613077565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007f7fc6f4011ccd89346585e4aa424eccd102db2a87e3e7dd3657e94ad54e561216868660405161205f9291906001600160a01b0392909216825260208201526060604082018190526018908201527f496e697469616c207061796d656e742076657269666965640000000000000000608082015260a00190565b60405180910390a46121b0565b868660405161207b9190613077565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206134935f395f51905f5260405161205f9060208082526038908201527f496e73756666696369656e7420636f6e747261637420746f6b656e207375707060408201527f6c7920666f7220696e697469616c207472616e736665722e0000000000000000606082015260800190565b86866040516121259190613077565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000005f5160206134935f395f51905f526040516121a79060208082526024908201527f496e697469616c207061796d656e7420766572696669636174696f6e206661696040820152633632b21760e11b606082015260800190565b60405180910390a45b50505050505050565b6012836040516121c99190613077565b9081526040519081900360200190205460ff16156122785783836040516121f09190613077565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007fd47dce3227e1cdb7e0953a8e02e7011dcb010cdba5c19a494536ba3e2be1c30e604051611e60906020808252601a908201527f5265717565737420616c72656164792070726f6365737365642e000000000000604082015260600190565b8051156122e457838360405161228e9190613077565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007fd47dce3227e1cdb7e0953a8e02e7011dcb010cdba5c19a494536ba3e2be1c30e604051611e60906133ff565b5f600f846040516122f59190613077565b908152604051908190036020018120546001600160a01b031691505f90601090612320908790613077565b908152604051908190036020018120546001600160a01b031691505f9060119061234b908890613077565b90815260200160405180910390205490505f858060200190518101906123719190613374565b90508060010361253b575f6123886012600a613184565b6123929084613192565b90508061239f8630610fd6565b10156123bd5760405162461bcd60e51b815260040161082c906131a9565b806123dc866001600160a01b03165f9081526020819052604090205490565b10156124415760405162461bcd60e51b815260206004820152602e60248201527f53656c6c657227732062616c616e636520697320696e73756666696369656e7460448201526d103337b9103a3930b739b332b91760911b606482015260840161082c565b61244c858583611a9f565b600160128960405161245e9190613077565b908152604051908190036020018120805492151560ff1990931692909217909155899061248c908a90613077565b604080519182900382206001600160a01b03808a16845288166020840152908201869052608060608301819052601b908301527f4f66662d636861696e207075726368617365207665726966696564000000000060a0830152907f0000000000000000000000000000000000000000000000000000000000000000907f52de7a221cbfd6e4743e31cc6531e8aa1e21da79ade52efb8df784235125e8c29060c00160405180910390a4506125e2565b878760405161254a9190613077565b60405180910390207f00000000000000000000000000000000000000000000000000000000000000007fd47dce3227e1cdb7e0953a8e02e7011dcb010cdba5c19a494536ba3e2be1c30e604051610d049060208082526027908201527f4f66662d636861696e20707572636861736520766572696669636174696f6e206040820152663330b4b632b21760c91b606082015260800190565b5050505050505050565b80515f0361260d576040516322ce3edd60e01b815260040160405180910390fd5b8383600281111561262057612620613318565b9081600281111561263357612633613318565b9052506040840182801561264957612649613318565b9081801561265957612659613318565b9052506060909301929092525050565b612671612d04565b805161267d9083612847565b505f6020820152919050565b61269682600383516128bb565b815161144b90826129d4565b81516126af9060c26129fb565b50610fd282826040516020016126c791815260200190565b60405160208183030381529060405261271d565b6126e6816004612a62565b6001816020018181516126f99190613442565b90525050565b61270a816007612a62565b6001816020018181516126f99190613455565b61269682600283516128bb565b6001600160a01b03831615612812576001600160a01b0383165f908152601460205260409020544210156127ac5760405162461bcd60e51b815260206004820152602360248201527f546f6b656e7320617265206c6f636b656420666f722074686973206163636f75604482015262373a1760e91b606482015260840161082c565b600654600160a01b900460ff16156128125760405162461bcd60e51b815260206004820152602360248201527f546f6b656e732061726520506175736564206f6e207468697320636f6e74726160448201526231ba1760e91b606482015260840161082c565b61144b838383612a79565b600654600160a01b900460ff16610dd057604051638dfc202b60e01b815260040160405180910390fd5b60408051808201909152606081525f6020820152612866602083613468565b1561288e57612876602083613468565b612881906020613455565b61288b9083613442565b91505b60208084018390526040518085525f81529081840101818110156128b0575f5ffd5b604052509192915050565b6017816001600160401b0316116128e15782516110719060e0600585901b1683176129fb565b60ff816001600160401b031611612921578251612909906018611fe0600586901b16176129fb565b508251611071906001600160401b0383166001612b9f565b61ffff816001600160401b03161161296257825161294a906019611fe0600586901b16176129fb565b508251611071906001600160401b0383166002612b9f565b63ffffffff816001600160401b0316116129a557825161298d90601a611fe0600586901b16176129fb565b508251611071906001600160401b0383166004612b9f565b82516129bc90601b611fe0600586901b16176129fb565b508251611071906001600160401b0383166008612b9f565b60408051808201909152606081525f60208201526129f483838451612c21565b9392505050565b60408051808201909152606081525f60208201528251515f612a1e826001613442565b905084602001518210612a3f57612a3f85612a3a836002613192565b612ced565b8451602083820101858153508051821115612a58578181525b5093949350505050565b815161144b90601f611fe0600585901b16176129fb565b6001600160a01b038316612aa3578060025f828254612a989190613442565b90915550612b139050565b6001600160a01b0383165f9081526020819052604090205481811015612af55760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161082c565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216612b2f57600280548290039055612b4d565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612b9291815260200190565b60405180910390a3505050565b60408051808201909152606081525f60208201528351515f612bc18285613442565b90508560200151811115612bde57612bde86612a3a836002613192565b5f6001612bed86610100613487565b612bf79190613455565b90508651828101878319825116178152508051831115612c15578281525b50959695505050505050565b60408051808201909152606081525f60208201528251821115612c42575f5ffd5b8351515f612c508483613442565b90508560200151811115612c6d57612c6d86612a3a836002613192565b85518051838201602001915f9180851115612c86578482525b505050602086015b60208610612cc65780518252612ca5602083613442565b9150612cb2602082613442565b9050612cbf602087613455565b9550612c8e565b5181515f1960208890036101000a0190811690199190911617905250849150509392505050565b8151612cf98383612847565b5061107183826129d4565b6040518060400160405280612d2b6040518060400160405280606081526020015f81525090565b81526020015f81525090565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6129f46020830184612d37565b80356001600160a01b0381168114612d8d575f5ffd5b919050565b5f5f60408385031215612da3575f5ffd5b612dac83612d77565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112612ddd575f5ffd5b8135602083015f5f6001600160401b03841115612dfc57612dfc612dba565b50604051601f19601f85018116603f011681018181106001600160401b0382111715612e2a57612e2a612dba565b604052838152905080828401871015612e41575f5ffd5b838360208301375f602085830101528094505050505092915050565b5f5f5f60608486031215612e6f575f5ffd5b8335925060208401356001600160401b03811115612e8b575f5ffd5b612e9786828701612dce565b92505060408401356001600160401b03811115612eb2575f5ffd5b612ebe86828701612dce565b9150509250925092565b5f5f5f5f60808587031215612edb575f5ffd5b84356001600160401b03811115612ef0575f5ffd5b612efc87828801612dce565b945050612f0b60208601612d77565b9250612f1960408601612d77565b9396929550929360600135925050565b5f60208284031215612f39575f5ffd5b81356001600160401b03811115612f4e575f5ffd5b612f5a84828501612dce565b949350505050565b5f5f5f60608486031215612f74575f5ffd5b612f7d84612d77565b9250612f8b60208501612d77565b929592945050506040919091013590565b5f60208284031215612fac575f5ffd5b6129f482612d77565b5f60208284031215612fc5575f5ffd5b5035919050565b5f5f60408385031215612fdd575f5ffd5b612fe683612d77565b9150612ff460208401612d77565b90509250929050565b5f5f5f6060848603121561300f575f5ffd5b83356001600160401b03811115613024575f5ffd5b61303086828701612dce565b935050612f8b60208501612d77565b600181811c9082168061305357607f821691505b60208210810361307157634e487b7160e01b5f52602260045260245ffd5b50919050565b5f82518060208501845e5f920191825250919050565b634e487b7160e01b5f52601160045260245ffd5b6001815b60018411156130dc578085048111156130c0576130c061308d565b60018416156130ce57908102905b60019390931c9280026130a5565b935093915050565b5f826130f257506001610710565b816130fe57505f610710565b8160018114613114576002811461311e5761313a565b6001915050610710565b60ff84111561312f5761312f61308d565b50506001821b610710565b5060208310610133831016604e8410600b841016171561315d575081810a610710565b6131695f1984846130a1565b805f190482111561317c5761317c61308d565b029392505050565b5f6129f460ff8416836130e4565b80820281158282048414176107105761071061308d565b6020808252603c908201527f53656c6c6572277320616c6c6f77616e636520746f20636f6e7472616374206960408201527f7320696e73756666696369656e7420666f72207472616e736665722e00000000606082015260800190565b634e487b7160e01b5f52603260045260245ffd5b601f82111561144b57805f5260205f20601f840160051c8101602085101561323f5750805b601f840160051c820191505b818110156115f6575f815560010161324b565b81516001600160401b0381111561327757613277612dba565b61328b81613285845461303f565b8461321a565b6020601f8211600181146132bd575f83156132a65750848201515b5f19600385901b1c1916600184901b1784556115f6565b5f84815260208120601f198516915b828110156132ec57878501518255602094850194600190920191016132cc565b508482101561330957868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52602160045260245ffd5b6001600160401b038616815260a060208201525f61334d60a0830187612d37565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b5f60208284031215613384575f5ffd5b5051919050565b5f5f85851115613399575f5ffd5b838611156133a5575f5ffd5b5050820193919092039150565b80356bffffffffffffffffffffffff1981169060148410156133f8576bffffffffffffffffffffffff196bffffffffffffffffffffffff198560140360031b1b82161691505b5092915050565b60208082526023908201527f436861696e6c696e6b2046756e6374696f6e732072657175657374206661696c60408201526232b21760e91b606082015260800190565b808201808211156107105761071061308d565b818103818111156107105761071061308d565b5f8261348257634e487b7160e01b5f52601260045260245ffd5b500690565b5f6129f483836130e456fead479482710611816594b993773669ccd6b37af34d2dd613a5243d90ccd05c85a2646970667358221220f2a3708c7eb37de9fd067a76d7c7a0e8ac93c90f8fb8696c005d4e96b99ec67f64736f6c634300081d0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNCONTRACTTOKENS = "burnContractTokens";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_FUNCTIONSSUBSCRIPTIONS = "functionsSubscriptions";

    public static final String FUNC_HANDLEORACLEFULFILLMENT = "handleOracleFulfillment";

    public static final String FUNC_INVESTMENTKEY = "investmentKey";

    public static final String FUNC_INVESTMENTPROCESSED = "investmentProcessed";

    public static final String FUNC_INVESTMENTTOKENAMOUNT = "investmentTokenAmount";

    public static final String FUNC_INVESTMENTOR = "investmentor";

    public static final String FUNC_ISTRUSTEDFORWARDER = "isTrustedForwarder";

    public static final String FUNC_MININVESTMENTAMOUNT = "minInvestmentAmount";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PROJECTID = "projectId";

    public static final String FUNC_REGISTERASCONSUMER = "registerAsConsumer";

    public static final String FUNC_REQUESTINVESTMENT = "requestInvestment";

    public static final String FUNC_REQUESTTRADE = "requestTrade";

    public static final String FUNC_SETLOCKUP = "setLockup";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALINVESTMENTAMOUNT = "totalInvestmentAmount";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TOTALTOKENAMOUNT = "totalTokenAmount";

    public static final String FUNC_TRADEBUYER = "tradeBuyer";

    public static final String FUNC_TRADEKEY = "tradeKey";

    public static final String FUNC_TRADEPROCESSED = "tradeProcessed";

    public static final String FUNC_TRADESELLER = "tradeSeller";

    public static final String FUNC_TRADETOKENAMOUNT = "tradeTokenAmount";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERTOKENSFROMCONTRACT = "transferTokensFromContract";

    public static final String FUNC_TRUSTEDFORWARDER = "trustedForwarder";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INVESTMENTFAILED_EVENT = new Event("InvestmentFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INVESTMENTREQUESTED_EVENT = new Event("InvestmentRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INVESTMENTSUCCESSFUL_EVENT = new Event("InvestmentSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERREQUESTED_EVENT = new Event("OwnershipTransferRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTFULFILLED_EVENT = new Event("RequestFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event REQUESTSENT_EVENT = new Event("RequestSent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event TRADEFAILED_EVENT = new Event("TradeFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRADEREQUESTED_EVENT = new Event("TradeRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRADESUCCESSFUL_EVENT = new Event("TradeSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected FractionalInvestmentToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<InvestmentFailedEventResponse> getInvestmentFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, transactionReceipt);
        ArrayList<InvestmentFailedEventResponse> responses = new ArrayList<InvestmentFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentFailedEventResponse getInvestmentFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTFAILED_EVENT, log);
        InvestmentFailedEventResponse typedResponse = new InvestmentFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentFailedEventFromLog(log));
    }

    public Flowable<InvestmentFailedEventResponse> investmentFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTFAILED_EVENT));
        return investmentFailedEventFlowable(filter);
    }

    public static List<InvestmentRequestedEventResponse> getInvestmentRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, transactionReceipt);
        ArrayList<InvestmentRequestedEventResponse> responses = new ArrayList<InvestmentRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentRequestedEventResponse getInvestmentRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTREQUESTED_EVENT, log);
        InvestmentRequestedEventResponse typedResponse = new InvestmentRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentRequestedEventFromLog(log));
    }

    public Flowable<InvestmentRequestedEventResponse> investmentRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTREQUESTED_EVENT));
        return investmentRequestedEventFlowable(filter);
    }

    public static List<InvestmentSuccessfulEventResponse> getInvestmentSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<InvestmentSuccessfulEventResponse> responses = new ArrayList<InvestmentSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvestmentSuccessfulEventResponse getInvestmentSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVESTMENTSUCCESSFUL_EVENT, log);
        InvestmentSuccessfulEventResponse typedResponse = new InvestmentSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.investmentId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvestmentSuccessfulEventFromLog(log));
    }

    public Flowable<InvestmentSuccessfulEventResponse> investmentSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTSUCCESSFUL_EVENT));
        return investmentSuccessfulEventFlowable(filter);
    }

    public static List<OwnershipTransferRequestedEventResponse> getOwnershipTransferRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferRequestedEventResponse> responses = new ArrayList<OwnershipTransferRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferRequestedEventResponse getOwnershipTransferRequestedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, log);
        OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferRequestedEventFromLog(log));
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERREQUESTED_EVENT));
        return ownershipTransferRequestedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<RequestFulfilledEventResponse> getRequestFulfilledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, transactionReceipt);
        ArrayList<RequestFulfilledEventResponse> responses = new ArrayList<RequestFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestFulfilledEventResponse getRequestFulfilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, log);
        RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestFulfilledEventFromLog(log));
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTFULFILLED_EVENT));
        return requestFulfilledEventFlowable(filter);
    }

    public static List<RequestSentEventResponse> getRequestSentEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, transactionReceipt);
        ArrayList<RequestSentEventResponse> responses = new ArrayList<RequestSentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestSentEventResponse typedResponse = new RequestSentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestSentEventResponse getRequestSentEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, log);
        RequestSentEventResponse typedResponse = new RequestSentEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestSentEventFromLog(log));
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSENT_EVENT));
        return requestSentEventFlowable(filter);
    }

    public static List<TradeFailedEventResponse> getTradeFailedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, transactionReceipt);
        ArrayList<TradeFailedEventResponse> responses = new ArrayList<TradeFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeFailedEventResponse getTradeFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEFAILED_EVENT, log);
        TradeFailedEventResponse typedResponse = new TradeFailedEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeFailedEventFromLog(log));
    }

    public Flowable<TradeFailedEventResponse> tradeFailedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEFAILED_EVENT));
        return tradeFailedEventFlowable(filter);
    }

    public static List<TradeRequestedEventResponse> getTradeRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, transactionReceipt);
        ArrayList<TradeRequestedEventResponse> responses = new ArrayList<TradeRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeRequestedEventResponse getTradeRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADEREQUESTED_EVENT, log);
        TradeRequestedEventResponse typedResponse = new TradeRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeRequestedEventFromLog(log));
    }

    public Flowable<TradeRequestedEventResponse> tradeRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADEREQUESTED_EVENT));
        return tradeRequestedEventFlowable(filter);
    }

    public static List<TradeSuccessfulEventResponse> getTradeSuccessfulEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<TradeSuccessfulEventResponse> responses = new ArrayList<TradeSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TradeSuccessfulEventResponse getTradeSuccessfulEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRADESUCCESSFUL_EVENT, log);
        TradeSuccessfulEventResponse typedResponse = new TradeSuccessfulEventResponse();
        typedResponse.log = log;
        typedResponse.projectId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.chainlinkRequestId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.chainlinkResult = (String) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTradeSuccessfulEventFromLog(log));
    }

    public Flowable<TradeSuccessfulEventResponse> tradeSuccessfulEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADESUCCESSFUL_EVENT));
        return tradeSuccessfulEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
        final Function function = new Function(
                FUNC_ACCEPTOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnContractTokens(BigInteger _amount) {
        final Function function = new Function(
                FUNC_BURNCONTRACTTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> functionsSubscriptions() {
        final Function function = new Function(FUNC_FUNCTIONSSUBSCRIPTIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOracleFulfillment(byte[] requestId,
            byte[] response, byte[] err) {
        final Function function = new Function(
                FUNC_HANDLEORACLEFULFILLMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId), 
                new org.web3j.abi.datatypes.DynamicBytes(response), 
                new org.web3j.abi.datatypes.DynamicBytes(err)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> investmentKey(byte[] param0) {
        final Function function = new Function(FUNC_INVESTMENTKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> investmentProcessed(String param0) {
        final Function function = new Function(FUNC_INVESTMENTPROCESSED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> investmentTokenAmount(String param0) {
        final Function function = new Function(FUNC_INVESTMENTTOKENAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> investmentor(String param0) {
        final Function function = new Function(FUNC_INVESTMENTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isTrustedForwarder(String forwarder) {
        final Function function = new Function(FUNC_ISTRUSTEDFORWARDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, forwarder)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> minInvestmentAmount() {
        final Function function = new Function(FUNC_MININVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<byte[]> projectId() {
        final Function function = new Function(FUNC_PROJECTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> registerAsConsumer() {
        final Function function = new Function(
                FUNC_REGISTERASCONSUMER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestInvestment(String _investmentId,
            String _buyer, BigInteger _tokenAmount) {
        final Function function = new Function(
                FUNC_REQUESTINVESTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_investmentId),
                new org.web3j.abi.datatypes.Address(160, _buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestTrade(String _tradeId, String _seller,
            String _buyer, BigInteger _tokenAmount) {
        final Function function = new Function(
                FUNC_REQUESTTRADE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_tradeId), 
                new org.web3j.abi.datatypes.Address(160, _seller), 
                new org.web3j.abi.datatypes.Address(160, _buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLockup(String _account,
            BigInteger _unlockTime) {
        final Function function = new Function(
                FUNC_SETLOCKUP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account), 
                new org.web3j.abi.datatypes.generated.Uint256(_unlockTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalInvestmentAmount() {
        final Function function = new Function(FUNC_TOTALINVESTMENTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalTokenAmount() {
        final Function function = new Function(FUNC_TOTALTOKENAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tradeBuyer(String param0) {
        final Function function = new Function(FUNC_TRADEBUYER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tradeKey(byte[] param0) {
        final Function function = new Function(FUNC_TRADEKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> tradeProcessed(String param0) {
        final Function function = new Function(FUNC_TRADEPROCESSED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> tradeSeller(String param0) {
        final Function function = new Function(FUNC_TRADESELLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tradeTokenAmount(String param0) {
        final Function function = new Function(FUNC_TRADETOKENAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String to) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferTokensFromContract(String _to,
            BigInteger _amount) {
        final Function function = new Function(
                FUNC_TRANSFERTOKENSFROMCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> trustedForwarder() {
        final Function function = new Function(FUNC_TRUSTEDFORWARDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static FractionalInvestmentToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new FractionalInvestmentToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _trustedForwarder, String _router, BigInteger _subscriptionId, byte[] _donId,
            String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _trustedForwarder), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _trustedForwarder, String _router,
            BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _trustedForwarder), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, byte[] _projectId, String _name,
            String _symbol, BigInteger _totalAmount, BigInteger _minInvestmentAmount,
            String _trustedForwarder, String _router, BigInteger _subscriptionId, byte[] _donId,
            String _investmentSourceCode, String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _trustedForwarder), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<FractionalInvestmentToken> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            byte[] _projectId, String _name, String _symbol, BigInteger _totalAmount,
            BigInteger _minInvestmentAmount, String _trustedForwarder, String _router,
            BigInteger _subscriptionId, byte[] _donId, String _investmentSourceCode,
            String _tradeSourceCode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_projectId), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_minInvestmentAmount), 
                new org.web3j.abi.datatypes.Address(160, _trustedForwarder), 
                new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId), 
                new org.web3j.abi.datatypes.Utf8String(_investmentSourceCode), 
                new org.web3j.abi.datatypes.Utf8String(_tradeSourceCode)));
        return deployRemoteCall(FractionalInvestmentToken.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class InvestmentFailedEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] investmentId;

        public byte[] chainlinkRequestId;

        public String reason;
    }

    public static class InvestmentRequestedEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] investmentId;

        public byte[] chainlinkRequestId;

        public String buyer;

        public BigInteger tokenAmount;
    }

    public static class InvestmentSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] investmentId;

        public byte[] chainlinkRequestId;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class OwnershipTransferRequestedEventResponse extends BaseEventResponse {
        public String from;

        public String to;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String from;

        public String to;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RequestFulfilledEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class RequestSentEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class TradeFailedEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] tradeId;

        public byte[] chainlinkRequestId;

        public String reason;
    }

    public static class TradeRequestedEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] tradeId;

        public byte[] chainlinkRequestId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;
    }

    public static class TradeSuccessfulEventResponse extends BaseEventResponse {
        public byte[] projectId;

        public byte[] tradeId;

        public byte[] chainlinkRequestId;

        public String seller;

        public String buyer;

        public BigInteger tokenAmount;

        public String chainlinkResult;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
